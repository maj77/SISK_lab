
TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f54  08003f54  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000005c  08003fb8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08003fb8  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab77  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e09  00000000  00000000  0002ac46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076b  00000000  00000000  0002d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159ec  00000000  00000000  0002db83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c026  00000000  00000000  0004356f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086229  00000000  00000000  0004f595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bd8  00000000  00000000  000d57c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000d8398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003edc 	.word	0x08003edc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003edc 	.word	0x08003edc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <MX_GPIO_Init+0x150>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a4c      	ldr	r2, [pc, #304]	; (80006cc <MX_GPIO_Init+0x150>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <MX_GPIO_Init+0x150>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b46      	ldr	r3, [pc, #280]	; (80006cc <MX_GPIO_Init+0x150>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a45      	ldr	r2, [pc, #276]	; (80006cc <MX_GPIO_Init+0x150>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b43      	ldr	r3, [pc, #268]	; (80006cc <MX_GPIO_Init+0x150>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <MX_GPIO_Init+0x150>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a3e      	ldr	r2, [pc, #248]	; (80006cc <MX_GPIO_Init+0x150>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <MX_GPIO_Init+0x150>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <MX_GPIO_Init+0x150>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a37      	ldr	r2, [pc, #220]	; (80006cc <MX_GPIO_Init+0x150>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <MX_GPIO_Init+0x150>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4832      	ldr	r0, [pc, #200]	; (80006d0 <MX_GPIO_Init+0x154>)
 8000608:	f001 fa90 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	4830      	ldr	r0, [pc, #192]	; (80006d4 <MX_GPIO_Init+0x158>)
 8000612:	f001 fa8b 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	482f      	ldr	r0, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x15c>)
 800061c:	f001 fa86 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000626:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	4827      	ldr	r0, [pc, #156]	; (80006d4 <MX_GPIO_Init+0x158>)
 8000638:	f001 f8f4 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800063c:	2320      	movs	r3, #32
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	481f      	ldr	r0, [pc, #124]	; (80006d0 <MX_GPIO_Init+0x154>)
 8000654:	f001 f8e6 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <MX_GPIO_Init+0x158>)
 8000670:	f001 f8d8 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8000686:	230f      	movs	r3, #15
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	480f      	ldr	r0, [pc, #60]	; (80006d0 <MX_GPIO_Init+0x154>)
 8000692:	f001 f8c7 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <MX_GPIO_Init+0x15c>)
 80006ae:	f001 f8b9 	bl	8001824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f001 f87d 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f001 f896 	bl	80017ee <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400

080006dc <HAL_GPIO_EXTI_Callback>:
uint32_t previous_time = 0;
uint32_t current_time = 0;
uint32_t button_caputered = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
    current_time = HAL_GetTick();						//time reading
 80006e6:	f000 ff5b 	bl	80015a0 <HAL_GetTick>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a0b      	ldr	r2, [pc, #44]	; (800071c <HAL_GPIO_EXTI_Callback+0x40>)
 80006ee:	6013      	str	r3, [r2, #0]
    if((GPIO_Pin == B1_Pin) && (current_time - previous_time)>BUTTON_DEBOUNCE_TIME)
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f6:	d109      	bne.n	800070c <HAL_GPIO_EXTI_Callback+0x30>
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_GPIO_EXTI_Callback+0x40>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_GPIO_EXTI_Callback+0x44>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2bfa      	cmp	r3, #250	; 0xfa
 8000704:	d902      	bls.n	800070c <HAL_GPIO_EXTI_Callback+0x30>
    {
    	button_caputered = 1;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <HAL_GPIO_EXTI_Callback+0x48>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
    }
    previous_time = current_time;						//previous time assignment
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_GPIO_EXTI_Callback+0x40>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_GPIO_EXTI_Callback+0x44>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000a0 	.word	0x200000a0
 8000720:	2000009c 	.word	0x2000009c
 8000724:	200000a4 	.word	0x200000a4

08000728 <send_light>:


uint8_t message[32];
void send_light(uint8_t data)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    sprintf(message, "%d", data);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	461a      	mov	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <send_light+0x30>)
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <send_light+0x34>)
 800073a:	f002 ff2b 	bl	8003594 <siprintf>
    nRF24_WriteTXPayload(message);
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <send_light+0x34>)
 8000740:	f000 fc60 	bl	8001004 <nRF24_WriteTXPayload>
    HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 ff37 	bl	80015b8 <HAL_Delay>
    nRF24_WaitTX();
 800074a:	f000 fc69 	bl	8001020 <nRF24_WaitTX>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08003ef4 	.word	0x08003ef4
 800075c:	200000a8 	.word	0x200000a8

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 feb5 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f84d 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f7ff ff05 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000772:	f000 fe13 	bl	800139c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000776:	f000 fcd1 	bl	800111c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi2);
 800077a:	481c      	ldr	r0, [pc, #112]	; (80007ec <main+0x8c>)
 800077c:	f000 fc78 	bl	8001070 <nRF24_Init>
  nRF24_SetRXAddress(0, "Nad");
 8000780:	491b      	ldr	r1, [pc, #108]	; (80007f0 <main+0x90>)
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fb55 	bl	8000e32 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Odb");
 8000788:	481a      	ldr	r0, [pc, #104]	; (80007f4 <main+0x94>)
 800078a:	f000 fb8b 	bl	8000ea4 <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 800078e:	f000 f979 	bl	8000a84 <nRF24_TX_Mode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(i=0; i<5; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	e025      	b.n	80007e4 <main+0x84>
	  {
		  //check captured of button
		  if(button_caputered == 1){
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <main+0x98>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d108      	bne.n	80007b2 <main+0x52>
			//temporary value to send
			uint8_t tmp = 9;
 80007a0:	2309      	movs	r3, #9
 80007a2:	71bb      	strb	r3, [r7, #6]
			send_light(tmp);
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffbe 	bl	8000728 <send_light>
			button_caputered = 0;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <main+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
		  }
		  MessageLength = sprintf(Message, "%d", i );
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4911      	ldr	r1, [pc, #68]	; (80007fc <main+0x9c>)
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <main+0xa0>)
 80007ba:	f002 feeb 	bl	8003594 <siprintf>
 80007be:	4603      	mov	r3, r0
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <main+0xa4>)
 80007c4:	701a      	strb	r2, [r3, #0]
		  nRF24_WriteTXPayload(Message);
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <main+0xa0>)
 80007c8:	f000 fc1c 	bl	8001004 <nRF24_WriteTXPayload>
		  HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fef3 	bl	80015b8 <HAL_Delay>
		  nRF24_WaitTX();
 80007d2:	f000 fc25 	bl	8001020 <nRF24_WaitTX>
		  HAL_Delay(1000);
 80007d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007da:	f000 feed 	bl	80015b8 <HAL_Delay>
	  for(i=0; i<5; i++)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3301      	adds	r3, #1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d9d6      	bls.n	8000798 <main+0x38>
 80007ea:	e7d2      	b.n	8000792 <main+0x32>
 80007ec:	200000d0 	.word	0x200000d0
 80007f0:	08003ef8 	.word	0x08003ef8
 80007f4:	08003efc 	.word	0x08003efc
 80007f8:	200000a4 	.word	0x200000a4
 80007fc:	08003ef4 	.word	0x08003ef4
 8000800:	20000078 	.word	0x20000078
 8000804:	20000098 	.word	0x20000098

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fedc 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <SystemClock_Config+0xcc>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <SystemClock_Config+0xd0>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	2310      	movs	r3, #16
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000878:	2310      	movs	r3, #16
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800087c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000882:	2304      	movs	r3, #4
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000886:	2304      	movs	r3, #4
 8000888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f97e 	bl	8001b90 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800089a:	f000 f81f 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fbe0 	bl	8002080 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008c6:	f000 f809 	bl	80008dc <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	; 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>

080008e6 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 fe61 	bl	80015b8 <HAL_Delay>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <nRF24_SendSpi+0x28>)
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	b29a      	uxth	r2, r3
 8000914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	f001 fe5a 	bl	80025d2 <HAL_SPI_Transmit>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000c8 	.word	0x200000c8

0800092c <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <nRF24_ReadSpi+0x28>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	f001 ff80 	bl	800284a <HAL_SPI_Receive>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000c8 	.word	0x200000c8

08000958 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000966:	2200      	movs	r2, #0
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <nRF24_ReadRegister+0x44>)
 800096c:	f001 f8de 	bl	8001b2c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffc3 	bl	8000900 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800097a:	f107 030f 	add.w	r3, r7, #15
 800097e:	2101      	movs	r1, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffd3 	bl	800092c <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000986:	2201      	movs	r2, #1
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <nRF24_ReadRegister+0x44>)
 800098c:	f001 f8ce 	bl	8001b2c <HAL_GPIO_WritePin>

	return result;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020800 	.word	0x40020800

080009a0 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80009b4:	2200      	movs	r2, #0
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <nRF24_ReadRegisters+0x44>)
 80009ba:	f001 f8b7 	bl	8001b2c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff9c 	bl	8000900 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	4619      	mov	r1, r3
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f7ff ffad 	bl	800092c <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80009d2:	2201      	movs	r2, #1
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <nRF24_ReadRegisters+0x44>)
 80009d8:	f001 f8a8 	bl	8001b2c <HAL_GPIO_WritePin>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40020800 	.word	0x40020800

080009e8 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000a06:	2200      	movs	r2, #0
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <nRF24_WriteRegister+0x48>)
 8000a0c:	f001 f88e 	bl	8001b2c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2102      	movs	r1, #2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff72 	bl	8000900 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <nRF24_WriteRegister+0x48>)
 8000a22:	f001 f883 	bl	8001b2c <HAL_GPIO_WritePin>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800

08000a34 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f043 0320 	orr.w	r3, r3, #32
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <nRF24_WriteRegisters+0x4c>)
 8000a54:	f001 f86a 	bl	8001b2c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff4f 	bl	8000900 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6838      	ldr	r0, [r7, #0]
 8000a68:	f7ff ff4a 	bl	8000900 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <nRF24_WriteRegisters+0x4c>)
 8000a72:	f001 f85b 	bl	8001b2c <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020800 	.word	0x40020800

08000a84 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <nRF24_TX_Mode+0x4c>)
 8000a90:	f001 f84c 	bl	8001b2c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8000a94:	f000 f81e 	bl	8000ad4 <nRF24_ReadConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f818 	bl	8000ae4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000ab4:	2070      	movs	r0, #112	; 0x70
 8000ab6:	f000 f870 	bl	8000b9a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000aba:	f000 f87d 	bl	8000bb8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000abe:	f000 f895 	bl	8000bec <nRF24_FlushTX>

	nRF24_Delay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff ff0f 	bl	80008e6 <nRF24_Delay>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ff3d 	bl	8000958 <nRF24_ReadRegister>
 8000ade:	4603      	mov	r3, r0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff78 	bl	80009e8 <nRF24_WriteRegister>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000b0a:	2006      	movs	r0, #6
 8000b0c:	f7ff ff24 	bl	8000958 <nRF24_ReadRegister>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	f023 0307 	bic.w	r3, r3, #7
 8000b1a:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	b25a      	sxtb	r2, r3
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2006      	movs	r0, #6
 8000b32:	f7ff ff59 	bl	80009e8 <nRF24_WriteRegister>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f7ff ff05 	bl	8000958 <nRF24_ReadRegister>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000b58:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d104      	bne.n	8000b6a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	f043 0320 	orr.w	r3, r3, #32
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e006      	b.n	8000b78 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d103      	bne.n	8000b78 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2006      	movs	r0, #6
 8000b7e:	f7ff ff33 	bl	80009e8 <nRF24_WriteRegister>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f7ff fee2 	bl	8000958 <nRF24_ReadRegister>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	2007      	movs	r0, #7
 8000baa:	f7ff ff1d 	bl	80009e8 <nRF24_WriteRegister>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000bbe:	23e2      	movs	r3, #226	; 0xe2
 8000bc0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <nRF24_FlushRX+0x30>)
 8000bc8:	f000 ffb0 	bl	8001b2c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe95 	bl	8000900 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <nRF24_FlushRX+0x30>)
 8000bdc:	f000 ffa6 	bl	8001b2c <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020800 	.word	0x40020800

08000bec <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000bf2:	23e1      	movs	r3, #225	; 0xe1
 8000bf4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <nRF24_FlushTX+0x30>)
 8000bfc:	f000 ff96 	bl	8001b2c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	2101      	movs	r1, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe7b 	bl	8000900 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <nRF24_FlushTX+0x30>)
 8000c10:	f000 ff8c 	bl	8001b2c <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020800 	.word	0x40020800

08000c20 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000c2a:	f7ff ff53 	bl	8000ad4 <nRF24_ReadConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d004      	beq.n	8000c42 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e003      	b.n	8000c4a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f023 0308 	bic.w	r3, r3, #8
 8000c48:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff49 	bl	8000ae4 <nRF24_WriteConfig>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000c64:	f7ff ff36 	bl	8000ad4 <nRF24_ReadConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e003      	b.n	8000c84 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	f023 0304 	bic.w	r3, r3, #4
 8000c82:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff2c 	bl	8000ae4 <nRF24_WriteConfig>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2004      	movs	r0, #4
 8000cbe:	f7ff fe93 	bl	80009e8 <nRF24_WriteRegister>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2005      	movs	r0, #5
 8000ce0:	f7ff fe82 	bl	80009e8 <nRF24_WriteRegister>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d901      	bls.n	8000d06 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000d02:	2305      	movs	r3, #5
 8000d04:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	3311      	adds	r3, #17
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	4610      	mov	r0, r2
 8000d18:	f7ff fe66 	bl	80009e8 <nRF24_WriteRegister>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d901      	bls.n	8000d3e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fe0a 	bl	8000958 <nRF24_ReadRegister>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d10a      	bne.n	8000d64 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2201      	movs	r2, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e00b      	b.n	8000d7c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2201      	movs	r2, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4013      	ands	r3, r2
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2002      	movs	r0, #2
 8000d82:	f7ff fe31 	bl	80009e8 <nRF24_WriteRegister>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	460a      	mov	r2, r1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d901      	bls.n	8000da8 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000da4:	2305      	movs	r3, #5
 8000da6:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fdd5 	bl	8000958 <nRF24_ReadRegister>
 8000dae:	4603      	mov	r3, r0
 8000db0:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d10a      	bne.n	8000dce <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e00b      	b.n	8000de6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	b25a      	sxtb	r2, r3
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	4013      	ands	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	4619      	mov	r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fdfc 	bl	80009e8 <nRF24_WriteRegister>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d901      	bls.n	8000e0c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000e08:	2305      	movs	r3, #5
 8000e0a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d801      	bhi.n	8000e16 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000e12:	2303      	movs	r3, #3
 8000e14:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	3b02      	subs	r3, #2
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	2003      	movs	r0, #3
 8000e26:	f7ff fddf 	bl	80009e8 <nRF24_WriteRegister>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	6039      	str	r1, [r7, #0]
 8000e3c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <nRF24_SetRXAddress+0x18>
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d11d      	bne.n	8000e86 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e00d      	b.n	8000e6c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	441a      	add	r2, r3
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f1c3 0302 	rsb	r3, r3, #2
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	3310      	adds	r3, #16
 8000e60:	443b      	add	r3, r7
 8000e62:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d9ee      	bls.n	8000e50 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	330a      	adds	r3, #10
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f107 010c 	add.w	r1, r7, #12
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fdd8 	bl	8000a34 <nRF24_WriteRegisters>
	{
 8000e84:	e00a      	b.n	8000e9c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	330a      	adds	r3, #10
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4610      	mov	r0, r2
 8000e96:	f7ff fda7 	bl	80009e8 <nRF24_WriteRegister>
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f7ff fd73 	bl	80009a0 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e00c      	b.n	8000eda <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f1c3 0302 	rsb	r3, r3, #2
 8000ec8:	3210      	adds	r2, #16
 8000eca:	443a      	add	r2, r7
 8000ecc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8000ed0:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <nRF24_SetTXAddress+0x88>)
 8000ed2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d9ef      	bls.n	8000ec0 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e00d      	b.n	8000f02 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	441a      	add	r2, r3
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f1c3 0302 	rsb	r3, r3, #2
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	443b      	add	r3, r7
 8000ef8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	3301      	adds	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d9ee      	bls.n	8000ee6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	200a      	movs	r0, #10
 8000f12:	f7ff fd8f 	bl	8000a34 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff fd88 	bl	8000a34 <nRF24_WriteRegisters>

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000cc 	.word	0x200000cc

08000f30 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8000f36:	f7ff fe28 	bl	8000b8a <nRF24_ReadStatus>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000f44:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe26 	bl	8000b9a <nRF24_WriteStatus>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000f60:	f7ff fdb8 	bl	8000ad4 <nRF24_ReadConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e003      	b.n	8000f80 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f7e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdae 	bl	8000ae4 <nRF24_WriteConfig>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000f9a:	f7ff fd9b 	bl	8000ad4 <nRF24_ReadConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d104      	bne.n	8000fb2 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e003      	b.n	8000fba <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f023 0320 	bic.w	r3, r3, #32
 8000fb8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fd91 	bl	8000ae4 <nRF24_WriteConfig>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000fd4:	f7ff fd7e 	bl	8000ad4 <nRF24_ReadConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d104      	bne.n	8000fec <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e003      	b.n	8000ff4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f023 0310 	bic.w	r3, r3, #16
 8000ff2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fd74 	bl	8000ae4 <nRF24_WriteConfig>
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800100c:	2201      	movs	r2, #1
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	20a0      	movs	r0, #160	; 0xa0
 8001012:	f7ff fd0f 	bl	8000a34 <nRF24_WriteRegisters>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8001026:	2201      	movs	r2, #1
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <nRF24_WaitTX+0x4c>)
 800102c:	f000 fd7e 	bl	8001b2c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fc58 	bl	80008e6 <nRF24_Delay>
	NRF24_CE_LOW;
 8001036:	2200      	movs	r2, #0
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <nRF24_WaitTX+0x4c>)
 800103c:	f000 fd76 	bl	8001b2c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fc50 	bl	80008e6 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8001046:	f7ff fda0 	bl	8000b8a <nRF24_ReadStatus>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b00      	cmp	r3, #0
 8001056:	d104      	bne.n	8001062 <nRF24_WaitTX+0x42>
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0ee      	beq.n	8001040 <nRF24_WaitTX+0x20>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020400 	.word	0x40020400

08001070 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001078:	4a25      	ldr	r2, [pc, #148]	; (8001110 <nRF24_Init+0xa0>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4824      	ldr	r0, [pc, #144]	; (8001114 <nRF24_Init+0xa4>)
 8001084:	f000 fd52 	bl	8001b2c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001088:	2201      	movs	r2, #1
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	4822      	ldr	r0, [pc, #136]	; (8001118 <nRF24_Init+0xa8>)
 800108e:	f000 fd4d 	bl	8001b2c <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001092:	2005      	movs	r0, #5
 8001094:	f7ff fc27 	bl	80008e6 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001098:	2003      	movs	r0, #3
 800109a:	f7ff fd31 	bl	8000b00 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff fd4d 	bl	8000b3e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fdbb 	bl	8000c20 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fdd5 	bl	8000c5a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80010b0:	2107      	movs	r1, #7
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff fdee 	bl	8000c94 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80010b8:	2100      	movs	r1, #0
 80010ba:	201c      	movs	r0, #28
 80010bc:	f7ff fc94 	bl	80009e8 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80010c0:	200a      	movs	r0, #10
 80010c2:	f7ff fe02 	bl	8000cca <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80010c6:	2101      	movs	r1, #1
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fe0f 	bl	8000cec <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80010ce:	2101      	movs	r1, #1
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fe27 	bl	8000d24 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80010d6:	2101      	movs	r1, #1
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fe58 	bl	8000d8e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80010de:	2003      	movs	r0, #3
 80010e0:	f7ff fe8a 	bl	8000df8 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80010e4:	2014      	movs	r0, #20
 80010e6:	f7ff fbfe 	bl	80008e6 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff33 	bl	8000f56 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff4d 	bl	8000f90 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ff67 	bl	8000fca <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80010fc:	2014      	movs	r0, #20
 80010fe:	f7ff fbf2 	bl	80008e6 <nRF24_Delay>

	nRF24_ClearInterrupts();
 8001102:	f7ff ff15 	bl	8000f30 <nRF24_ClearInterrupts>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000c8 	.word	0x200000c8
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800

0800111c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_SPI2_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MX_SPI2_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI2_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI2_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI2_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI2_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_SPI2_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_SPI2_Init+0x64>)
 8001150:	2218      	movs	r2, #24
 8001152:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_SPI2_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_SPI2_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_SPI2_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_SPI2_Init+0x64>)
 800116e:	f001 f9a7 	bl	80024c0 <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001178:	f7ff fbb0 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000d0 	.word	0x200000d0
 8001184:	40003800 	.word	0x40003800

08001188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a28      	ldr	r2, [pc, #160]	; (8001248 <HAL_SPI_MspInit+0xc0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d14a      	bne.n	8001240 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_SPI_MspInit+0xc4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fe:	230c      	movs	r3, #12
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120e:	2305      	movs	r3, #5
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <HAL_SPI_MspInit+0xc8>)
 800121a:	f000 fb03 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001230:	2305      	movs	r3, #5
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <HAL_SPI_MspInit+0xcc>)
 800123c:	f000 faf2 	bl	8001824 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40003800 	.word	0x40003800
 800124c:	40023800 	.word	0x40023800
 8001250:	40020800 	.word	0x40020800
 8001254:	40020400 	.word	0x40020400

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f000 fa82 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f940 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001300:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001304:	f000 fc2c 	bl	8001b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f002 f952 	bl	80035e4 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20020000 	.word	0x20020000
 800136c:	00000400 	.word	0x00000400
 8001370:	20000128 	.word	0x20000128
 8001374:	200002c0 	.word	0x200002c0

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f001 fe1c 	bl	8003010 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f7ff fa7d 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000012c 	.word	0x2000012c
 80013ec:	40004400 	.word	0x40004400

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_UART_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12b      	bne.n	800146a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x88>)
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145a:	2307      	movs	r3, #7
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_UART_MspInit+0x8c>)
 8001466:	f000 f9dd 	bl	8001824 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40004400 	.word	0x40004400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ff65 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f002 f89f 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff f955 	bl	8000760 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014c4:	08003f5c 	.word	0x08003f5c
  ldr r2, =_sbss
 80014c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014cc:	200002bc 	.word	0x200002bc

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f94f 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fea6 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f967 	bl	800180a <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f92f 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	20000170 	.word	0x20000170

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000170 	.word	0x20000170

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff29 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff3e 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff31 	bl	8001664 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa2 	bl	800175c <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e159      	b.n	8001af4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8148 	bne.w	8001aee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a2 	beq.w	8001aee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a56      	ldr	r2, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c6:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x2ec>)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_Init+0x2f0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x202>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x1fe>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a47      	ldr	r2, [pc, #284]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x1fa>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <HAL_GPIO_Init+0x2fc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x1f6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_GPIO_Init+0x300>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x1f2>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a16:	2307      	movs	r3, #7
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a26:	2300      	movs	r3, #0
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <HAL_GPIO_Init+0x2ec>)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f aea2 	bls.w	8001840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40013c00 	.word	0x40013c00

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fdac 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e267      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b85      	ldr	r3, [pc, #532]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d112      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd2:	d10b      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4b7e      	ldr	r3, [pc, #504]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d157      	bne.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e242      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x74>
 8001bf6:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a75      	ldr	r2, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6f      	ldr	r2, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6c      	ldr	r2, [pc, #432]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c28:	4b69      	ldr	r3, [pc, #420]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a68      	ldr	r2, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a65      	ldr	r2, [pc, #404]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fcaa 	bl	80015a0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fca6 	bl	80015a0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e207      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc96 	bl	80015a0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fc92 	bl	80015a0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1f3      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0xe8>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x152>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1c7      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x244>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff fc4b 	bl	80015a0 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fc47 	bl	80015a0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1a8      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4925      	ldr	r1, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x244>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fc2a 	bl	80015a0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc26 	bl	80015a0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e187      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d036      	beq.n	8001de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x248>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fc0a 	bl	80015a0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fc06 	bl	80015a0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e167      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x240>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x200>
 8001dae:	e01b      	b.n	8001de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_OscConfig+0x248>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fbf3 	bl	80015a0 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	e00e      	b.n	8001ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fbef 	bl	80015a0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d907      	bls.n	8001ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e150      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	42470000 	.word	0x42470000
 8001dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ea      	bne.n	8001dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8097 	beq.w	8001f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b7d      	ldr	r3, [pc, #500]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a7c      	ldr	r2, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b77      	ldr	r3, [pc, #476]	; (8002004 <HAL_RCC_OscConfig+0x474>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b74      	ldr	r3, [pc, #464]	; (8002004 <HAL_RCC_OscConfig+0x474>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a73      	ldr	r2, [pc, #460]	; (8002004 <HAL_RCC_OscConfig+0x474>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fbaf 	bl	80015a0 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7ff fbab 	bl	80015a0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e10c      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x474>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2ea>
 8001e6c:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a63      	ldr	r2, [pc, #396]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	e01c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x324>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x30c>
 8001e82:	4b5f      	ldr	r3, [pc, #380]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a5e      	ldr	r2, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x324>
 8001e9c:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a57      	ldr	r2, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	4b55      	ldr	r3, [pc, #340]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001eae:	f023 0304 	bic.w	r3, r3, #4
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fb70 	bl	80015a0 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fb6c 	bl	80015a0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0cb      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ee      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x334>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fb5a 	bl	80015a0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fb56 	bl	80015a0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0b5      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ee      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80a1 	beq.w	8002070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d05c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d141      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_OscConfig+0x478>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fb2a 	bl	80015a0 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff fb26 	bl	80015a0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e087      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	491b      	ldr	r1, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x478>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff faff 	bl	80015a0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fafb 	bl	80015a0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e05c      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x416>
 8001fc4:	e054      	b.n	8002070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x478>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fae8 	bl	80015a0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fae4 	bl	80015a0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e045      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x444>
 8001ff2:	e03d      	b.n	8002070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e038      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
 8002008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x4ec>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d028      	beq.n	800206c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d121      	bne.n	800206c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d11a      	bne.n	800206c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002044:	4293      	cmp	r3, r2
 8002046:	d111      	bne.n	800206c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	3b01      	subs	r3, #1
 8002056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0cc      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d90c      	bls.n	80020bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b65      	ldr	r3, [pc, #404]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	494d      	ldr	r1, [pc, #308]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d044      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d119      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d003      	beq.n	800213e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	2b03      	cmp	r3, #3
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e067      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4934      	ldr	r1, [pc, #208]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7ff fa16 	bl	80015a0 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7ff fa12 	bl	80015a0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e04f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d20c      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e032      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4916      	ldr	r1, [pc, #88]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002206:	f000 f821 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490a      	ldr	r1, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f976 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00
 800223c:	40023800 	.word	0x40023800
 8002240:	08003f00 	.word	0x08003f00
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002250:	b094      	sub	sp, #80	; 0x50
 8002252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	647b      	str	r3, [r7, #68]	; 0x44
 8002258:	2300      	movs	r3, #0
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800225c:	2300      	movs	r3, #0
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002264:	4b79      	ldr	r3, [pc, #484]	; (800244c <HAL_RCC_GetSysClockFreq+0x200>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d00d      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x40>
 8002270:	2b08      	cmp	r3, #8
 8002272:	f200 80e1 	bhi.w	8002438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x34>
 800227a:	2b04      	cmp	r3, #4
 800227c:	d003      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x3a>
 800227e:	e0db      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_GetSysClockFreq+0x204>)
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002284:	e0db      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002286:	4b73      	ldr	r3, [pc, #460]	; (8002454 <HAL_RCC_GetSysClockFreq+0x208>)
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800228a:	e0d8      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_GetSysClockFreq+0x200>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002296:	4b6d      	ldr	r3, [pc, #436]	; (800244c <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a2:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_GetSysClockFreq+0x200>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	099b      	lsrs	r3, r3, #6
 80022a8:	2200      	movs	r2, #0
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 80022b6:	2300      	movs	r3, #0
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022be:	4622      	mov	r2, r4
 80022c0:	462b      	mov	r3, r5
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d0:	0150      	lsls	r0, r2, #5
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4621      	mov	r1, r4
 80022d8:	1a51      	subs	r1, r2, r1
 80022da:	6139      	str	r1, [r7, #16]
 80022dc:	4629      	mov	r1, r5
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022f0:	4659      	mov	r1, fp
 80022f2:	018b      	lsls	r3, r1, #6
 80022f4:	4651      	mov	r1, sl
 80022f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022fa:	4651      	mov	r1, sl
 80022fc:	018a      	lsls	r2, r1, #6
 80022fe:	4651      	mov	r1, sl
 8002300:	ebb2 0801 	subs.w	r8, r2, r1
 8002304:	4659      	mov	r1, fp
 8002306:	eb63 0901 	sbc.w	r9, r3, r1
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800231a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800231e:	4690      	mov	r8, r2
 8002320:	4699      	mov	r9, r3
 8002322:	4623      	mov	r3, r4
 8002324:	eb18 0303 	adds.w	r3, r8, r3
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	462b      	mov	r3, r5
 800232c:	eb49 0303 	adc.w	r3, r9, r3
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800233e:	4629      	mov	r1, r5
 8002340:	024b      	lsls	r3, r1, #9
 8002342:	4621      	mov	r1, r4
 8002344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002348:	4621      	mov	r1, r4
 800234a:	024a      	lsls	r2, r1, #9
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002352:	2200      	movs	r2, #0
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
 8002356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800235c:	f7fd ff90 	bl	8000280 <__aeabi_uldivmod>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4613      	mov	r3, r2
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002368:	e058      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_RCC_GetSysClockFreq+0x200>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	099b      	lsrs	r3, r3, #6
 8002370:	2200      	movs	r2, #0
 8002372:	4618      	mov	r0, r3
 8002374:	4611      	mov	r1, r2
 8002376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002384:	4642      	mov	r2, r8
 8002386:	464b      	mov	r3, r9
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	0159      	lsls	r1, r3, #5
 8002392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002396:	0150      	lsls	r0, r2, #5
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4641      	mov	r1, r8
 800239e:	ebb2 0a01 	subs.w	sl, r2, r1
 80023a2:	4649      	mov	r1, r9
 80023a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023bc:	ebb2 040a 	subs.w	r4, r2, sl
 80023c0:	eb63 050b 	sbc.w	r5, r3, fp
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	00eb      	lsls	r3, r5, #3
 80023ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d2:	00e2      	lsls	r2, r4, #3
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	4643      	mov	r3, r8
 80023da:	18e3      	adds	r3, r4, r3
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	464b      	mov	r3, r9
 80023e0:	eb45 0303 	adc.w	r3, r5, r3
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023f2:	4629      	mov	r1, r5
 80023f4:	028b      	lsls	r3, r1, #10
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023fc:	4621      	mov	r1, r4
 80023fe:	028a      	lsls	r2, r1, #10
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	2200      	movs	r2, #0
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	61fa      	str	r2, [r7, #28]
 800240c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002410:	f7fd ff36 	bl	8000280 <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4613      	mov	r3, r2
 800241a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_GetSysClockFreq+0x200>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800242c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800242e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetSysClockFreq+0x204>)
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002440:	4618      	mov	r0, r3
 8002442:	3750      	adds	r7, #80	; 0x50
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	00f42400 	.word	0x00f42400
 8002454:	007a1200 	.word	0x007a1200

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_GetHCLKFreq+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000

08002470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002474:	f7ff fff0 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0a9b      	lsrs	r3, r3, #10
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	08003f10 	.word	0x08003f10

08002498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800249c:	f7ff ffdc 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0b5b      	lsrs	r3, r3, #13
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4903      	ldr	r1, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	08003f10 	.word	0x08003f10

080024c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07b      	b.n	80025ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e2:	d009      	beq.n	80024f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
 80024ea:	e005      	b.n	80024f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fe38 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	f003 0104 	and.w	r1, r3, #4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	f003 0210 	and.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_SPI_Transmit+0x22>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e126      	b.n	8002842 <HAL_SPI_Transmit+0x270>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025fc:	f7fe ffd0 	bl	80015a0 <HAL_GetTick>
 8002600:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d002      	beq.n	8002618 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002616:	e10b      	b.n	8002830 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_SPI_Transmit+0x52>
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002628:	e102      	b.n	8002830 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2203      	movs	r2, #3
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	88fa      	ldrh	r2, [r7, #6]
 8002642:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002670:	d10f      	bne.n	8002692 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002680:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002690:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d007      	beq.n	80026b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b8:	d14b      	bne.n	8002752 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_Transmit+0xf6>
 80026c2:	8afb      	ldrh	r3, [r7, #22]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d13e      	bne.n	8002746 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	1c9a      	adds	r2, r3, #2
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026ec:	e02b      	b.n	8002746 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d112      	bne.n	8002722 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	1c9a      	adds	r2, r3, #2
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002720:	e011      	b.n	8002746 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002722:	f7fe ff3d 	bl	80015a0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d803      	bhi.n	800273a <HAL_SPI_Transmit+0x168>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d102      	bne.n	8002740 <HAL_SPI_Transmit+0x16e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002744:	e074      	b.n	8002830 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ce      	bne.n	80026ee <HAL_SPI_Transmit+0x11c>
 8002750:	e04c      	b.n	80027ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_SPI_Transmit+0x18e>
 800275a:	8afb      	ldrh	r3, [r7, #22]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d140      	bne.n	80027e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002786:	e02c      	b.n	80027e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d113      	bne.n	80027be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80027bc:	e011      	b.n	80027e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027be:	f7fe feef 	bl	80015a0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d803      	bhi.n	80027d6 <HAL_SPI_Transmit+0x204>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d102      	bne.n	80027dc <HAL_SPI_Transmit+0x20a>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027e0:	e026      	b.n	8002830 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1cd      	bne.n	8002788 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fbcb 	bl	8002f8c <SPI_EndRxTxTransaction>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e000      	b.n	8002830 <HAL_SPI_Transmit+0x25e>
  }

error:
 800282e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002840:	7ffb      	ldrb	r3, [r7, #31]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b088      	sub	sp, #32
 800284e:	af02      	add	r7, sp, #8
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002866:	d112      	bne.n	800288e <HAL_SPI_Receive+0x44>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10e      	bne.n	800288e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2204      	movs	r2, #4
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8f1 	bl	8002a6c <HAL_SPI_TransmitReceive>
 800288a:	4603      	mov	r3, r0
 800288c:	e0ea      	b.n	8002a64 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_SPI_Receive+0x52>
 8002898:	2302      	movs	r3, #2
 800289a:	e0e3      	b.n	8002a64 <HAL_SPI_Receive+0x21a>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a4:	f7fe fe7c 	bl	80015a0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d002      	beq.n	80028bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ba:	e0ca      	b.n	8002a52 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_Receive+0x7e>
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028cc:	e0c1      	b.n	8002a52 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2204      	movs	r2, #4
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d10f      	bne.n	8002936 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d007      	beq.n	8002954 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d162      	bne.n	8002a22 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800295c:	e02e      	b.n	80029bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d115      	bne.n	8002998 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f103 020c 	add.w	r2, r3, #12
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002996:	e011      	b.n	80029bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002998:	f7fe fe02 	bl	80015a0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d803      	bhi.n	80029b0 <HAL_SPI_Receive+0x166>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_Receive+0x16c>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029ba:	e04a      	b.n	8002a52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1cb      	bne.n	800295e <HAL_SPI_Receive+0x114>
 80029c6:	e031      	b.n	8002a2c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d113      	bne.n	80029fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	b292      	uxth	r2, r2
 80029e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029fc:	e011      	b.n	8002a22 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fe:	f7fe fdcf 	bl	80015a0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d803      	bhi.n	8002a16 <HAL_SPI_Receive+0x1cc>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_Receive+0x1d2>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a20:	e017      	b.n	8002a52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1cd      	bne.n	80029c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fa45 	bl	8002ec0 <SPI_EndRxTransaction>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
 8002a4e:	e000      	b.n	8002a52 <HAL_SPI_Receive+0x208>
  }

error :
 8002a50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0x26>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e18a      	b.n	8002da8 <HAL_SPI_TransmitReceive+0x33c>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9a:	f7fe fd81 	bl	80015a0 <HAL_GetTick>
 8002a9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d00f      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x70>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac2:	d107      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x68>
 8002acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d003      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ada:	e15b      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x82>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x82>
 8002ae8:	887b      	ldrh	r3, [r7, #2]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002af4:	e14e      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2205      	movs	r2, #5
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	887a      	ldrh	r2, [r7, #2]
 8002b32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d007      	beq.n	8002b5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b66:	d178      	bne.n	8002c5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x10a>
 8002b70:	8b7b      	ldrh	r3, [r7, #26]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d166      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	1c9a      	adds	r2, r3, #2
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b9a:	e053      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d11b      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x176>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d016      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x176>
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d113      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d119      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x1b8>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	b292      	uxth	r2, r2
 8002c06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	1c9a      	adds	r2, r3, #2
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c24:	f7fe fcbc 	bl	80015a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d807      	bhi.n	8002c44 <HAL_SPI_TransmitReceive+0x1d8>
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d003      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c42:	e0a7      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1a6      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x130>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1a1      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x130>
 8002c58:	e07c      	b.n	8002d54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x1fc>
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d16b      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8e:	e057      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x26c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_SPI_TransmitReceive+0x26c>
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d114      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d119      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x2ae>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d014      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d16:	2301      	movs	r3, #1
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d1a:	f7fe fc41 	bl	80015a0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d803      	bhi.n	8002d32 <HAL_SPI_TransmitReceive+0x2c6>
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d102      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x2cc>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d103      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d3e:	e029      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1a2      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x224>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d19d      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f917 	bl	8002f8c <SPI_EndRxTxTransaction>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d70:	e010      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	e000      	b.n	8002d94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002da4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3730      	adds	r7, #48	; 0x30
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc0:	f7fe fbee 	bl	80015a0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd0:	f7fe fbe6 	bl	80015a0 <HAL_GetTick>
 8002dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de6:	e054      	b.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d050      	beq.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df0:	f7fe fbd6 	bl	80015a0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d902      	bls.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d13d      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d111      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e28:	d004      	beq.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d107      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4c:	d10f      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e017      	b.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d19b      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed4:	d111      	bne.n	8002efa <SPI_EndRxTransaction+0x3a>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ede:	d004      	beq.n	8002eea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d107      	bne.n	8002efa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f02:	d12a      	bne.n	8002f5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0c:	d012      	beq.n	8002f34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff ff49 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02d      	beq.n	8002f80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e026      	b.n	8002f82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff ff36 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e013      	b.n	8002f82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2101      	movs	r1, #1
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff ff23 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <SPI_EndRxTxTransaction+0x7c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	; (800300c <SPI_EndRxTxTransaction+0x80>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0d5b      	lsrs	r3, r3, #21
 8002fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb6:	d112      	bne.n	8002fde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fef4 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d0f2      	beq.n	8002fde <SPI_EndRxTxTransaction+0x52>
 8002ff8:	e000      	b.n	8002ffc <SPI_EndRxTxTransaction+0x70>
        break;
 8002ffa:	bf00      	nop
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000
 800300c:	165e9f81 	.word	0x165e9f81

08003010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e03f      	b.n	80030a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe f9da 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f829 	bl	80030ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b0:	b0c0      	sub	sp, #256	; 0x100
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	68d9      	ldr	r1, [r3, #12]
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	ea40 0301 	orr.w	r3, r0, r1
 80030d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003104:	f021 010c 	bic.w	r1, r1, #12
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003112:	430b      	orrs	r3, r1
 8003114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	6999      	ldr	r1, [r3, #24]
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	ea40 0301 	orr.w	r3, r0, r1
 8003132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <UART_SetConfig+0x2cc>)
 800313c:	429a      	cmp	r2, r3
 800313e:	d005      	beq.n	800314c <UART_SetConfig+0xa0>
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b8d      	ldr	r3, [pc, #564]	; (800337c <UART_SetConfig+0x2d0>)
 8003148:	429a      	cmp	r2, r3
 800314a:	d104      	bne.n	8003156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800314c:	f7ff f9a4 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 8003150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003154:	e003      	b.n	800315e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003156:	f7ff f98b 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 800315a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003168:	f040 810c 	bne.w	8003384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800316c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800317a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	1891      	adds	r1, r2, r2
 8003184:	65b9      	str	r1, [r7, #88]	; 0x58
 8003186:	415b      	adcs	r3, r3
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800318e:	4621      	mov	r1, r4
 8003190:	eb12 0801 	adds.w	r8, r2, r1
 8003194:	4629      	mov	r1, r5
 8003196:	eb43 0901 	adc.w	r9, r3, r1
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ae:	4690      	mov	r8, r2
 80031b0:	4699      	mov	r9, r3
 80031b2:	4623      	mov	r3, r4
 80031b4:	eb18 0303 	adds.w	r3, r8, r3
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031bc:	462b      	mov	r3, r5
 80031be:	eb49 0303 	adc.w	r3, r9, r3
 80031c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031da:	460b      	mov	r3, r1
 80031dc:	18db      	adds	r3, r3, r3
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
 80031e0:	4613      	mov	r3, r2
 80031e2:	eb42 0303 	adc.w	r3, r2, r3
 80031e6:	657b      	str	r3, [r7, #84]	; 0x54
 80031e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031f0:	f7fd f846 	bl	8000280 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <UART_SetConfig+0x2d4>)
 80031fa:	fba3 2302 	umull	r2, r3, r3, r2
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	011c      	lsls	r4, r3, #4
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800320c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	1891      	adds	r1, r2, r2
 800321a:	64b9      	str	r1, [r7, #72]	; 0x48
 800321c:	415b      	adcs	r3, r3
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003224:	4641      	mov	r1, r8
 8003226:	eb12 0a01 	adds.w	sl, r2, r1
 800322a:	4649      	mov	r1, r9
 800322c:	eb43 0b01 	adc.w	fp, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800323c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003244:	4692      	mov	sl, r2
 8003246:	469b      	mov	fp, r3
 8003248:	4643      	mov	r3, r8
 800324a:	eb1a 0303 	adds.w	r3, sl, r3
 800324e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003252:	464b      	mov	r3, r9
 8003254:	eb4b 0303 	adc.w	r3, fp, r3
 8003258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800326c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003270:	460b      	mov	r3, r1
 8003272:	18db      	adds	r3, r3, r3
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
 8003276:	4613      	mov	r3, r2
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	647b      	str	r3, [r7, #68]	; 0x44
 800327e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003286:	f7fc fffb 	bl	8000280 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4611      	mov	r1, r2
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <UART_SetConfig+0x2d4>)
 8003292:	fba3 2301 	umull	r2, r3, r3, r1
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2264      	movs	r2, #100	; 0x64
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	1acb      	subs	r3, r1, r3
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <UART_SetConfig+0x2d4>)
 80032a8:	fba3 2302 	umull	r2, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b4:	441c      	add	r4, r3
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80032d0:	415b      	adcs	r3, r3
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032d8:	4641      	mov	r1, r8
 80032da:	1851      	adds	r1, r2, r1
 80032dc:	6339      	str	r1, [r7, #48]	; 0x30
 80032de:	4649      	mov	r1, r9
 80032e0:	414b      	adcs	r3, r1
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032f0:	4659      	mov	r1, fp
 80032f2:	00cb      	lsls	r3, r1, #3
 80032f4:	4651      	mov	r1, sl
 80032f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fa:	4651      	mov	r1, sl
 80032fc:	00ca      	lsls	r2, r1, #3
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	4603      	mov	r3, r0
 8003304:	4642      	mov	r2, r8
 8003306:	189b      	adds	r3, r3, r2
 8003308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800330c:	464b      	mov	r3, r9
 800330e:	460a      	mov	r2, r1
 8003310:	eb42 0303 	adc.w	r3, r2, r3
 8003314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800332c:	460b      	mov	r3, r1
 800332e:	18db      	adds	r3, r3, r3
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
 8003332:	4613      	mov	r3, r2
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800333e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003342:	f7fc ff9d 	bl	8000280 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <UART_SetConfig+0x2d4>)
 800334c:	fba3 1302 	umull	r1, r3, r3, r2
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	3332      	adds	r3, #50	; 0x32
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <UART_SetConfig+0x2d4>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	f003 0207 	and.w	r2, r3, #7
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4422      	add	r2, r4
 8003372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003374:	e106      	b.n	8003584 <UART_SetConfig+0x4d8>
 8003376:	bf00      	nop
 8003378:	40011000 	.word	0x40011000
 800337c:	40011400 	.word	0x40011400
 8003380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800338e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003396:	4642      	mov	r2, r8
 8003398:	464b      	mov	r3, r9
 800339a:	1891      	adds	r1, r2, r2
 800339c:	6239      	str	r1, [r7, #32]
 800339e:	415b      	adcs	r3, r3
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033a6:	4641      	mov	r1, r8
 80033a8:	1854      	adds	r4, r2, r1
 80033aa:	4649      	mov	r1, r9
 80033ac:	eb43 0501 	adc.w	r5, r3, r1
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	00eb      	lsls	r3, r5, #3
 80033ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	4643      	mov	r3, r8
 80033c6:	18e3      	adds	r3, r4, r3
 80033c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033cc:	464b      	mov	r3, r9
 80033ce:	eb45 0303 	adc.w	r3, r5, r3
 80033d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033f2:	4629      	mov	r1, r5
 80033f4:	008b      	lsls	r3, r1, #2
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fc:	4621      	mov	r1, r4
 80033fe:	008a      	lsls	r2, r1, #2
 8003400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003404:	f7fc ff3c 	bl	8000280 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4b60      	ldr	r3, [pc, #384]	; (8003590 <UART_SetConfig+0x4e4>)
 800340e:	fba3 2302 	umull	r2, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	011c      	lsls	r4, r3, #4
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	61b9      	str	r1, [r7, #24]
 8003430:	415b      	adcs	r3, r3
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6139      	str	r1, [r7, #16]
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800346c:	464b      	mov	r3, r9
 800346e:	460a      	mov	r2, r1
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	67bb      	str	r3, [r7, #120]	; 0x78
 8003482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003490:	4649      	mov	r1, r9
 8003492:	008b      	lsls	r3, r1, #2
 8003494:	4641      	mov	r1, r8
 8003496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800349a:	4641      	mov	r1, r8
 800349c:	008a      	lsls	r2, r1, #2
 800349e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034a2:	f7fc feed 	bl	8000280 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <UART_SetConfig+0x4e4>)
 80034ae:	fba3 2301 	umull	r2, r3, r3, r1
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2264      	movs	r2, #100	; 0x64
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	1acb      	subs	r3, r1, r3
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	3332      	adds	r3, #50	; 0x32
 80034c0:	4a33      	ldr	r2, [pc, #204]	; (8003590 <UART_SetConfig+0x4e4>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034cc:	441c      	add	r4, r3
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	673b      	str	r3, [r7, #112]	; 0x70
 80034d6:	677a      	str	r2, [r7, #116]	; 0x74
 80034d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	415b      	adcs	r3, r3
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	66bb      	str	r3, [r7, #104]	; 0x68
 800351e:	464b      	mov	r3, r9
 8003520:	460a      	mov	r2, r1
 8003522:	eb42 0303 	adc.w	r3, r2, r3
 8003526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	663b      	str	r3, [r7, #96]	; 0x60
 8003532:	667a      	str	r2, [r7, #100]	; 0x64
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003540:	4649      	mov	r1, r9
 8003542:	008b      	lsls	r3, r1, #2
 8003544:	4641      	mov	r1, r8
 8003546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354a:	4641      	mov	r1, r8
 800354c:	008a      	lsls	r2, r1, #2
 800354e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003552:	f7fc fe95 	bl	8000280 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <UART_SetConfig+0x4e4>)
 800355c:	fba3 1302 	umull	r1, r3, r3, r2
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	2164      	movs	r1, #100	; 0x64
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	3332      	adds	r3, #50	; 0x32
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <UART_SetConfig+0x4e4>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	f003 020f 	and.w	r2, r3, #15
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4422      	add	r2, r4
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800358a:	46bd      	mov	sp, r7
 800358c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003590:	51eb851f 	.word	0x51eb851f

08003594 <siprintf>:
 8003594:	b40e      	push	{r1, r2, r3}
 8003596:	b500      	push	{lr}
 8003598:	b09c      	sub	sp, #112	; 0x70
 800359a:	ab1d      	add	r3, sp, #116	; 0x74
 800359c:	9002      	str	r0, [sp, #8]
 800359e:	9006      	str	r0, [sp, #24]
 80035a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035a4:	4809      	ldr	r0, [pc, #36]	; (80035cc <siprintf+0x38>)
 80035a6:	9107      	str	r1, [sp, #28]
 80035a8:	9104      	str	r1, [sp, #16]
 80035aa:	4909      	ldr	r1, [pc, #36]	; (80035d0 <siprintf+0x3c>)
 80035ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80035b0:	9105      	str	r1, [sp, #20]
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	a902      	add	r1, sp, #8
 80035b8:	f000 f992 	bl	80038e0 <_svfiprintf_r>
 80035bc:	9b02      	ldr	r3, [sp, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	b01c      	add	sp, #112	; 0x70
 80035c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035c8:	b003      	add	sp, #12
 80035ca:	4770      	bx	lr
 80035cc:	20000058 	.word	0x20000058
 80035d0:	ffff0208 	.word	0xffff0208

080035d4 <memset>:
 80035d4:	4402      	add	r2, r0
 80035d6:	4603      	mov	r3, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <__errno>:
 80035e4:	4b01      	ldr	r3, [pc, #4]	; (80035ec <__errno+0x8>)
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000058 	.word	0x20000058

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4d0d      	ldr	r5, [pc, #52]	; (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2600      	movs	r6, #0
 80035fc:	42a6      	cmp	r6, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4d0b      	ldr	r5, [pc, #44]	; (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <__libc_init_array+0x44>)
 8003604:	f000 fc6a 	bl	8003edc <_init>
 8003608:	1b64      	subs	r4, r4, r5
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2600      	movs	r6, #0
 800360e:	42a6      	cmp	r6, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f855 3b04 	ldr.w	r3, [r5], #4
 8003618:	4798      	blx	r3
 800361a:	3601      	adds	r6, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003622:	4798      	blx	r3
 8003624:	3601      	adds	r6, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08003f54 	.word	0x08003f54
 800362c:	08003f54 	.word	0x08003f54
 8003630:	08003f54 	.word	0x08003f54
 8003634:	08003f58 	.word	0x08003f58

08003638 <__retarget_lock_acquire_recursive>:
 8003638:	4770      	bx	lr

0800363a <__retarget_lock_release_recursive>:
 800363a:	4770      	bx	lr

0800363c <_free_r>:
 800363c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800363e:	2900      	cmp	r1, #0
 8003640:	d044      	beq.n	80036cc <_free_r+0x90>
 8003642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003646:	9001      	str	r0, [sp, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f1a1 0404 	sub.w	r4, r1, #4
 800364e:	bfb8      	it	lt
 8003650:	18e4      	addlt	r4, r4, r3
 8003652:	f000 f8df 	bl	8003814 <__malloc_lock>
 8003656:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <_free_r+0x94>)
 8003658:	9801      	ldr	r0, [sp, #4]
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	b933      	cbnz	r3, 800366c <_free_r+0x30>
 800365e:	6063      	str	r3, [r4, #4]
 8003660:	6014      	str	r4, [r2, #0]
 8003662:	b003      	add	sp, #12
 8003664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003668:	f000 b8da 	b.w	8003820 <__malloc_unlock>
 800366c:	42a3      	cmp	r3, r4
 800366e:	d908      	bls.n	8003682 <_free_r+0x46>
 8003670:	6825      	ldr	r5, [r4, #0]
 8003672:	1961      	adds	r1, r4, r5
 8003674:	428b      	cmp	r3, r1
 8003676:	bf01      	itttt	eq
 8003678:	6819      	ldreq	r1, [r3, #0]
 800367a:	685b      	ldreq	r3, [r3, #4]
 800367c:	1949      	addeq	r1, r1, r5
 800367e:	6021      	streq	r1, [r4, #0]
 8003680:	e7ed      	b.n	800365e <_free_r+0x22>
 8003682:	461a      	mov	r2, r3
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	b10b      	cbz	r3, 800368c <_free_r+0x50>
 8003688:	42a3      	cmp	r3, r4
 800368a:	d9fa      	bls.n	8003682 <_free_r+0x46>
 800368c:	6811      	ldr	r1, [r2, #0]
 800368e:	1855      	adds	r5, r2, r1
 8003690:	42a5      	cmp	r5, r4
 8003692:	d10b      	bne.n	80036ac <_free_r+0x70>
 8003694:	6824      	ldr	r4, [r4, #0]
 8003696:	4421      	add	r1, r4
 8003698:	1854      	adds	r4, r2, r1
 800369a:	42a3      	cmp	r3, r4
 800369c:	6011      	str	r1, [r2, #0]
 800369e:	d1e0      	bne.n	8003662 <_free_r+0x26>
 80036a0:	681c      	ldr	r4, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	6053      	str	r3, [r2, #4]
 80036a6:	440c      	add	r4, r1
 80036a8:	6014      	str	r4, [r2, #0]
 80036aa:	e7da      	b.n	8003662 <_free_r+0x26>
 80036ac:	d902      	bls.n	80036b4 <_free_r+0x78>
 80036ae:	230c      	movs	r3, #12
 80036b0:	6003      	str	r3, [r0, #0]
 80036b2:	e7d6      	b.n	8003662 <_free_r+0x26>
 80036b4:	6825      	ldr	r5, [r4, #0]
 80036b6:	1961      	adds	r1, r4, r5
 80036b8:	428b      	cmp	r3, r1
 80036ba:	bf04      	itt	eq
 80036bc:	6819      	ldreq	r1, [r3, #0]
 80036be:	685b      	ldreq	r3, [r3, #4]
 80036c0:	6063      	str	r3, [r4, #4]
 80036c2:	bf04      	itt	eq
 80036c4:	1949      	addeq	r1, r1, r5
 80036c6:	6021      	streq	r1, [r4, #0]
 80036c8:	6054      	str	r4, [r2, #4]
 80036ca:	e7ca      	b.n	8003662 <_free_r+0x26>
 80036cc:	b003      	add	sp, #12
 80036ce:	bd30      	pop	{r4, r5, pc}
 80036d0:	200002b4 	.word	0x200002b4

080036d4 <sbrk_aligned>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	4e0e      	ldr	r6, [pc, #56]	; (8003710 <sbrk_aligned+0x3c>)
 80036d8:	460c      	mov	r4, r1
 80036da:	6831      	ldr	r1, [r6, #0]
 80036dc:	4605      	mov	r5, r0
 80036de:	b911      	cbnz	r1, 80036e6 <sbrk_aligned+0x12>
 80036e0:	f000 fba6 	bl	8003e30 <_sbrk_r>
 80036e4:	6030      	str	r0, [r6, #0]
 80036e6:	4621      	mov	r1, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	f000 fba1 	bl	8003e30 <_sbrk_r>
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	d00a      	beq.n	8003708 <sbrk_aligned+0x34>
 80036f2:	1cc4      	adds	r4, r0, #3
 80036f4:	f024 0403 	bic.w	r4, r4, #3
 80036f8:	42a0      	cmp	r0, r4
 80036fa:	d007      	beq.n	800370c <sbrk_aligned+0x38>
 80036fc:	1a21      	subs	r1, r4, r0
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 fb96 	bl	8003e30 <_sbrk_r>
 8003704:	3001      	adds	r0, #1
 8003706:	d101      	bne.n	800370c <sbrk_aligned+0x38>
 8003708:	f04f 34ff 	mov.w	r4, #4294967295
 800370c:	4620      	mov	r0, r4
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	200002b8 	.word	0x200002b8

08003714 <_malloc_r>:
 8003714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003718:	1ccd      	adds	r5, r1, #3
 800371a:	f025 0503 	bic.w	r5, r5, #3
 800371e:	3508      	adds	r5, #8
 8003720:	2d0c      	cmp	r5, #12
 8003722:	bf38      	it	cc
 8003724:	250c      	movcc	r5, #12
 8003726:	2d00      	cmp	r5, #0
 8003728:	4607      	mov	r7, r0
 800372a:	db01      	blt.n	8003730 <_malloc_r+0x1c>
 800372c:	42a9      	cmp	r1, r5
 800372e:	d905      	bls.n	800373c <_malloc_r+0x28>
 8003730:	230c      	movs	r3, #12
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	2600      	movs	r6, #0
 8003736:	4630      	mov	r0, r6
 8003738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800373c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003810 <_malloc_r+0xfc>
 8003740:	f000 f868 	bl	8003814 <__malloc_lock>
 8003744:	f8d8 3000 	ldr.w	r3, [r8]
 8003748:	461c      	mov	r4, r3
 800374a:	bb5c      	cbnz	r4, 80037a4 <_malloc_r+0x90>
 800374c:	4629      	mov	r1, r5
 800374e:	4638      	mov	r0, r7
 8003750:	f7ff ffc0 	bl	80036d4 <sbrk_aligned>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	4604      	mov	r4, r0
 8003758:	d155      	bne.n	8003806 <_malloc_r+0xf2>
 800375a:	f8d8 4000 	ldr.w	r4, [r8]
 800375e:	4626      	mov	r6, r4
 8003760:	2e00      	cmp	r6, #0
 8003762:	d145      	bne.n	80037f0 <_malloc_r+0xdc>
 8003764:	2c00      	cmp	r4, #0
 8003766:	d048      	beq.n	80037fa <_malloc_r+0xe6>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	4631      	mov	r1, r6
 800376c:	4638      	mov	r0, r7
 800376e:	eb04 0903 	add.w	r9, r4, r3
 8003772:	f000 fb5d 	bl	8003e30 <_sbrk_r>
 8003776:	4581      	cmp	r9, r0
 8003778:	d13f      	bne.n	80037fa <_malloc_r+0xe6>
 800377a:	6821      	ldr	r1, [r4, #0]
 800377c:	1a6d      	subs	r5, r5, r1
 800377e:	4629      	mov	r1, r5
 8003780:	4638      	mov	r0, r7
 8003782:	f7ff ffa7 	bl	80036d4 <sbrk_aligned>
 8003786:	3001      	adds	r0, #1
 8003788:	d037      	beq.n	80037fa <_malloc_r+0xe6>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	442b      	add	r3, r5
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	f8d8 3000 	ldr.w	r3, [r8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d038      	beq.n	800380a <_malloc_r+0xf6>
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	42a2      	cmp	r2, r4
 800379c:	d12b      	bne.n	80037f6 <_malloc_r+0xe2>
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e00f      	b.n	80037c4 <_malloc_r+0xb0>
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	1b52      	subs	r2, r2, r5
 80037a8:	d41f      	bmi.n	80037ea <_malloc_r+0xd6>
 80037aa:	2a0b      	cmp	r2, #11
 80037ac:	d917      	bls.n	80037de <_malloc_r+0xca>
 80037ae:	1961      	adds	r1, r4, r5
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	6025      	str	r5, [r4, #0]
 80037b4:	bf18      	it	ne
 80037b6:	6059      	strne	r1, [r3, #4]
 80037b8:	6863      	ldr	r3, [r4, #4]
 80037ba:	bf08      	it	eq
 80037bc:	f8c8 1000 	streq.w	r1, [r8]
 80037c0:	5162      	str	r2, [r4, r5]
 80037c2:	604b      	str	r3, [r1, #4]
 80037c4:	4638      	mov	r0, r7
 80037c6:	f104 060b 	add.w	r6, r4, #11
 80037ca:	f000 f829 	bl	8003820 <__malloc_unlock>
 80037ce:	f026 0607 	bic.w	r6, r6, #7
 80037d2:	1d23      	adds	r3, r4, #4
 80037d4:	1af2      	subs	r2, r6, r3
 80037d6:	d0ae      	beq.n	8003736 <_malloc_r+0x22>
 80037d8:	1b9b      	subs	r3, r3, r6
 80037da:	50a3      	str	r3, [r4, r2]
 80037dc:	e7ab      	b.n	8003736 <_malloc_r+0x22>
 80037de:	42a3      	cmp	r3, r4
 80037e0:	6862      	ldr	r2, [r4, #4]
 80037e2:	d1dd      	bne.n	80037a0 <_malloc_r+0x8c>
 80037e4:	f8c8 2000 	str.w	r2, [r8]
 80037e8:	e7ec      	b.n	80037c4 <_malloc_r+0xb0>
 80037ea:	4623      	mov	r3, r4
 80037ec:	6864      	ldr	r4, [r4, #4]
 80037ee:	e7ac      	b.n	800374a <_malloc_r+0x36>
 80037f0:	4634      	mov	r4, r6
 80037f2:	6876      	ldr	r6, [r6, #4]
 80037f4:	e7b4      	b.n	8003760 <_malloc_r+0x4c>
 80037f6:	4613      	mov	r3, r2
 80037f8:	e7cc      	b.n	8003794 <_malloc_r+0x80>
 80037fa:	230c      	movs	r3, #12
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4638      	mov	r0, r7
 8003800:	f000 f80e 	bl	8003820 <__malloc_unlock>
 8003804:	e797      	b.n	8003736 <_malloc_r+0x22>
 8003806:	6025      	str	r5, [r4, #0]
 8003808:	e7dc      	b.n	80037c4 <_malloc_r+0xb0>
 800380a:	605b      	str	r3, [r3, #4]
 800380c:	deff      	udf	#255	; 0xff
 800380e:	bf00      	nop
 8003810:	200002b4 	.word	0x200002b4

08003814 <__malloc_lock>:
 8003814:	4801      	ldr	r0, [pc, #4]	; (800381c <__malloc_lock+0x8>)
 8003816:	f7ff bf0f 	b.w	8003638 <__retarget_lock_acquire_recursive>
 800381a:	bf00      	nop
 800381c:	200002b0 	.word	0x200002b0

08003820 <__malloc_unlock>:
 8003820:	4801      	ldr	r0, [pc, #4]	; (8003828 <__malloc_unlock+0x8>)
 8003822:	f7ff bf0a 	b.w	800363a <__retarget_lock_release_recursive>
 8003826:	bf00      	nop
 8003828:	200002b0 	.word	0x200002b0

0800382c <__ssputs_r>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	688e      	ldr	r6, [r1, #8]
 8003832:	461f      	mov	r7, r3
 8003834:	42be      	cmp	r6, r7
 8003836:	680b      	ldr	r3, [r1, #0]
 8003838:	4682      	mov	sl, r0
 800383a:	460c      	mov	r4, r1
 800383c:	4690      	mov	r8, r2
 800383e:	d82c      	bhi.n	800389a <__ssputs_r+0x6e>
 8003840:	898a      	ldrh	r2, [r1, #12]
 8003842:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003846:	d026      	beq.n	8003896 <__ssputs_r+0x6a>
 8003848:	6965      	ldr	r5, [r4, #20]
 800384a:	6909      	ldr	r1, [r1, #16]
 800384c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003850:	eba3 0901 	sub.w	r9, r3, r1
 8003854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003858:	1c7b      	adds	r3, r7, #1
 800385a:	444b      	add	r3, r9
 800385c:	106d      	asrs	r5, r5, #1
 800385e:	429d      	cmp	r5, r3
 8003860:	bf38      	it	cc
 8003862:	461d      	movcc	r5, r3
 8003864:	0553      	lsls	r3, r2, #21
 8003866:	d527      	bpl.n	80038b8 <__ssputs_r+0x8c>
 8003868:	4629      	mov	r1, r5
 800386a:	f7ff ff53 	bl	8003714 <_malloc_r>
 800386e:	4606      	mov	r6, r0
 8003870:	b360      	cbz	r0, 80038cc <__ssputs_r+0xa0>
 8003872:	6921      	ldr	r1, [r4, #16]
 8003874:	464a      	mov	r2, r9
 8003876:	f000 faeb 	bl	8003e50 <memcpy>
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	6126      	str	r6, [r4, #16]
 8003888:	6165      	str	r5, [r4, #20]
 800388a:	444e      	add	r6, r9
 800388c:	eba5 0509 	sub.w	r5, r5, r9
 8003890:	6026      	str	r6, [r4, #0]
 8003892:	60a5      	str	r5, [r4, #8]
 8003894:	463e      	mov	r6, r7
 8003896:	42be      	cmp	r6, r7
 8003898:	d900      	bls.n	800389c <__ssputs_r+0x70>
 800389a:	463e      	mov	r6, r7
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	4632      	mov	r2, r6
 80038a0:	4641      	mov	r1, r8
 80038a2:	f000 faab 	bl	8003dfc <memmove>
 80038a6:	68a3      	ldr	r3, [r4, #8]
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	60a3      	str	r3, [r4, #8]
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	4433      	add	r3, r6
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	2000      	movs	r0, #0
 80038b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b8:	462a      	mov	r2, r5
 80038ba:	f000 fad7 	bl	8003e6c <_realloc_r>
 80038be:	4606      	mov	r6, r0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d1e0      	bne.n	8003886 <__ssputs_r+0x5a>
 80038c4:	6921      	ldr	r1, [r4, #16]
 80038c6:	4650      	mov	r0, sl
 80038c8:	f7ff feb8 	bl	800363c <_free_r>
 80038cc:	230c      	movs	r3, #12
 80038ce:	f8ca 3000 	str.w	r3, [sl]
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	f04f 30ff 	mov.w	r0, #4294967295
 80038de:	e7e9      	b.n	80038b4 <__ssputs_r+0x88>

080038e0 <_svfiprintf_r>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4698      	mov	r8, r3
 80038e6:	898b      	ldrh	r3, [r1, #12]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	b09d      	sub	sp, #116	; 0x74
 80038ec:	4607      	mov	r7, r0
 80038ee:	460d      	mov	r5, r1
 80038f0:	4614      	mov	r4, r2
 80038f2:	d50e      	bpl.n	8003912 <_svfiprintf_r+0x32>
 80038f4:	690b      	ldr	r3, [r1, #16]
 80038f6:	b963      	cbnz	r3, 8003912 <_svfiprintf_r+0x32>
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	f7ff ff0b 	bl	8003714 <_malloc_r>
 80038fe:	6028      	str	r0, [r5, #0]
 8003900:	6128      	str	r0, [r5, #16]
 8003902:	b920      	cbnz	r0, 800390e <_svfiprintf_r+0x2e>
 8003904:	230c      	movs	r3, #12
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	e0d0      	b.n	8003ab0 <_svfiprintf_r+0x1d0>
 800390e:	2340      	movs	r3, #64	; 0x40
 8003910:	616b      	str	r3, [r5, #20]
 8003912:	2300      	movs	r3, #0
 8003914:	9309      	str	r3, [sp, #36]	; 0x24
 8003916:	2320      	movs	r3, #32
 8003918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800391c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003920:	2330      	movs	r3, #48	; 0x30
 8003922:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ac8 <_svfiprintf_r+0x1e8>
 8003926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800392a:	f04f 0901 	mov.w	r9, #1
 800392e:	4623      	mov	r3, r4
 8003930:	469a      	mov	sl, r3
 8003932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003936:	b10a      	cbz	r2, 800393c <_svfiprintf_r+0x5c>
 8003938:	2a25      	cmp	r2, #37	; 0x25
 800393a:	d1f9      	bne.n	8003930 <_svfiprintf_r+0x50>
 800393c:	ebba 0b04 	subs.w	fp, sl, r4
 8003940:	d00b      	beq.n	800395a <_svfiprintf_r+0x7a>
 8003942:	465b      	mov	r3, fp
 8003944:	4622      	mov	r2, r4
 8003946:	4629      	mov	r1, r5
 8003948:	4638      	mov	r0, r7
 800394a:	f7ff ff6f 	bl	800382c <__ssputs_r>
 800394e:	3001      	adds	r0, #1
 8003950:	f000 80a9 	beq.w	8003aa6 <_svfiprintf_r+0x1c6>
 8003954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003956:	445a      	add	r2, fp
 8003958:	9209      	str	r2, [sp, #36]	; 0x24
 800395a:	f89a 3000 	ldrb.w	r3, [sl]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a1 	beq.w	8003aa6 <_svfiprintf_r+0x1c6>
 8003964:	2300      	movs	r3, #0
 8003966:	f04f 32ff 	mov.w	r2, #4294967295
 800396a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800396e:	f10a 0a01 	add.w	sl, sl, #1
 8003972:	9304      	str	r3, [sp, #16]
 8003974:	9307      	str	r3, [sp, #28]
 8003976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800397a:	931a      	str	r3, [sp, #104]	; 0x68
 800397c:	4654      	mov	r4, sl
 800397e:	2205      	movs	r2, #5
 8003980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003984:	4850      	ldr	r0, [pc, #320]	; (8003ac8 <_svfiprintf_r+0x1e8>)
 8003986:	f7fc fc2b 	bl	80001e0 <memchr>
 800398a:	9a04      	ldr	r2, [sp, #16]
 800398c:	b9d8      	cbnz	r0, 80039c6 <_svfiprintf_r+0xe6>
 800398e:	06d0      	lsls	r0, r2, #27
 8003990:	bf44      	itt	mi
 8003992:	2320      	movmi	r3, #32
 8003994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003998:	0711      	lsls	r1, r2, #28
 800399a:	bf44      	itt	mi
 800399c:	232b      	movmi	r3, #43	; 0x2b
 800399e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a2:	f89a 3000 	ldrb.w	r3, [sl]
 80039a6:	2b2a      	cmp	r3, #42	; 0x2a
 80039a8:	d015      	beq.n	80039d6 <_svfiprintf_r+0xf6>
 80039aa:	9a07      	ldr	r2, [sp, #28]
 80039ac:	4654      	mov	r4, sl
 80039ae:	2000      	movs	r0, #0
 80039b0:	f04f 0c0a 	mov.w	ip, #10
 80039b4:	4621      	mov	r1, r4
 80039b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ba:	3b30      	subs	r3, #48	; 0x30
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d94d      	bls.n	8003a5c <_svfiprintf_r+0x17c>
 80039c0:	b1b0      	cbz	r0, 80039f0 <_svfiprintf_r+0x110>
 80039c2:	9207      	str	r2, [sp, #28]
 80039c4:	e014      	b.n	80039f0 <_svfiprintf_r+0x110>
 80039c6:	eba0 0308 	sub.w	r3, r0, r8
 80039ca:	fa09 f303 	lsl.w	r3, r9, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	9304      	str	r3, [sp, #16]
 80039d2:	46a2      	mov	sl, r4
 80039d4:	e7d2      	b.n	800397c <_svfiprintf_r+0x9c>
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	1d19      	adds	r1, r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	9103      	str	r1, [sp, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bfbb      	ittet	lt
 80039e2:	425b      	neglt	r3, r3
 80039e4:	f042 0202 	orrlt.w	r2, r2, #2
 80039e8:	9307      	strge	r3, [sp, #28]
 80039ea:	9307      	strlt	r3, [sp, #28]
 80039ec:	bfb8      	it	lt
 80039ee:	9204      	strlt	r2, [sp, #16]
 80039f0:	7823      	ldrb	r3, [r4, #0]
 80039f2:	2b2e      	cmp	r3, #46	; 0x2e
 80039f4:	d10c      	bne.n	8003a10 <_svfiprintf_r+0x130>
 80039f6:	7863      	ldrb	r3, [r4, #1]
 80039f8:	2b2a      	cmp	r3, #42	; 0x2a
 80039fa:	d134      	bne.n	8003a66 <_svfiprintf_r+0x186>
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	1d1a      	adds	r2, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	9203      	str	r2, [sp, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bfb8      	it	lt
 8003a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a0c:	3402      	adds	r4, #2
 8003a0e:	9305      	str	r3, [sp, #20]
 8003a10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ad8 <_svfiprintf_r+0x1f8>
 8003a14:	7821      	ldrb	r1, [r4, #0]
 8003a16:	2203      	movs	r2, #3
 8003a18:	4650      	mov	r0, sl
 8003a1a:	f7fc fbe1 	bl	80001e0 <memchr>
 8003a1e:	b138      	cbz	r0, 8003a30 <_svfiprintf_r+0x150>
 8003a20:	9b04      	ldr	r3, [sp, #16]
 8003a22:	eba0 000a 	sub.w	r0, r0, sl
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	4082      	lsls	r2, r0
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	3401      	adds	r4, #1
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a34:	4825      	ldr	r0, [pc, #148]	; (8003acc <_svfiprintf_r+0x1ec>)
 8003a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a3a:	2206      	movs	r2, #6
 8003a3c:	f7fc fbd0 	bl	80001e0 <memchr>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d038      	beq.n	8003ab6 <_svfiprintf_r+0x1d6>
 8003a44:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <_svfiprintf_r+0x1f0>)
 8003a46:	bb1b      	cbnz	r3, 8003a90 <_svfiprintf_r+0x1b0>
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	f023 0307 	bic.w	r3, r3, #7
 8003a50:	3308      	adds	r3, #8
 8003a52:	9303      	str	r3, [sp, #12]
 8003a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a56:	4433      	add	r3, r6
 8003a58:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5a:	e768      	b.n	800392e <_svfiprintf_r+0x4e>
 8003a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a60:	460c      	mov	r4, r1
 8003a62:	2001      	movs	r0, #1
 8003a64:	e7a6      	b.n	80039b4 <_svfiprintf_r+0xd4>
 8003a66:	2300      	movs	r3, #0
 8003a68:	3401      	adds	r4, #1
 8003a6a:	9305      	str	r3, [sp, #20]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 0c0a 	mov.w	ip, #10
 8003a72:	4620      	mov	r0, r4
 8003a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a78:	3a30      	subs	r2, #48	; 0x30
 8003a7a:	2a09      	cmp	r2, #9
 8003a7c:	d903      	bls.n	8003a86 <_svfiprintf_r+0x1a6>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0c6      	beq.n	8003a10 <_svfiprintf_r+0x130>
 8003a82:	9105      	str	r1, [sp, #20]
 8003a84:	e7c4      	b.n	8003a10 <_svfiprintf_r+0x130>
 8003a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e7f0      	b.n	8003a72 <_svfiprintf_r+0x192>
 8003a90:	ab03      	add	r3, sp, #12
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	462a      	mov	r2, r5
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <_svfiprintf_r+0x1f4>)
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f3af 8000 	nop.w
 8003aa0:	1c42      	adds	r2, r0, #1
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	d1d6      	bne.n	8003a54 <_svfiprintf_r+0x174>
 8003aa6:	89ab      	ldrh	r3, [r5, #12]
 8003aa8:	065b      	lsls	r3, r3, #25
 8003aaa:	f53f af2d 	bmi.w	8003908 <_svfiprintf_r+0x28>
 8003aae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab0:	b01d      	add	sp, #116	; 0x74
 8003ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab6:	ab03      	add	r3, sp, #12
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	462a      	mov	r2, r5
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <_svfiprintf_r+0x1f4>)
 8003abe:	a904      	add	r1, sp, #16
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f000 f879 	bl	8003bb8 <_printf_i>
 8003ac6:	e7eb      	b.n	8003aa0 <_svfiprintf_r+0x1c0>
 8003ac8:	08003f18 	.word	0x08003f18
 8003acc:	08003f22 	.word	0x08003f22
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	0800382d 	.word	0x0800382d
 8003ad8:	08003f1e 	.word	0x08003f1e

08003adc <_printf_common>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	4616      	mov	r6, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	688a      	ldr	r2, [r1, #8]
 8003ae6:	690b      	ldr	r3, [r1, #16]
 8003ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bfb8      	it	lt
 8003af0:	4613      	movlt	r3, r2
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af8:	4607      	mov	r7, r0
 8003afa:	460c      	mov	r4, r1
 8003afc:	b10a      	cbz	r2, 8003b02 <_printf_common+0x26>
 8003afe:	3301      	adds	r3, #1
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	0699      	lsls	r1, r3, #26
 8003b06:	bf42      	ittt	mi
 8003b08:	6833      	ldrmi	r3, [r6, #0]
 8003b0a:	3302      	addmi	r3, #2
 8003b0c:	6033      	strmi	r3, [r6, #0]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	f015 0506 	ands.w	r5, r5, #6
 8003b14:	d106      	bne.n	8003b24 <_printf_common+0x48>
 8003b16:	f104 0a19 	add.w	sl, r4, #25
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	6832      	ldr	r2, [r6, #0]
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dc26      	bgt.n	8003b72 <_printf_common+0x96>
 8003b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b28:	1e13      	subs	r3, r2, #0
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	bf18      	it	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	0692      	lsls	r2, r2, #26
 8003b32:	d42b      	bmi.n	8003b8c <_printf_common+0xb0>
 8003b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d01e      	beq.n	8003b80 <_printf_common+0xa4>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	f003 0306 	and.w	r3, r3, #6
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	bf02      	ittt	eq
 8003b4e:	68e5      	ldreq	r5, [r4, #12]
 8003b50:	6833      	ldreq	r3, [r6, #0]
 8003b52:	1aed      	subeq	r5, r5, r3
 8003b54:	68a3      	ldr	r3, [r4, #8]
 8003b56:	bf0c      	ite	eq
 8003b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b5c:	2500      	movne	r5, #0
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bfc4      	itt	gt
 8003b62:	1a9b      	subgt	r3, r3, r2
 8003b64:	18ed      	addgt	r5, r5, r3
 8003b66:	2600      	movs	r6, #0
 8003b68:	341a      	adds	r4, #26
 8003b6a:	42b5      	cmp	r5, r6
 8003b6c:	d11a      	bne.n	8003ba4 <_printf_common+0xc8>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e008      	b.n	8003b84 <_printf_common+0xa8>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4652      	mov	r2, sl
 8003b76:	4649      	mov	r1, r9
 8003b78:	4638      	mov	r0, r7
 8003b7a:	47c0      	blx	r8
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d103      	bne.n	8003b88 <_printf_common+0xac>
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	3501      	adds	r5, #1
 8003b8a:	e7c6      	b.n	8003b1a <_printf_common+0x3e>
 8003b8c:	18e1      	adds	r1, r4, r3
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	2030      	movs	r0, #48	; 0x30
 8003b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b96:	4422      	add	r2, r4
 8003b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	e7c7      	b.n	8003b34 <_printf_common+0x58>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4638      	mov	r0, r7
 8003bac:	47c0      	blx	r8
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d0e6      	beq.n	8003b80 <_printf_common+0xa4>
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7d9      	b.n	8003b6a <_printf_common+0x8e>
	...

08003bb8 <_printf_i>:
 8003bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	7e0f      	ldrb	r7, [r1, #24]
 8003bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc0:	2f78      	cmp	r7, #120	; 0x78
 8003bc2:	4691      	mov	r9, r2
 8003bc4:	4680      	mov	r8, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	469a      	mov	sl, r3
 8003bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bce:	d807      	bhi.n	8003be0 <_printf_i+0x28>
 8003bd0:	2f62      	cmp	r7, #98	; 0x62
 8003bd2:	d80a      	bhi.n	8003bea <_printf_i+0x32>
 8003bd4:	2f00      	cmp	r7, #0
 8003bd6:	f000 80d4 	beq.w	8003d82 <_printf_i+0x1ca>
 8003bda:	2f58      	cmp	r7, #88	; 0x58
 8003bdc:	f000 80c0 	beq.w	8003d60 <_printf_i+0x1a8>
 8003be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003be8:	e03a      	b.n	8003c60 <_printf_i+0xa8>
 8003bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bee:	2b15      	cmp	r3, #21
 8003bf0:	d8f6      	bhi.n	8003be0 <_printf_i+0x28>
 8003bf2:	a101      	add	r1, pc, #4	; (adr r1, 8003bf8 <_printf_i+0x40>)
 8003bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bf8:	08003c51 	.word	0x08003c51
 8003bfc:	08003c65 	.word	0x08003c65
 8003c00:	08003be1 	.word	0x08003be1
 8003c04:	08003be1 	.word	0x08003be1
 8003c08:	08003be1 	.word	0x08003be1
 8003c0c:	08003be1 	.word	0x08003be1
 8003c10:	08003c65 	.word	0x08003c65
 8003c14:	08003be1 	.word	0x08003be1
 8003c18:	08003be1 	.word	0x08003be1
 8003c1c:	08003be1 	.word	0x08003be1
 8003c20:	08003be1 	.word	0x08003be1
 8003c24:	08003d69 	.word	0x08003d69
 8003c28:	08003c91 	.word	0x08003c91
 8003c2c:	08003d23 	.word	0x08003d23
 8003c30:	08003be1 	.word	0x08003be1
 8003c34:	08003be1 	.word	0x08003be1
 8003c38:	08003d8b 	.word	0x08003d8b
 8003c3c:	08003be1 	.word	0x08003be1
 8003c40:	08003c91 	.word	0x08003c91
 8003c44:	08003be1 	.word	0x08003be1
 8003c48:	08003be1 	.word	0x08003be1
 8003c4c:	08003d2b 	.word	0x08003d2b
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c60:	2301      	movs	r3, #1
 8003c62:	e09f      	b.n	8003da4 <_printf_i+0x1ec>
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	682b      	ldr	r3, [r5, #0]
 8003c68:	0607      	lsls	r7, r0, #24
 8003c6a:	f103 0104 	add.w	r1, r3, #4
 8003c6e:	6029      	str	r1, [r5, #0]
 8003c70:	d501      	bpl.n	8003c76 <_printf_i+0xbe>
 8003c72:	681e      	ldr	r6, [r3, #0]
 8003c74:	e003      	b.n	8003c7e <_printf_i+0xc6>
 8003c76:	0646      	lsls	r6, r0, #25
 8003c78:	d5fb      	bpl.n	8003c72 <_printf_i+0xba>
 8003c7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c7e:	2e00      	cmp	r6, #0
 8003c80:	da03      	bge.n	8003c8a <_printf_i+0xd2>
 8003c82:	232d      	movs	r3, #45	; 0x2d
 8003c84:	4276      	negs	r6, r6
 8003c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c8a:	485a      	ldr	r0, [pc, #360]	; (8003df4 <_printf_i+0x23c>)
 8003c8c:	230a      	movs	r3, #10
 8003c8e:	e012      	b.n	8003cb6 <_printf_i+0xfe>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	6820      	ldr	r0, [r4, #0]
 8003c94:	1d19      	adds	r1, r3, #4
 8003c96:	6029      	str	r1, [r5, #0]
 8003c98:	0605      	lsls	r5, r0, #24
 8003c9a:	d501      	bpl.n	8003ca0 <_printf_i+0xe8>
 8003c9c:	681e      	ldr	r6, [r3, #0]
 8003c9e:	e002      	b.n	8003ca6 <_printf_i+0xee>
 8003ca0:	0641      	lsls	r1, r0, #25
 8003ca2:	d5fb      	bpl.n	8003c9c <_printf_i+0xe4>
 8003ca4:	881e      	ldrh	r6, [r3, #0]
 8003ca6:	4853      	ldr	r0, [pc, #332]	; (8003df4 <_printf_i+0x23c>)
 8003ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8003caa:	bf0c      	ite	eq
 8003cac:	2308      	moveq	r3, #8
 8003cae:	230a      	movne	r3, #10
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cb6:	6865      	ldr	r5, [r4, #4]
 8003cb8:	60a5      	str	r5, [r4, #8]
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	bfa2      	ittt	ge
 8003cbe:	6821      	ldrge	r1, [r4, #0]
 8003cc0:	f021 0104 	bicge.w	r1, r1, #4
 8003cc4:	6021      	strge	r1, [r4, #0]
 8003cc6:	b90e      	cbnz	r6, 8003ccc <_printf_i+0x114>
 8003cc8:	2d00      	cmp	r5, #0
 8003cca:	d04b      	beq.n	8003d64 <_printf_i+0x1ac>
 8003ccc:	4615      	mov	r5, r2
 8003cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8003cd6:	5dc7      	ldrb	r7, [r0, r7]
 8003cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cdc:	4637      	mov	r7, r6
 8003cde:	42bb      	cmp	r3, r7
 8003ce0:	460e      	mov	r6, r1
 8003ce2:	d9f4      	bls.n	8003cce <_printf_i+0x116>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d10b      	bne.n	8003d00 <_printf_i+0x148>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	07de      	lsls	r6, r3, #31
 8003cec:	d508      	bpl.n	8003d00 <_printf_i+0x148>
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	6861      	ldr	r1, [r4, #4]
 8003cf2:	4299      	cmp	r1, r3
 8003cf4:	bfde      	ittt	le
 8003cf6:	2330      	movle	r3, #48	; 0x30
 8003cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d00:	1b52      	subs	r2, r2, r5
 8003d02:	6122      	str	r2, [r4, #16]
 8003d04:	f8cd a000 	str.w	sl, [sp]
 8003d08:	464b      	mov	r3, r9
 8003d0a:	aa03      	add	r2, sp, #12
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4640      	mov	r0, r8
 8003d10:	f7ff fee4 	bl	8003adc <_printf_common>
 8003d14:	3001      	adds	r0, #1
 8003d16:	d14a      	bne.n	8003dae <_printf_i+0x1f6>
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	b004      	add	sp, #16
 8003d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	f043 0320 	orr.w	r3, r3, #32
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	4833      	ldr	r0, [pc, #204]	; (8003df8 <_printf_i+0x240>)
 8003d2c:	2778      	movs	r7, #120	; 0x78
 8003d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	6829      	ldr	r1, [r5, #0]
 8003d36:	061f      	lsls	r7, r3, #24
 8003d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d3c:	d402      	bmi.n	8003d44 <_printf_i+0x18c>
 8003d3e:	065f      	lsls	r7, r3, #25
 8003d40:	bf48      	it	mi
 8003d42:	b2b6      	uxthmi	r6, r6
 8003d44:	07df      	lsls	r7, r3, #31
 8003d46:	bf48      	it	mi
 8003d48:	f043 0320 	orrmi.w	r3, r3, #32
 8003d4c:	6029      	str	r1, [r5, #0]
 8003d4e:	bf48      	it	mi
 8003d50:	6023      	strmi	r3, [r4, #0]
 8003d52:	b91e      	cbnz	r6, 8003d5c <_printf_i+0x1a4>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f023 0320 	bic.w	r3, r3, #32
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	e7a7      	b.n	8003cb0 <_printf_i+0xf8>
 8003d60:	4824      	ldr	r0, [pc, #144]	; (8003df4 <_printf_i+0x23c>)
 8003d62:	e7e4      	b.n	8003d2e <_printf_i+0x176>
 8003d64:	4615      	mov	r5, r2
 8003d66:	e7bd      	b.n	8003ce4 <_printf_i+0x12c>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	6826      	ldr	r6, [r4, #0]
 8003d6c:	6961      	ldr	r1, [r4, #20]
 8003d6e:	1d18      	adds	r0, r3, #4
 8003d70:	6028      	str	r0, [r5, #0]
 8003d72:	0635      	lsls	r5, r6, #24
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	d501      	bpl.n	8003d7c <_printf_i+0x1c4>
 8003d78:	6019      	str	r1, [r3, #0]
 8003d7a:	e002      	b.n	8003d82 <_printf_i+0x1ca>
 8003d7c:	0670      	lsls	r0, r6, #25
 8003d7e:	d5fb      	bpl.n	8003d78 <_printf_i+0x1c0>
 8003d80:	8019      	strh	r1, [r3, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	6123      	str	r3, [r4, #16]
 8003d86:	4615      	mov	r5, r2
 8003d88:	e7bc      	b.n	8003d04 <_printf_i+0x14c>
 8003d8a:	682b      	ldr	r3, [r5, #0]
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	602a      	str	r2, [r5, #0]
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7fc fa22 	bl	80001e0 <memchr>
 8003d9c:	b108      	cbz	r0, 8003da2 <_printf_i+0x1ea>
 8003d9e:	1b40      	subs	r0, r0, r5
 8003da0:	6060      	str	r0, [r4, #4]
 8003da2:	6863      	ldr	r3, [r4, #4]
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	2300      	movs	r3, #0
 8003da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dac:	e7aa      	b.n	8003d04 <_printf_i+0x14c>
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	462a      	mov	r2, r5
 8003db2:	4649      	mov	r1, r9
 8003db4:	4640      	mov	r0, r8
 8003db6:	47d0      	blx	sl
 8003db8:	3001      	adds	r0, #1
 8003dba:	d0ad      	beq.n	8003d18 <_printf_i+0x160>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	079b      	lsls	r3, r3, #30
 8003dc0:	d413      	bmi.n	8003dea <_printf_i+0x232>
 8003dc2:	68e0      	ldr	r0, [r4, #12]
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	4298      	cmp	r0, r3
 8003dc8:	bfb8      	it	lt
 8003dca:	4618      	movlt	r0, r3
 8003dcc:	e7a6      	b.n	8003d1c <_printf_i+0x164>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	47d0      	blx	sl
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d09d      	beq.n	8003d18 <_printf_i+0x160>
 8003ddc:	3501      	adds	r5, #1
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	9903      	ldr	r1, [sp, #12]
 8003de2:	1a5b      	subs	r3, r3, r1
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	dcf2      	bgt.n	8003dce <_printf_i+0x216>
 8003de8:	e7eb      	b.n	8003dc2 <_printf_i+0x20a>
 8003dea:	2500      	movs	r5, #0
 8003dec:	f104 0619 	add.w	r6, r4, #25
 8003df0:	e7f5      	b.n	8003dde <_printf_i+0x226>
 8003df2:	bf00      	nop
 8003df4:	08003f29 	.word	0x08003f29
 8003df8:	08003f3a 	.word	0x08003f3a

08003dfc <memmove>:
 8003dfc:	4288      	cmp	r0, r1
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	eb01 0402 	add.w	r4, r1, r2
 8003e04:	d902      	bls.n	8003e0c <memmove+0x10>
 8003e06:	4284      	cmp	r4, r0
 8003e08:	4623      	mov	r3, r4
 8003e0a:	d807      	bhi.n	8003e1c <memmove+0x20>
 8003e0c:	1e43      	subs	r3, r0, #1
 8003e0e:	42a1      	cmp	r1, r4
 8003e10:	d008      	beq.n	8003e24 <memmove+0x28>
 8003e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1a:	e7f8      	b.n	8003e0e <memmove+0x12>
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4601      	mov	r1, r0
 8003e20:	428a      	cmp	r2, r1
 8003e22:	d100      	bne.n	8003e26 <memmove+0x2a>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e2e:	e7f7      	b.n	8003e20 <memmove+0x24>

08003e30 <_sbrk_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4d06      	ldr	r5, [pc, #24]	; (8003e4c <_sbrk_r+0x1c>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	f7fd fa66 	bl	800130c <_sbrk>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d102      	bne.n	8003e4a <_sbrk_r+0x1a>
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	b103      	cbz	r3, 8003e4a <_sbrk_r+0x1a>
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	200002ac 	.word	0x200002ac

08003e50 <memcpy>:
 8003e50:	440a      	add	r2, r1
 8003e52:	4291      	cmp	r1, r2
 8003e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e58:	d100      	bne.n	8003e5c <memcpy+0xc>
 8003e5a:	4770      	bx	lr
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e66:	4291      	cmp	r1, r2
 8003e68:	d1f9      	bne.n	8003e5e <memcpy+0xe>
 8003e6a:	bd10      	pop	{r4, pc}

08003e6c <_realloc_r>:
 8003e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e70:	4680      	mov	r8, r0
 8003e72:	4614      	mov	r4, r2
 8003e74:	460e      	mov	r6, r1
 8003e76:	b921      	cbnz	r1, 8003e82 <_realloc_r+0x16>
 8003e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	f7ff bc49 	b.w	8003714 <_malloc_r>
 8003e82:	b92a      	cbnz	r2, 8003e90 <_realloc_r+0x24>
 8003e84:	f7ff fbda 	bl	800363c <_free_r>
 8003e88:	4625      	mov	r5, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e90:	f000 f81b 	bl	8003eca <_malloc_usable_size_r>
 8003e94:	4284      	cmp	r4, r0
 8003e96:	4607      	mov	r7, r0
 8003e98:	d802      	bhi.n	8003ea0 <_realloc_r+0x34>
 8003e9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e9e:	d812      	bhi.n	8003ec6 <_realloc_r+0x5a>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	f7ff fc36 	bl	8003714 <_malloc_r>
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d0ed      	beq.n	8003e8a <_realloc_r+0x1e>
 8003eae:	42bc      	cmp	r4, r7
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	bf28      	it	cs
 8003eb6:	463a      	movcs	r2, r7
 8003eb8:	f7ff ffca 	bl	8003e50 <memcpy>
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f7ff fbbc 	bl	800363c <_free_r>
 8003ec4:	e7e1      	b.n	8003e8a <_realloc_r+0x1e>
 8003ec6:	4635      	mov	r5, r6
 8003ec8:	e7df      	b.n	8003e8a <_realloc_r+0x1e>

08003eca <_malloc_usable_size_r>:
 8003eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ece:	1f18      	subs	r0, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bfbc      	itt	lt
 8003ed4:	580b      	ldrlt	r3, [r1, r0]
 8003ed6:	18c0      	addlt	r0, r0, r3
 8003ed8:	4770      	bx	lr
	...

08003edc <_init>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr

08003ee8 <_fini>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr
