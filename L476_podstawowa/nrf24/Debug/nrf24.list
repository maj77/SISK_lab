
nrf24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005340  08005340  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005348  08005348  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  080053ac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080053ac  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d75e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ae  00000000  00000000  0002d82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095b  00000000  00000000  00030628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f16  00000000  00000000  00030f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f132  00000000  00000000  00056e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a80  00000000  00000000  00065fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000364c  00000000  00000000  0014ea4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00152098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005298 	.word	0x08005298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005298 	.word	0x08005298

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <MX_GPIO_Init+0x130>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a45      	ldr	r2, [pc, #276]	; (800069c <MX_GPIO_Init+0x130>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b43      	ldr	r3, [pc, #268]	; (800069c <MX_GPIO_Init+0x130>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b40      	ldr	r3, [pc, #256]	; (800069c <MX_GPIO_Init+0x130>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a3f      	ldr	r2, [pc, #252]	; (800069c <MX_GPIO_Init+0x130>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b3d      	ldr	r3, [pc, #244]	; (800069c <MX_GPIO_Init+0x130>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b3a      	ldr	r3, [pc, #232]	; (800069c <MX_GPIO_Init+0x130>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a39      	ldr	r2, [pc, #228]	; (800069c <MX_GPIO_Init+0x130>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <MX_GPIO_Init+0x130>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <MX_GPIO_Init+0x130>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a33      	ldr	r2, [pc, #204]	; (800069c <MX_GPIO_Init+0x130>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b31      	ldr	r3, [pc, #196]	; (800069c <MX_GPIO_Init+0x130>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 fa2f 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	482b      	ldr	r0, [pc, #172]	; (80006a0 <MX_GPIO_Init+0x134>)
 80005f4:	f001 fa2a 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	4829      	ldr	r0, [pc, #164]	; (80006a4 <MX_GPIO_Init+0x138>)
 80005fe:	f001 fa25 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000608:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4821      	ldr	r0, [pc, #132]	; (80006a0 <MX_GPIO_Init+0x134>)
 800061a:	f001 f86d 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061e:	2320      	movs	r3, #32
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f001 f85e 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_GPIO_Init+0x134>)
 8000654:	f001 f850 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f001 f841 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_GPIO_Init+0x138>)
 800068e:	f001 f833 	bl	80016f8 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000800 	.word	0x48000800
 80006a4:	48000400 	.word	0x48000400

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fe9d 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f83f 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff59 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 fde1 	bl	8001280 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80006be:	f000 fca9 	bl	8001014 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi2);
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <main+0x74>)
 80006c4:	f000 fc50 	bl	8000f68 <nRF24_Init>
  nRF24_SetRXAddress(0, "Nad0");
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <main+0x78>)
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 fb2d 	bl	8000d2a <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Odb0");
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <main+0x7c>)
 80006d2:	f000 fb63 	bl	8000d9c <nRF24_SetTXAddress>
  nRF24_TX_Mode();
 80006d6:	f000 f951 	bl	800097c <nRF24_TX_Mode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(i=0; i<5; i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	e018      	b.n	8000712 <main+0x6a>
	  {
		  MessageLength = sprintf(Message, "%d", i );
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4910      	ldr	r1, [pc, #64]	; (8000728 <main+0x80>)
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <main+0x84>)
 80006e8:	f004 f932 	bl	8004950 <siprintf>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <main+0x88>)
 80006f2:	701a      	strb	r2, [r3, #0]
		  nRF24_WriteTXPayload(Message);
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <main+0x84>)
 80006f6:	f000 fc01 	bl	8000efc <nRF24_WriteTXPayload>
		  HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fef2 	bl	80014e4 <HAL_Delay>
		  nRF24_WaitTX();
 8000700:	f000 fc0a 	bl	8000f18 <nRF24_WaitTX>
		  HAL_Delay(1000);
 8000704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000708:	f000 feec 	bl	80014e4 <HAL_Delay>
	  for(i=0; i<5; i++)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3301      	adds	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b04      	cmp	r3, #4
 8000716:	d9e3      	bls.n	80006e0 <main+0x38>
 8000718:	e7df      	b.n	80006da <main+0x32>
 800071a:	bf00      	nop
 800071c:	200000a4 	.word	0x200000a4
 8000720:	080052b0 	.word	0x080052b0
 8000724:	080052b8 	.word	0x080052b8
 8000728:	080052c0 	.word	0x080052c0
 800072c:	20000078 	.word	0x20000078
 8000730:	20000098 	.word	0x20000098

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	; 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 f924 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075a:	f001 f99d 	bl	8001a98 <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 f837 	bl	80007d6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9d4 	bl	8001b44 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007a2:	f000 f818 	bl	80007d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fd9c 	bl	80022fc <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ca:	f000 f804 	bl	80007d6 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007da:	b672      	cpsid	i
}
 80007dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007de:	e7fe      	b.n	80007de <Error_Handler+0x8>

080007e0 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fe7a 	bl	80014e4 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <nRF24_SendSpi+0x28>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	b29a      	uxth	r2, r3
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	f002 fcf6 	bl	8003202 <HAL_SPI_Transmit>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000009c 	.word	0x2000009c

08000824 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <nRF24_ReadSpi+0x28>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	b29a      	uxth	r2, r3
 8000838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	f002 fe55 	bl	80034ec <HAL_SPI_Receive>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000009c 	.word	0x2000009c

08000850 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800085e:	2200      	movs	r2, #0
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <nRF24_ReadRegister+0x44>)
 8000864:	f001 f8f2 	bl	8001a4c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffc3 	bl	80007f8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000872:	f107 030f 	add.w	r3, r7, #15
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffd3 	bl	8000824 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800087e:	2201      	movs	r2, #1
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <nRF24_ReadRegister+0x44>)
 8000884:	f001 f8e2 	bl	8001a4c <HAL_GPIO_WritePin>

	return result;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	48000800 	.word	0x48000800

08000898 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80008ac:	2200      	movs	r2, #0
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <nRF24_ReadRegisters+0x44>)
 80008b2:	f001 f8cb 	bl	8001a4c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff9c 	bl	80007f8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	4619      	mov	r1, r3
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f7ff ffad 	bl	8000824 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80008ca:	2201      	movs	r2, #1
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <nRF24_ReadRegisters+0x44>)
 80008d0:	f001 f8bc 	bl	8001a4c <HAL_GPIO_WritePin>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	48000800 	.word	0x48000800

080008e0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <nRF24_WriteRegister+0x48>)
 8000904:	f001 f8a2 	bl	8001a4c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff72 	bl	80007f8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000914:	2201      	movs	r2, #1
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <nRF24_WriteRegister+0x48>)
 800091a:	f001 f897 	bl	8001a4c <HAL_GPIO_WritePin>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	48000800 	.word	0x48000800

0800092c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	b2db      	uxtb	r3, r3
 8000944:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000946:	2200      	movs	r2, #0
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <nRF24_WriteRegisters+0x4c>)
 800094c:	f001 f87e 	bl	8001a4c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff4f 	bl	80007f8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4619      	mov	r1, r3
 800095e:	6838      	ldr	r0, [r7, #0]
 8000960:	f7ff ff4a 	bl	80007f8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000964:	2201      	movs	r2, #1
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <nRF24_WriteRegisters+0x4c>)
 800096a:	f001 f86f 	bl	8001a4c <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	48000800 	.word	0x48000800

0800097c <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8000982:	2200      	movs	r2, #0
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	4810      	ldr	r0, [pc, #64]	; (80009c8 <nRF24_TX_Mode+0x4c>)
 8000988:	f001 f860 	bl	8001a4c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 800098c:	f000 f81e 	bl	80009cc <nRF24_ReadConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f023 0301 	bic.w	r3, r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f818 	bl	80009dc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80009ac:	2070      	movs	r0, #112	; 0x70
 80009ae:	f000 f870 	bl	8000a92 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80009b2:	f000 f87d 	bl	8000ab0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80009b6:	f000 f895 	bl	8000ae4 <nRF24_FlushTX>

	nRF24_Delay(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ff10 	bl	80007e0 <nRF24_Delay>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48000400 	.word	0x48000400

080009cc <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff3d 	bl	8000850 <nRF24_ReadRegister>
 80009d6:	4603      	mov	r3, r0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	bd80      	pop	{r7, pc}

080009dc <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4619      	mov	r1, r3
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff ff78 	bl	80008e0 <nRF24_WriteRegister>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000a02:	2006      	movs	r0, #6
 8000a04:	f7ff ff24 	bl	8000850 <nRF24_ReadRegister>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	f023 0307 	bic.w	r3, r3, #7
 8000a12:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b25a      	sxtb	r2, r3
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2006      	movs	r0, #6
 8000a2a:	f7ff ff59 	bl	80008e0 <nRF24_WriteRegister>
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000a40:	2006      	movs	r0, #6
 8000a42:	f7ff ff05 	bl	8000850 <nRF24_ReadRegister>
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a50:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d104      	bne.n	8000a62 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e006      	b.n	8000a70 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d103      	bne.n	8000a70 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	4619      	mov	r1, r3
 8000a74:	2006      	movs	r0, #6
 8000a76:	f7ff ff33 	bl	80008e0 <nRF24_WriteRegister>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000a86:	2007      	movs	r0, #7
 8000a88:	f7ff fee2 	bl	8000850 <nRF24_ReadRegister>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2007      	movs	r0, #7
 8000aa2:	f7ff ff1d 	bl	80008e0 <nRF24_WriteRegister>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000ab6:	23e2      	movs	r3, #226	; 0xe2
 8000ab8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <nRF24_FlushRX+0x30>)
 8000ac0:	f000 ffc4 	bl	8001a4c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe95 	bl	80007f8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <nRF24_FlushRX+0x30>)
 8000ad4:	f000 ffba 	bl	8001a4c <HAL_GPIO_WritePin>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	48000800 	.word	0x48000800

08000ae4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000aea:	23e1      	movs	r3, #225	; 0xe1
 8000aec:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <nRF24_FlushTX+0x30>)
 8000af4:	f000 ffaa 	bl	8001a4c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe7b 	bl	80007f8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000b02:	2201      	movs	r2, #1
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <nRF24_FlushTX+0x30>)
 8000b08:	f000 ffa0 	bl	8001a4c <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	48000800 	.word	0x48000800

08000b18 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000b22:	f7ff ff53 	bl	80009cc <nRF24_ReadConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e003      	b.n	8000b42 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f023 0308 	bic.w	r3, r3, #8
 8000b40:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff49 	bl	80009dc <nRF24_WriteConfig>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000b5c:	f7ff ff36 	bl	80009cc <nRF24_ReadConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e003      	b.n	8000b7c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	f023 0304 	bic.w	r3, r3, #4
 8000b7a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff2c 	bl	80009dc <nRF24_WriteConfig>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	b25a      	sxtb	r2, r3
 8000ba2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fe93 	bl	80008e0 <nRF24_WriteRegister>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f7ff fe82 	bl	80008e0 <nRF24_WriteRegister>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	d901      	bls.n	8000bfe <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3311      	adds	r3, #17
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4610      	mov	r0, r2
 8000c10:	f7ff fe66 	bl	80008e0 <nRF24_WriteRegister>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d901      	bls.n	8000c36 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000c32:	2305      	movs	r3, #5
 8000c34:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fe0a 	bl	8000850 <nRF24_ReadRegister>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d10a      	bne.n	8000c5c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	b25a      	sxtb	r2, r3
 8000c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e00b      	b.n	8000c74 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4619      	mov	r1, r3
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff fe31 	bl	80008e0 <nRF24_WriteRegister>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	460a      	mov	r2, r1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	4613      	mov	r3, r2
 8000c94:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d901      	bls.n	8000ca0 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fdd5 	bl	8000850 <nRF24_ReadRegister>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d10a      	bne.n	8000cc6 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	b25a      	sxtb	r2, r3
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e00b      	b.n	8000cde <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	b25a      	sxtb	r2, r3
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fdfc 	bl	80008e0 <nRF24_WriteRegister>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d901      	bls.n	8000d04 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000d00:	2305      	movs	r3, #5
 8000d02:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d801      	bhi.n	8000d0e <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	3b02      	subs	r3, #2
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff fddf 	bl	80008e0 <nRF24_WriteRegister>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	6039      	str	r1, [r7, #0]
 8000d34:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <nRF24_SetRXAddress+0x18>
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d11d      	bne.n	8000d7e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e00d      	b.n	8000d64 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	f1c3 0302 	rsb	r3, r3, #2
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	3310      	adds	r3, #16
 8000d58:	443b      	add	r3, r7
 8000d5a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3301      	adds	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d9ee      	bls.n	8000d48 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	330a      	adds	r3, #10
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f107 010c 	add.w	r1, r7, #12
 8000d74:	2203      	movs	r2, #3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdd8 	bl	800092c <nRF24_WriteRegisters>
	{
 8000d7c:	e00a      	b.n	8000d94 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	330a      	adds	r3, #10
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	3302      	adds	r3, #2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f7ff fda7 	bl	80008e0 <nRF24_WriteRegister>
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2203      	movs	r2, #3
 8000daa:	4619      	mov	r1, r3
 8000dac:	200a      	movs	r0, #10
 8000dae:	f7ff fd73 	bl	8000898 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e00c      	b.n	8000dd2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f1c3 0302 	rsb	r3, r3, #2
 8000dc0:	3210      	adds	r2, #16
 8000dc2:	443a      	add	r2, r7
 8000dc4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8000dc8:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <nRF24_SetTXAddress+0x88>)
 8000dca:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d9ef      	bls.n	8000db8 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00d      	b.n	8000dfa <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	441a      	add	r2, r3
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f1c3 0302 	rsb	r3, r3, #2
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	3310      	adds	r3, #16
 8000dee:	443b      	add	r3, r7
 8000df0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	3301      	adds	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d9ee      	bls.n	8000dde <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2203      	movs	r2, #3
 8000e06:	4619      	mov	r1, r3
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f7ff fd8f 	bl	800092c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2203      	movs	r2, #3
 8000e14:	4619      	mov	r1, r3
 8000e16:	2010      	movs	r0, #16
 8000e18:	f7ff fd88 	bl	800092c <nRF24_WriteRegisters>

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000a0 	.word	0x200000a0

08000e28 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8000e2e:	f7ff fe28 	bl	8000a82 <nRF24_ReadStatus>
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000e3c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe26 	bl	8000a92 <nRF24_WriteStatus>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e58:	f7ff fdb8 	bl	80009cc <nRF24_ReadConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e003      	b.n	8000e78 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e76:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fdae 	bl	80009dc <nRF24_WriteConfig>
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e92:	f7ff fd9b 	bl	80009cc <nRF24_ReadConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e003      	b.n	8000eb2 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f023 0320 	bic.w	r3, r3, #32
 8000eb0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd91 	bl	80009dc <nRF24_WriteConfig>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000ecc:	f7ff fd7e 	bl	80009cc <nRF24_ReadConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d104      	bne.n	8000ee4 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e003      	b.n	8000eec <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f023 0310 	bic.w	r3, r3, #16
 8000eea:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fd74 	bl	80009dc <nRF24_WriteConfig>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	20a0      	movs	r0, #160	; 0xa0
 8000f0a:	f7ff fd0f 	bl	800092c <nRF24_WriteRegisters>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	4810      	ldr	r0, [pc, #64]	; (8000f64 <nRF24_WaitTX+0x4c>)
 8000f24:	f000 fd92 	bl	8001a4c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fc59 	bl	80007e0 <nRF24_Delay>
	NRF24_CE_LOW;
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <nRF24_WaitTX+0x4c>)
 8000f34:	f000 fd8a 	bl	8001a4c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fc51 	bl	80007e0 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8000f3e:	f7ff fda0 	bl	8000a82 <nRF24_ReadStatus>
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <nRF24_WaitTX+0x42>
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 0320 	and.w	r3, r3, #32
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0ee      	beq.n	8000f38 <nRF24_WaitTX+0x20>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	48000400 	.word	0x48000400

08000f68 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <nRF24_Init+0xa0>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8000f76:	2200      	movs	r2, #0
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	4824      	ldr	r0, [pc, #144]	; (800100c <nRF24_Init+0xa4>)
 8000f7c:	f000 fd66 	bl	8001a4c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8000f80:	2201      	movs	r2, #1
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	4822      	ldr	r0, [pc, #136]	; (8001010 <nRF24_Init+0xa8>)
 8000f86:	f000 fd61 	bl	8001a4c <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f7ff fc28 	bl	80007e0 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8000f90:	2003      	movs	r0, #3
 8000f92:	f7ff fd31 	bl	80009f8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8000f96:	2002      	movs	r0, #2
 8000f98:	f7ff fd4d 	bl	8000a36 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fdbb 	bl	8000b18 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fdd5 	bl	8000b52 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2004      	movs	r0, #4
 8000fac:	f7ff fdee 	bl	8000b8c <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	f7ff fc94 	bl	80008e0 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f7ff fe02 	bl	8000bc2 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fe0f 	bl	8000be4 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fe27 	bl	8000c1c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fe58 	bl	8000c86 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f7ff fe8a 	bl	8000cf0 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8000fdc:	2014      	movs	r0, #20
 8000fde:	f7ff fbff 	bl	80007e0 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff ff33 	bl	8000e4e <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff ff4d 	bl	8000e88 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ff67 	bl	8000ec2 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff fbf3 	bl	80007e0 <nRF24_Delay>

	nRF24_ClearInterrupts();
 8000ffa:	f7ff ff15 	bl	8000e28 <nRF24_ClearInterrupts>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000009c 	.word	0x2000009c
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800

08001014 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_SPI2_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_SPI2_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_SPI2_Init+0x74>)
 8001020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_SPI2_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_SPI2_Init+0x74>)
 800102e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001032:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_SPI2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_SPI2_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_SPI2_Init+0x74>)
 8001042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001046:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI2_Init+0x74>)
 800104a:	2218      	movs	r2, #24
 800104c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_SPI2_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_SPI2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_SPI2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_SPI2_Init+0x74>)
 8001062:	2207      	movs	r2, #7
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_SPI2_Init+0x74>)
 800106e:	2208      	movs	r2, #8
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_SPI2_Init+0x74>)
 8001074:	f002 f822 	bl	80030bc <HAL_SPI_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800107e:	f7ff fbaa 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000a4 	.word	0x200000a4
 800108c:	40003800 	.word	0x40003800

08001090 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HAL_SPI_MspInit+0xb4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d144      	bne.n	800113c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6593      	str	r3, [r2, #88]	; 0x58
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_SPI_MspInit+0xb8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fa:	230c      	movs	r3, #12
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800110a:	2305      	movs	r3, #5
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <HAL_SPI_MspInit+0xbc>)
 8001116:	f000 faef 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112c:	2305      	movs	r3, #5
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_SPI_MspInit+0xc0>)
 8001138:	f000 fade 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40003800 	.word	0x40003800
 8001148:	40021000 	.word	0x40021000
 800114c:	48000800 	.word	0x48000800
 8001150:	48000400 	.word	0x48000400

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_MspInit+0x44>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_MspInit+0x44>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_MspInit+0x44>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x44>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_MspInit+0x44>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 f95c 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f003 fbbe 	bl	80049a0 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20018000 	.word	0x20018000
 8001250:	00000400 	.word	0x00000400
 8001254:	20000108 	.word	0x20000108
 8001258:	200002e0 	.word	0x200002e0

0800125c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_USART2_UART_Init+0x5c>)
 8001288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USART2_UART_Init+0x58>)
 80012c4:	f002 fe28 	bl	8003f18 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ce:	f7ff fa82 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000010c 	.word	0x2000010c
 80012dc:	40004400 	.word	0x40004400

080012e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ac      	sub	sp, #176	; 0xb0
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2288      	movs	r2, #136	; 0x88
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fb45 	bl	8004990 <memset>
  if(uartHandle->Instance==USART2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_UART_MspInit+0xb0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d13b      	bne.n	8001388 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001310:	2302      	movs	r3, #2
 8001312:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fa11 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001328:	f7ff fa55 	bl	80007d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_UART_MspInit+0xb4>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_UART_MspInit+0xb4>)
 8001332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001336:	6593      	str	r3, [r2, #88]	; 0x58
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_UART_MspInit+0xb4>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_UART_MspInit+0xb4>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_UART_MspInit+0xb4>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_UART_MspInit+0xb4>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800135c:	230c      	movs	r3, #12
 800135e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001374:	2307      	movs	r3, #7
 8001376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f000 f9b8 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	37b0      	adds	r7, #176	; 0xb0
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000

08001398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800139c:	f7ff ff5e 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f003 faf1 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ca:	f7ff f96d 	bl	80006a8 <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013dc:	08005350 	.word	0x08005350
  ldr r2, =_sbss
 80013e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013e4:	200002e0 	.word	0x200002e0

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_Init+0x3c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_Init+0x3c>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001402:	2003      	movs	r0, #3
 8001404:	f000 f944 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001408:	2000      	movs	r0, #0
 800140a:	f000 f80f 	bl	800142c <HAL_InitTick>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	e001      	b.n	800141e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141a:	f7ff fe9b 	bl	8001154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d023      	beq.n	8001488 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_InitTick+0x70>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f941 	bl	80016de <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d809      	bhi.n	800147c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f919 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_InitTick+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e007      	b.n	800148c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e004      	b.n	800148c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e001      	b.n	800148c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000194 	.word	0x20000194

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000194 	.word	0x20000194

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff47 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5c 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb0 	bl	800164c <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e17f      	b.n	8001a08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8171 	beq.w	8001a02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <HAL_GPIO_Init+0x40>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 0201 	and.w	r2, r3, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d118      	bne.n	80017d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	6939      	ldr	r1, [r7, #16]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80ac 	beq.w	8001a02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_GPIO_Init+0x330>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <HAL_GPIO_Init+0x330>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6613      	str	r3, [r2, #96]	; 0x60
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HAL_GPIO_Init+0x330>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c2:	4a5a      	ldr	r2, [pc, #360]	; (8001a2c <HAL_GPIO_Init+0x334>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x242>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x338>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x23e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x33c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x23a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x340>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x236>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x344>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x232>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x348>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x22e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_GPIO_Init+0x34c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x22a>
 800191e:	2306      	movs	r3, #6
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001922:	2307      	movs	r3, #7
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x244>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x244>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x244>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x244>
 800193a:	2300      	movs	r3, #0
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194c:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_GPIO_Init+0x334>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_GPIO_Init+0x350>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800197e:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_GPIO_Init+0x350>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_GPIO_Init+0x350>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_GPIO_Init+0x350>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_GPIO_Init+0x350>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_GPIO_Init+0x350>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x350>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_GPIO_Init+0x350>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f ae78 	bne.w	8001708 <HAL_GPIO_Init+0x10>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800
 8001a38:	48000c00 	.word	0x48000c00
 8001a3c:	48001000 	.word	0x48001000
 8001a40:	48001400 	.word	0x48001400
 8001a44:	48001800 	.word	0x48001800
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000

08001a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa6:	d130      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab4:	d038      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2232      	movs	r2, #50	; 0x32
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001adc:	e002      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af0:	d102      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f2      	bne.n	8001ade <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b04:	d110      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e00f      	b.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	d007      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3ca      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b97      	ldr	r3, [pc, #604]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e4 	beq.w	8001d40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4a>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	f040 808b 	bne.w	8001c9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f040 8087 	bne.w	8001c9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x62>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e3a2      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x7c>
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_OscConfig+0x88>
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d223      	bcs.n	8001c18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fd55 	bl	8002684 <RCC_SetFlashLatencyFromMSIRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e383      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be4:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a72      	ldr	r2, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	496d      	ldr	r1, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c02:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4968      	ldr	r1, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
 8001c16:	e025      	b.n	8001c64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4960      	ldr	r1, [pc, #384]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c36:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	495b      	ldr	r1, [pc, #364]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fd15 	bl	8002684 <RCC_SetFlashLatencyFromMSIRange>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e343      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c64:	f000 fc4a 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	4950      	ldr	r1, [pc, #320]	; (8001db8 <HAL_RCC_OscConfig+0x274>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <HAL_RCC_OscConfig+0x278>)
 8001c82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c84:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fbcf 	bl	800142c <HAL_InitTick>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d052      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	e327      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d032      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca4:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a42      	ldr	r2, [pc, #264]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc0c 	bl	80014cc <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc08 	bl	80014cc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e310      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a36      	ldr	r2, [pc, #216]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4931      	ldr	r1, [pc, #196]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	492c      	ldr	r1, [pc, #176]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e01a      	b.n	8001d40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a29      	ldr	r2, [pc, #164]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fbd9 	bl	80014cc <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fbd5 	bl	80014cc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e2dd      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1da>
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d074      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x21a>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d10e      	bne.n	8001d76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d064      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d160      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e2ba      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x24a>
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e026      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d96:	d115      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x280>
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a02      	ldr	r2, [pc, #8]	; (8001db4 <HAL_RCC_OscConfig+0x270>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	080052c4 	.word	0x080052c4
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	4ba0      	ldr	r3, [pc, #640]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a9f      	ldr	r2, [pc, #636]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b9d      	ldr	r3, [pc, #628]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a9c      	ldr	r2, [pc, #624]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb72 	bl	80014cc <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb6e 	bl	80014cc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e276      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x2a8>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fb5e 	bl	80014cc <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fb5a 	bl	80014cc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e262      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e26:	4b88      	ldr	r3, [pc, #544]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2d0>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d060      	beq.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x310>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d119      	bne.n	8001e82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d116      	bne.n	8001e82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e54:	4b7c      	ldr	r3, [pc, #496]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x328>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e23f      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b76      	ldr	r3, [pc, #472]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	4973      	ldr	r1, [pc, #460]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	e040      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d023      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fb19 	bl	80014cc <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fb15 	bl	80014cc <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e21d      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b65      	ldr	r3, [pc, #404]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b62      	ldr	r3, [pc, #392]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	495f      	ldr	r1, [pc, #380]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
 8001ed0:	e018      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff faf5 	bl	80014cc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff faf1 	bl	80014cc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f9      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1e:	4a4a      	ldr	r2, [pc, #296]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7ff fad0 	bl	80014cc <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f30:	f7ff facc 	bl	80014cc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1d4      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ef      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3ec>
 8001f50:	e01b      	b.n	8001f8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fab3 	bl	80014cc <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff faaf 	bl	80014cc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1b7      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f7c:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ef      	bne.n	8001f6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a6 	beq.w	80020e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb4:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_RCC_OscConfig+0x508>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d118      	bne.n	8002002 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_RCC_OscConfig+0x508>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x508>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fa76 	bl	80014cc <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7ff fa72 	bl	80014cc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e17a      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x508>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x4d8>
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201a:	e029      	b.n	8002070 <HAL_RCC_OscConfig+0x52c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d115      	bne.n	8002050 <HAL_RCC_OscConfig+0x50c>
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <HAL_RCC_OscConfig+0x504>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002044:	e014      	b.n	8002070 <HAL_RCC_OscConfig+0x52c>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	4b9c      	ldr	r3, [pc, #624]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a9b      	ldr	r2, [pc, #620]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002060:	4b98      	ldr	r3, [pc, #608]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	4a97      	ldr	r2, [pc, #604]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fa28 	bl	80014cc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fa24 	bl	80014cc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e12a      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ed      	beq.n	8002080 <HAL_RCC_OscConfig+0x53c>
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff fa11 	bl	80014cc <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fa0d 	bl	80014cc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e113      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ed      	bne.n	80020ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4a79      	ldr	r2, [pc, #484]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80fe 	beq.w	80022ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	f040 80d0 	bne.w	8002298 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f8:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	429a      	cmp	r2, r3
 800210a:	d130      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	3b01      	subs	r3, #1
 8002118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d127      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11f      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002138:	2a07      	cmp	r2, #7
 800213a:	bf14      	ite	ne
 800213c:	2201      	movne	r2, #1
 800213e:	2200      	moveq	r2, #0
 8002140:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002142:	4293      	cmp	r3, r2
 8002144:	d113      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d109      	bne.n	800216e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d06e      	beq.n	800224c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d069      	beq.n	8002248 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002180:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0ad      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4b      	ldr	r2, [pc, #300]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800219c:	f7ff f996 	bl	80014cc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f992 	bl	80014cc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e09a      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <HAL_RCC_OscConfig+0x784>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021d2:	3a01      	subs	r2, #1
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021dc:	0212      	lsls	r2, r2, #8
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e4:	0852      	lsrs	r2, r2, #1
 80021e6:	3a01      	subs	r2, #1
 80021e8:	0552      	lsls	r2, r2, #21
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021f0:	0852      	lsrs	r2, r2, #1
 80021f2:	3a01      	subs	r2, #1
 80021f4:	0652      	lsls	r2, r2, #25
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021fc:	0912      	lsrs	r2, r2, #4
 80021fe:	0452      	lsls	r2, r2, #17
 8002200:	430a      	orrs	r2, r1
 8002202:	4930      	ldr	r1, [pc, #192]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002208:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2d      	ldr	r2, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002220:	f7ff f954 	bl	80014cc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f950 	bl	80014cc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e058      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002246:	e050      	b.n	80022ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e04f      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d148      	bne.n	80022ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002270:	f7ff f92c 	bl	80014cc <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff f928 	bl	80014cc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e030      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x734>
 8002296:	e028      	b.n	80022ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d023      	beq.n	80022e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_RCC_OscConfig+0x780>)
 80022a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff f90f 	bl	80014cc <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b0:	e00c      	b.n	80022cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff f90b 	bl	80014cc <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d905      	bls.n	80022cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x7b0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ec      	bne.n	80022b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x7b0>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4905      	ldr	r1, [pc, #20]	; (80022f4 <HAL_RCC_OscConfig+0x7b0>)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x7b4>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
 80022e4:	e001      	b.n	80022ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	feeefffc 	.word	0xfeeefffc

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0e7      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b72      	ldr	r3, [pc, #456]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4970      	ldr	r1, [pc, #448]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b6e      	ldr	r3, [pc, #440]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0cf      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d010      	beq.n	800236e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	429a      	cmp	r2, r3
 800235a:	d908      	bls.n	800236e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235c:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4960      	ldr	r1, [pc, #384]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d04c      	beq.n	8002414 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d121      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0a6      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	4b54      	ldr	r3, [pc, #336]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09a      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b2:	4b4e      	ldr	r3, [pc, #312]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e086      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4943      	ldr	r1, [pc, #268]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e4:	f7ff f872 	bl	80014cc <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff f86e 	bl	80014cc <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e06e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242c:	429a      	cmp	r2, r3
 800242e:	d208      	bcs.n	8002442 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	492b      	ldr	r1, [pc, #172]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d210      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 0207 	bic.w	r2, r3, #7
 8002458:	4923      	ldr	r1, [pc, #140]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e036      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4918      	ldr	r1, [pc, #96]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4910      	ldr	r1, [pc, #64]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b0:	f000 f824 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	490b      	ldr	r1, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1f4>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1fc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe ffa9 	bl	800142c <HAL_InitTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80024de:	7afb      	ldrb	r3, [r7, #11]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	080052c4 	.word	0x080052c4
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250a:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d121      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d11e      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e005      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002558:	4a2b      	ldr	r2, [pc, #172]	; (8002608 <HAL_RCC_GetSysClockFreq+0x10c>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10d      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d102      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_GetSysClockFreq+0x110>)
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e004      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d101      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCC_GetSysClockFreq+0x114>)
 8002582:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d134      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258a:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d003      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0xac>
 80025a0:	e005      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_GetSysClockFreq+0x110>)
 80025a4:	617b      	str	r3, [r7, #20]
      break;
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_GetSysClockFreq+0x114>)
 80025aa:	617b      	str	r3, [r7, #20]
      break;
 80025ac:	e002      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	617b      	str	r3, [r7, #20]
      break;
 80025b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	3301      	adds	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	fb03 f202 	mul.w	r2, r3, r2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	0e5b      	lsrs	r3, r3, #25
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	3301      	adds	r3, #1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f4:	69bb      	ldr	r3, [r7, #24]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	080052dc 	.word	0x080052dc
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000000 	.word	0x20000000

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	080052d4 	.word	0x080052d4

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800265c:	f7ff ffda 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0adb      	lsrs	r3, r3, #11
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	080052d4 	.word	0x080052d4

08002684 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800269c:	f7ff f9ee 	bl	8001a7c <HAL_PWREx_GetVoltageRange>
 80026a0:	6178      	str	r0, [r7, #20]
 80026a2:	e014      	b.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a24      	ldr	r2, [pc, #144]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026bc:	f7ff f9de 	bl	8001a7c <HAL_PWREx_GetVoltageRange>
 80026c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	4a1d      	ldr	r2, [pc, #116]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d4:	d10b      	bne.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d919      	bls.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2ba0      	cmp	r3, #160	; 0xa0
 80026e0:	d902      	bls.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e2:	2302      	movs	r3, #2
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e013      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e8:	2301      	movs	r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e010      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d902      	bls.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026f4:	2303      	movs	r3, #3
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	e00a      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b80      	cmp	r3, #128	; 0x80
 80026fe:	d102      	bne.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002700:	2302      	movs	r3, #2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e004      	b.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b70      	cmp	r3, #112	; 0x70
 800270a:	d101      	bne.n	8002710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800270c:	2301      	movs	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 0207 	bic.w	r2, r3, #7
 8002718:	4909      	ldr	r1, [pc, #36]	; (8002740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40022000 	.word	0x40022000

08002744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800274c:	2300      	movs	r3, #0
 800274e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002750:	2300      	movs	r3, #0
 8002752:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275c:	2b00      	cmp	r3, #0
 800275e:	d041      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002764:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002768:	d02a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800276a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800276e:	d824      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800277a:	d81e      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002784:	d010      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002786:	e018      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002788:	4b86      	ldr	r3, [pc, #536]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a85      	ldr	r2, [pc, #532]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002792:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002794:	e015      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fabb 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a6:	e00c      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3320      	adds	r3, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fba6 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	74fb      	strb	r3, [r7, #19]
      break;
 80027be:	e000      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c8:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d6:	4973      	ldr	r1, [pc, #460]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027de:	e001      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d041      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027f8:	d02a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027fe:	d824      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800280a:	d81e      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d010      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002816:	e018      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002818:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a61      	ldr	r2, [pc, #388]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002824:	e015      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fa73 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002836:	e00c      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3320      	adds	r3, #32
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fb5e 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002848:	e003      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	74fb      	strb	r3, [r7, #19]
      break;
 800284e:	e000      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002858:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002866:	494f      	ldr	r1, [pc, #316]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a0 	beq.w	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	; 0x58
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b8:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3a      	ldr	r2, [pc, #232]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fe02 	bl	80014cc <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ca:	e009      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fdfe 	bl	80014cc <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	74fb      	strb	r3, [r7, #19]
        break;
 80028de:	e005      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ef      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d15c      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01f      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	d019      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fdbd 	bl	80014cc <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002954:	e00b      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fdb9 	bl	80014cc <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d902      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	74fb      	strb	r3, [r7, #19]
            break;
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ec      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002992:	4904      	ldr	r1, [pc, #16]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800299a:	e009      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
 80029a0:	e006      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b0:	7c7b      	ldrb	r3, [r7, #17]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b9e      	ldr	r3, [pc, #632]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	4a9d      	ldr	r2, [pc, #628]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ce:	4b98      	ldr	r3, [pc, #608]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f023 0203 	bic.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	4994      	ldr	r1, [pc, #592]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f0:	4b8f      	ldr	r3, [pc, #572]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 020c 	bic.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	498c      	ldr	r1, [pc, #560]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a12:	4b87      	ldr	r3, [pc, #540]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4983      	ldr	r1, [pc, #524]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a34:	4b7e      	ldr	r3, [pc, #504]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	497b      	ldr	r1, [pc, #492]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	4972      	ldr	r1, [pc, #456]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a78:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	496a      	ldr	r1, [pc, #424]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	4961      	ldr	r1, [pc, #388]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002abc:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	4959      	ldr	r1, [pc, #356]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ade:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	4950      	ldr	r1, [pc, #320]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	4948      	ldr	r1, [pc, #288]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	493f      	ldr	r1, [pc, #252]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d028      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b44:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b52:	4937      	ldr	r1, [pc, #220]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a31      	ldr	r2, [pc, #196]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6e:	60d3      	str	r3, [r2, #12]
 8002b70:	e011      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f8c8 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d028      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	491f      	ldr	r1, [pc, #124]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bcc:	60d3      	str	r3, [r2, #12]
 8002bce:	e011      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f899 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02b      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	4908      	ldr	r1, [pc, #32]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1e:	d109      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
 8002c2c:	e014      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f867 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02f      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c72:	4928      	ldr	r1, [pc, #160]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c82:	d10d      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f844 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d014      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	74bb      	strb	r3, [r7, #18]
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3320      	adds	r3, #32
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f925 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d02:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d26:	4b75      	ldr	r3, [pc, #468]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d018      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0203 	and.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
       ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
       ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d047      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e044      	b.n	8002dee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d018      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0x86>
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d825      	bhi.n	8002dbc <RCCEx_PLLSAI1_Config+0xa4>
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <RCCEx_PLLSAI1_Config+0x62>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d009      	beq.n	8002d8c <RCCEx_PLLSAI1_Config+0x74>
 8002d78:	e020      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d7a:	4b60      	ldr	r3, [pc, #384]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11d      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8a:	e01a      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d8c:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e013      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9e:	4b57      	ldr	r3, [pc, #348]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dba:	e006      	b.n	8002dca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc0:	e004      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	430b      	orrs	r3, r1
 8002de8:	4944      	ldr	r1, [pc, #272]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d17d      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df4:	4b41      	ldr	r3, [pc, #260]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a40      	ldr	r2, [pc, #256]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e00:	f7fe fb64 	bl	80014cc <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e06:	e009      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e08:	f7fe fb60 	bl	80014cc <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	73fb      	strb	r3, [r7, #15]
        break;
 8002e1a:	e005      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ef      	bne.n	8002e08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d160      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	0211      	lsls	r1, r2, #8
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	0912      	lsrs	r2, r2, #4
 8002e4c:	0452      	lsls	r2, r2, #17
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	492a      	ldr	r1, [pc, #168]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	610b      	str	r3, [r1, #16]
 8002e56:	e027      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d112      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6892      	ldr	r2, [r2, #8]
 8002e6e:	0211      	lsls	r1, r2, #8
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6912      	ldr	r2, [r2, #16]
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	3a01      	subs	r2, #1
 8002e78:	0552      	lsls	r2, r2, #21
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	491f      	ldr	r1, [pc, #124]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	610b      	str	r3, [r1, #16]
 8002e82:	e011      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6952      	ldr	r2, [r2, #20]
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0652      	lsls	r2, r2, #25
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	4916      	ldr	r1, [pc, #88]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fb0a 	bl	80014cc <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eba:	e009      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ebc:	f7fe fb06 	bl	80014cc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ece:	e005      	b.n	8002edc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ef      	beq.n	8002ebc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	4904      	ldr	r1, [pc, #16]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000

08002f00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f1a:	4b67      	ldr	r3, [pc, #412]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10d      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f32:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
       ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d047      	beq.n	8002fd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e044      	b.n	8002fd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d018      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0x86>
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d825      	bhi.n	8002fa4 <RCCEx_PLLSAI2_Config+0xa4>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <RCCEx_PLLSAI2_Config+0x62>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d009      	beq.n	8002f74 <RCCEx_PLLSAI2_Config+0x74>
 8002f60:	e020      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f62:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11d      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e01a      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e013      	b.n	8002fae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f86:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f92:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fa2:	e006      	b.n	8002fb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e004      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	4939      	ldr	r1, [pc, #228]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d167      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a35      	ldr	r2, [pc, #212]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fa70 	bl	80014cc <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff0:	f7fe fa6c 	bl	80014cc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
        break;
 8003002:	e005      	b.n	8003010 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ef      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d14a      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	0211      	lsls	r1, r2, #8
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	0912      	lsrs	r2, r2, #4
 8003034:	0452      	lsls	r2, r2, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	491f      	ldr	r1, [pc, #124]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	614b      	str	r3, [r1, #20]
 800303e:	e011      	b.n	8003064 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003048:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6892      	ldr	r2, [r2, #8]
 8003050:	0211      	lsls	r1, r2, #8
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6912      	ldr	r2, [r2, #16]
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	3a01      	subs	r2, #1
 800305a:	0652      	lsls	r2, r2, #25
 800305c:	430a      	orrs	r2, r1
 800305e:	4916      	ldr	r1, [pc, #88]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003060:	4313      	orrs	r3, r2
 8003062:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fa2c 	bl	80014cc <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003078:	f7fe fa28 	bl	80014cc <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
          break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ef      	beq.n	8003078 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4904      	ldr	r1, [pc, #16]	; (80030b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e095      	b.n	80031fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d108      	bne.n	80030e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030de:	d009      	beq.n	80030f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
 80030e6:	e005      	b.n	80030f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd ffbe 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003134:	d902      	bls.n	800313c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e002      	b.n	8003142 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003140:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800314a:	d007      	beq.n	800315c <HAL_SPI_Init+0xa0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003154:	d002      	beq.n	800315c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	ea42 0103 	orr.w	r1, r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	f003 0204 	and.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031d8:	ea42 0103 	orr.w	r1, r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b088      	sub	sp, #32
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_SPI_Transmit+0x22>
 8003220:	2302      	movs	r3, #2
 8003222:	e15f      	b.n	80034e4 <HAL_SPI_Transmit+0x2e2>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800322c:	f7fe f94e 	bl	80014cc <HAL_GetTick>
 8003230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003246:	e148      	b.n	80034da <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Transmit+0x52>
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003258:	e13f      	b.n	80034da <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a4:	d10f      	bne.n	80032c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d007      	beq.n	80032e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ec:	d94f      	bls.n	800338e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Transmit+0xfa>
 80032f6:	8afb      	ldrh	r3, [r7, #22]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d142      	bne.n	8003382 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003320:	e02f      	b.n	8003382 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d112      	bne.n	8003356 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003354:	e015      	b.n	8003382 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003356:	f7fe f8b9 	bl	80014cc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d803      	bhi.n	800336e <HAL_SPI_Transmit+0x16c>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d102      	bne.n	8003374 <HAL_SPI_Transmit+0x172>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003380:	e0ab      	b.n	80034da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ca      	bne.n	8003322 <HAL_SPI_Transmit+0x120>
 800338c:	e080      	b.n	8003490 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_Transmit+0x19a>
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d174      	bne.n	8003486 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d912      	bls.n	80033cc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	881a      	ldrh	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b02      	subs	r3, #2
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ca:	e05c      	b.n	8003486 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033f2:	e048      	b.n	8003486 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d12b      	bne.n	800345a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d912      	bls.n	8003432 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b02      	subs	r3, #2
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003430:	e029      	b.n	8003486 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	7812      	ldrb	r2, [r2, #0]
 800343e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003458:	e015      	b.n	8003486 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345a:	f7fe f837 	bl	80014cc <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d803      	bhi.n	8003472 <HAL_SPI_Transmit+0x270>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d102      	bne.n	8003478 <HAL_SPI_Transmit+0x276>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003484:	e029      	b.n	80034da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1b1      	bne.n	80033f4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fcf9 	bl	8003e8c <SPI_EndRxTxTransaction>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e003      	b.n	80034da <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003510:	e11a      	b.n	8003748 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d112      	bne.n	8003542 <HAL_SPI_Receive+0x56>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10e      	bne.n	8003542 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2204      	movs	r2, #4
 8003528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f90e 	bl	800375a <HAL_SPI_TransmitReceive>
 800353e:	4603      	mov	r3, r0
 8003540:	e107      	b.n	8003752 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_SPI_Receive+0x64>
 800354c:	2302      	movs	r3, #2
 800354e:	e100      	b.n	8003752 <HAL_SPI_Receive+0x266>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003558:	f7fd ffb8 	bl	80014cc <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_SPI_Receive+0x7e>
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800356e:	e0eb      	b.n	8003748 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2204      	movs	r2, #4
 8003574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ba:	d908      	bls.n	80035ce <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	e007      	b.n	80035de <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035dc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e6:	d10f      	bne.n	8003608 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d007      	beq.n	8003626 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800362e:	d86f      	bhi.n	8003710 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003630:	e034      	b.n	800369c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d117      	bne.n	8003670 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f103 020c 	add.w	r2, r3, #12
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800366e:	e015      	b.n	800369c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003670:	f7fd ff2c 	bl	80014cc <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d803      	bhi.n	8003688 <HAL_SPI_Receive+0x19c>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d102      	bne.n	800368e <HAL_SPI_Receive+0x1a2>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800369a:	e055      	b.n	8003748 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1c4      	bne.n	8003632 <HAL_SPI_Receive+0x146>
 80036a8:	e038      	b.n	800371c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d115      	bne.n	80036e4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	b292      	uxth	r2, r2
 80036c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	1c9a      	adds	r2, r3, #2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036e2:	e015      	b.n	8003710 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e4:	f7fd fef2 	bl	80014cc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d803      	bhi.n	80036fc <HAL_SPI_Receive+0x210>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Receive+0x216>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800370e:	e01b      	b.n	8003748 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1c6      	bne.n	80036aa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fb5b 	bl	8003ddc <SPI_EndRxTransaction>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
 800373e:	e003      	b.n	8003748 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08a      	sub	sp, #40	; 0x28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x26>
 800377c:	2302      	movs	r3, #2
 800377e:	e20a      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x43c>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003788:	f7fd fea0 	bl	80014cc <HAL_GetTick>
 800378c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003794:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037a4:	7efb      	ldrb	r3, [r7, #27]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d00e      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x6e>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b0:	d106      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x66>
 80037ba:	7efb      	ldrb	r3, [r7, #27]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d003      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037c6:	e1e0      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_SPI_TransmitReceive+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_SPI_TransmitReceive+0x80>
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037e0:	e1d3      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d003      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2205      	movs	r2, #5
 80037f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	887a      	ldrh	r2, [r7, #2]
 8003822:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003838:	d802      	bhi.n	8003840 <HAL_SPI_TransmitReceive+0xe6>
 800383a:	8a3b      	ldrh	r3, [r7, #16]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d908      	bls.n	8003852 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	e007      	b.n	8003862 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d007      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003888:	f240 8081 	bls.w	800398e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_TransmitReceive+0x140>
 8003894:	8a7b      	ldrh	r3, [r7, #18]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d16d      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038be:	e05a      	b.n	8003976 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d11b      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x1ac>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d016      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x1ac>
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d113      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d11c      	bne.n	800394e <HAL_SPI_TransmitReceive+0x1f4>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	b292      	uxth	r2, r2
 800392c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	1c9a      	adds	r2, r3, #2
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800394e:	f7fd fdbd 	bl	80014cc <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395a:	429a      	cmp	r2, r3
 800395c:	d80b      	bhi.n	8003976 <HAL_SPI_TransmitReceive+0x21c>
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d007      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003974:	e109      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d19f      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x166>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d199      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x166>
 800398c:	e0e3      	b.n	8003b56 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_SPI_TransmitReceive+0x244>
 8003996:	8a7b      	ldrh	r3, [r7, #18]
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 80cf 	bne.w	8003b3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d912      	bls.n	80039ce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b02      	subs	r3, #2
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039cc:	e0b6      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f4:	e0a2      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d134      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x314>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02f      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x314>
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d12c      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d912      	bls.n	8003a44 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b02      	subs	r3, #2
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a42:	e012      	b.n	8003a6a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d148      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x3b4>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d042      	beq.n	8003b0e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d923      	bls.n	8003adc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b02      	subs	r3, #2
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d81f      	bhi.n	8003b0a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	e016      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f103 020c 	add.w	r2, r3, #12
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b0e:	f7fd fcdd 	bl	80014cc <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d803      	bhi.n	8003b26 <HAL_SPI_TransmitReceive+0x3cc>
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_TransmitReceive+0x3d2>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003b3a:	e026      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f47f af57 	bne.w	80039f6 <HAL_SPI_TransmitReceive+0x29c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f47f af50 	bne.w	80039f6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f996 	bl	8003e8c <SPI_EndRxTxTransaction>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b80:	e003      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bb0:	f7fd fc8c 	bl	80014cc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bc0:	f7fd fc84 	bl	80014cc <HAL_GetTick>
 8003bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bc6:	4b39      	ldr	r3, [pc, #228]	; (8003cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	0d1b      	lsrs	r3, r3, #20
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd6:	e054      	b.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d050      	beq.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be0:	f7fd fc74 	bl	80014cc <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d902      	bls.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d13d      	bne.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c0e:	d111      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	d004      	beq.n	8003c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d107      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3c:	d10f      	bne.n	8003c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e017      	b.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d19b      	bne.n	8003bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000000 	.word	0x20000000

08003cb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cc2:	f7fd fc03 	bl	80014cc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cd2:	f7fd fbfb 	bl	80014cc <HAL_GetTick>
 8003cd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ce0:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00da      	lsls	r2, r3, #3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	0d1b      	lsrs	r3, r3, #20
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cf8:	e060      	b.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d00:	d107      	bne.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d050      	beq.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d1a:	f7fd fbd7 	bl	80014cc <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d902      	bls.n	8003d30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d13d      	bne.n	8003dac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d48:	d111      	bne.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d52:	d004      	beq.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d107      	bne.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d76:	d10f      	bne.n	8003d98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e010      	b.n	8003dce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d196      	bne.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df0:	d111      	bne.n	8003e16 <SPI_EndRxTransaction+0x3a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfa:	d004      	beq.n	8003e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e04:	d107      	bne.n	8003e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff febd 	bl	8003ba0 <SPI_WaitFlagStateUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e023      	b.n	8003e84 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e44:	d11d      	bne.n	8003e82 <SPI_EndRxTransaction+0xa6>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4e:	d004      	beq.n	8003e5a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d113      	bne.n	8003e82 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff ff22 	bl	8003cb0 <SPI_WaitFifoStateUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e000      	b.n	8003e84 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff ff03 	bl	8003cb0 <SPI_WaitFifoStateUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e027      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff fe68 	bl	8003ba0 <SPI_WaitFlagStateUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e014      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff fedc 	bl	8003cb0 <SPI_WaitFifoStateUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e000      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e040      	b.n	8003fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd f9d0 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fae0 	bl	8004524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f825 	bl	8003fb4 <UART_SetConfig>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01b      	b.n	8003fac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fb5f 	bl	8004668 <UART_CheckIdleState>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb8:	b08a      	sub	sp, #40	; 0x28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4ba4      	ldr	r3, [pc, #656]	; (8004274 <UART_SetConfig+0x2c0>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a99      	ldr	r2, [pc, #612]	; (8004278 <UART_SetConfig+0x2c4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	4313      	orrs	r3, r2
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a90      	ldr	r2, [pc, #576]	; (800427c <UART_SetConfig+0x2c8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d126      	bne.n	800408c <UART_SetConfig+0xd8>
 800403e:	4b90      	ldr	r3, [pc, #576]	; (8004280 <UART_SetConfig+0x2cc>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b03      	cmp	r3, #3
 800404a:	d81b      	bhi.n	8004084 <UART_SetConfig+0xd0>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0xa0>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004065 	.word	0x08004065
 8004058:	08004075 	.word	0x08004075
 800405c:	0800406d 	.word	0x0800406d
 8004060:	0800407d 	.word	0x0800407d
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406a:	e116      	b.n	800429a <UART_SetConfig+0x2e6>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004072:	e112      	b.n	800429a <UART_SetConfig+0x2e6>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407a:	e10e      	b.n	800429a <UART_SetConfig+0x2e6>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004082:	e10a      	b.n	800429a <UART_SetConfig+0x2e6>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e106      	b.n	800429a <UART_SetConfig+0x2e6>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <UART_SetConfig+0x2d0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d138      	bne.n	8004108 <UART_SetConfig+0x154>
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <UART_SetConfig+0x2cc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d82d      	bhi.n	8004100 <UART_SetConfig+0x14c>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0xf8>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	08004101 	.word	0x08004101
 80040b4:	08004101 	.word	0x08004101
 80040b8:	08004101 	.word	0x08004101
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004101 	.word	0x08004101
 80040cc:	080040e9 	.word	0x080040e9
 80040d0:	08004101 	.word	0x08004101
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004101 	.word	0x08004101
 80040dc:	080040f9 	.word	0x080040f9
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e6:	e0d8      	b.n	800429a <UART_SetConfig+0x2e6>
 80040e8:	2302      	movs	r3, #2
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ee:	e0d4      	b.n	800429a <UART_SetConfig+0x2e6>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f6:	e0d0      	b.n	800429a <UART_SetConfig+0x2e6>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fe:	e0cc      	b.n	800429a <UART_SetConfig+0x2e6>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e0c8      	b.n	800429a <UART_SetConfig+0x2e6>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a5e      	ldr	r2, [pc, #376]	; (8004288 <UART_SetConfig+0x2d4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d125      	bne.n	800415e <UART_SetConfig+0x1aa>
 8004112:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <UART_SetConfig+0x2cc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800411c:	2b30      	cmp	r3, #48	; 0x30
 800411e:	d016      	beq.n	800414e <UART_SetConfig+0x19a>
 8004120:	2b30      	cmp	r3, #48	; 0x30
 8004122:	d818      	bhi.n	8004156 <UART_SetConfig+0x1a2>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d00a      	beq.n	800413e <UART_SetConfig+0x18a>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d814      	bhi.n	8004156 <UART_SetConfig+0x1a2>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <UART_SetConfig+0x182>
 8004130:	2b10      	cmp	r3, #16
 8004132:	d008      	beq.n	8004146 <UART_SetConfig+0x192>
 8004134:	e00f      	b.n	8004156 <UART_SetConfig+0x1a2>
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413c:	e0ad      	b.n	800429a <UART_SetConfig+0x2e6>
 800413e:	2302      	movs	r3, #2
 8004140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004144:	e0a9      	b.n	800429a <UART_SetConfig+0x2e6>
 8004146:	2304      	movs	r3, #4
 8004148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414c:	e0a5      	b.n	800429a <UART_SetConfig+0x2e6>
 800414e:	2308      	movs	r3, #8
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004154:	e0a1      	b.n	800429a <UART_SetConfig+0x2e6>
 8004156:	2310      	movs	r3, #16
 8004158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415c:	e09d      	b.n	800429a <UART_SetConfig+0x2e6>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4a      	ldr	r2, [pc, #296]	; (800428c <UART_SetConfig+0x2d8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d125      	bne.n	80041b4 <UART_SetConfig+0x200>
 8004168:	4b45      	ldr	r3, [pc, #276]	; (8004280 <UART_SetConfig+0x2cc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004172:	2bc0      	cmp	r3, #192	; 0xc0
 8004174:	d016      	beq.n	80041a4 <UART_SetConfig+0x1f0>
 8004176:	2bc0      	cmp	r3, #192	; 0xc0
 8004178:	d818      	bhi.n	80041ac <UART_SetConfig+0x1f8>
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d00a      	beq.n	8004194 <UART_SetConfig+0x1e0>
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d814      	bhi.n	80041ac <UART_SetConfig+0x1f8>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <UART_SetConfig+0x1d8>
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d008      	beq.n	800419c <UART_SetConfig+0x1e8>
 800418a:	e00f      	b.n	80041ac <UART_SetConfig+0x1f8>
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e082      	b.n	800429a <UART_SetConfig+0x2e6>
 8004194:	2302      	movs	r3, #2
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e07e      	b.n	800429a <UART_SetConfig+0x2e6>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a2:	e07a      	b.n	800429a <UART_SetConfig+0x2e6>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041aa:	e076      	b.n	800429a <UART_SetConfig+0x2e6>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b2:	e072      	b.n	800429a <UART_SetConfig+0x2e6>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a35      	ldr	r2, [pc, #212]	; (8004290 <UART_SetConfig+0x2dc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d12a      	bne.n	8004214 <UART_SetConfig+0x260>
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <UART_SetConfig+0x2cc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041cc:	d01a      	beq.n	8004204 <UART_SetConfig+0x250>
 80041ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d2:	d81b      	bhi.n	800420c <UART_SetConfig+0x258>
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d00c      	beq.n	80041f4 <UART_SetConfig+0x240>
 80041da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041de:	d815      	bhi.n	800420c <UART_SetConfig+0x258>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <UART_SetConfig+0x238>
 80041e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e8:	d008      	beq.n	80041fc <UART_SetConfig+0x248>
 80041ea:	e00f      	b.n	800420c <UART_SetConfig+0x258>
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e052      	b.n	800429a <UART_SetConfig+0x2e6>
 80041f4:	2302      	movs	r3, #2
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e04e      	b.n	800429a <UART_SetConfig+0x2e6>
 80041fc:	2304      	movs	r3, #4
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e04a      	b.n	800429a <UART_SetConfig+0x2e6>
 8004204:	2308      	movs	r3, #8
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e046      	b.n	800429a <UART_SetConfig+0x2e6>
 800420c:	2310      	movs	r3, #16
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e042      	b.n	800429a <UART_SetConfig+0x2e6>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a17      	ldr	r2, [pc, #92]	; (8004278 <UART_SetConfig+0x2c4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d13a      	bne.n	8004294 <UART_SetConfig+0x2e0>
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <UART_SetConfig+0x2cc>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422c:	d01a      	beq.n	8004264 <UART_SetConfig+0x2b0>
 800422e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004232:	d81b      	bhi.n	800426c <UART_SetConfig+0x2b8>
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004238:	d00c      	beq.n	8004254 <UART_SetConfig+0x2a0>
 800423a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423e:	d815      	bhi.n	800426c <UART_SetConfig+0x2b8>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <UART_SetConfig+0x298>
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004248:	d008      	beq.n	800425c <UART_SetConfig+0x2a8>
 800424a:	e00f      	b.n	800426c <UART_SetConfig+0x2b8>
 800424c:	2300      	movs	r3, #0
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e022      	b.n	800429a <UART_SetConfig+0x2e6>
 8004254:	2302      	movs	r3, #2
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e01e      	b.n	800429a <UART_SetConfig+0x2e6>
 800425c:	2304      	movs	r3, #4
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e01a      	b.n	800429a <UART_SetConfig+0x2e6>
 8004264:	2308      	movs	r3, #8
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e016      	b.n	800429a <UART_SetConfig+0x2e6>
 800426c:	2310      	movs	r3, #16
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e012      	b.n	800429a <UART_SetConfig+0x2e6>
 8004274:	efff69f3 	.word	0xefff69f3
 8004278:	40008000 	.word	0x40008000
 800427c:	40013800 	.word	0x40013800
 8004280:	40021000 	.word	0x40021000
 8004284:	40004400 	.word	0x40004400
 8004288:	40004800 	.word	0x40004800
 800428c:	40004c00 	.word	0x40004c00
 8004290:	40005000 	.word	0x40005000
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a9f      	ldr	r2, [pc, #636]	; (800451c <UART_SetConfig+0x568>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d17a      	bne.n	800439a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d824      	bhi.n	80042f6 <UART_SetConfig+0x342>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x300>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042f7 	.word	0x080042f7
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042e7 	.word	0x080042e7
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	080042f7 	.word	0x080042f7
 80042d4:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe f9a8 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 80042dc:	61f8      	str	r0, [r7, #28]
        break;
 80042de:	e010      	b.n	8004302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b8f      	ldr	r3, [pc, #572]	; (8004520 <UART_SetConfig+0x56c>)
 80042e2:	61fb      	str	r3, [r7, #28]
        break;
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7fe f909 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80042ea:	61f8      	str	r0, [r7, #28]
        break;
 80042ec:	e009      	b.n	8004302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	61fb      	str	r3, [r7, #28]
        break;
 80042f4:	e005      	b.n	8004302 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80fb 	beq.w	8004500 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	429a      	cmp	r2, r3
 8004318:	d305      	bcc.n	8004326 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	429a      	cmp	r2, r3
 8004324:	d903      	bls.n	800432e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800432c:	e0e8      	b.n	8004500 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	2200      	movs	r2, #0
 8004332:	461c      	mov	r4, r3
 8004334:	4615      	mov	r5, r2
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	022b      	lsls	r3, r5, #8
 8004340:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004344:	0222      	lsls	r2, r4, #8
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	6849      	ldr	r1, [r1, #4]
 800434a:	0849      	lsrs	r1, r1, #1
 800434c:	2000      	movs	r0, #0
 800434e:	4688      	mov	r8, r1
 8004350:	4681      	mov	r9, r0
 8004352:	eb12 0a08 	adds.w	sl, r2, r8
 8004356:	eb43 0b09 	adc.w	fp, r3, r9
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004368:	4650      	mov	r0, sl
 800436a:	4659      	mov	r1, fp
 800436c:	f7fb ff80 	bl	8000270 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437e:	d308      	bcc.n	8004392 <UART_SetConfig+0x3de>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d204      	bcs.n	8004392 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e0b6      	b.n	8004500 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004398:	e0b2      	b.n	8004500 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a2:	d15e      	bne.n	8004462 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d828      	bhi.n	80043fe <UART_SetConfig+0x44a>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x400>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	080043ff 	.word	0x080043ff
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043ff 	.word	0x080043ff
 80043cc:	080043ff 	.word	0x080043ff
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	080043f7 	.word	0x080043f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fe f928 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 80043dc:	61f8      	str	r0, [r7, #28]
        break;
 80043de:	e014      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7fe f93a 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 80043e4:	61f8      	str	r0, [r7, #28]
        break;
 80043e6:	e010      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e8:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <UART_SetConfig+0x56c>)
 80043ea:	61fb      	str	r3, [r7, #28]
        break;
 80043ec:	e00d      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ee:	f7fe f885 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80043f2:	61f8      	str	r0, [r7, #28]
        break;
 80043f4:	e009      	b.n	800440a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fa:	61fb      	str	r3, [r7, #28]
        break;
 80043fc:	e005      	b.n	800440a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d077      	beq.n	8004500 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005a      	lsls	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d916      	bls.n	800445a <UART_SetConfig+0x4a6>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d212      	bcs.n	800445a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f023 030f 	bic.w	r3, r3, #15
 800443c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	b29a      	uxth	r2, r3
 800444a:	8afb      	ldrh	r3, [r7, #22]
 800444c:	4313      	orrs	r3, r2
 800444e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	8afa      	ldrh	r2, [r7, #22]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e052      	b.n	8004500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004460:	e04e      	b.n	8004500 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004466:	2b08      	cmp	r3, #8
 8004468:	d827      	bhi.n	80044ba <UART_SetConfig+0x506>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x4bc>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004495 	.word	0x08004495
 8004474:	0800449d 	.word	0x0800449d
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044bb 	.word	0x080044bb
 8004480:	080044ab 	.word	0x080044ab
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044bb 	.word	0x080044bb
 800448c:	080044bb 	.word	0x080044bb
 8004490:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004494:	f7fe f8ca 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8004498:	61f8      	str	r0, [r7, #28]
        break;
 800449a:	e014      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe f8dc 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 80044a0:	61f8      	str	r0, [r7, #28]
        break;
 80044a2:	e010      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <UART_SetConfig+0x56c>)
 80044a6:	61fb      	str	r3, [r7, #28]
        break;
 80044a8:	e00d      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe f827 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80044ae:	61f8      	str	r0, [r7, #28]
        break;
 80044b0:	e009      	b.n	80044c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b6:	61fb      	str	r3, [r7, #28]
        break;
 80044b8:	e005      	b.n	80044c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c4:	bf00      	nop
    }

    if (pclk != 0U)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d019      	beq.n	8004500 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085a      	lsrs	r2, r3, #1
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	d909      	bls.n	80044fa <UART_SetConfig+0x546>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ec:	d205      	bcs.n	80044fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	e002      	b.n	8004500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800450c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004510:	4618      	mov	r0, r3
 8004512:	3728      	adds	r7, #40	; 0x28
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	40008000 	.word	0x40008000
 8004520:	00f42400 	.word	0x00f42400

08004524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01a      	beq.n	800463a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004622:	d10a      	bne.n	800463a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b098      	sub	sp, #96	; 0x60
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004678:	f7fc ff28 	bl	80014cc <HAL_GetTick>
 800467c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b08      	cmp	r3, #8
 800468a:	d12e      	bne.n	80046ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f88c 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d021      	beq.n	80046ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ba:	653b      	str	r3, [r7, #80]	; 0x50
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
 80046c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e062      	b.n	80047b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d149      	bne.n	800478c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f856 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03c      	beq.n	800478c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	623b      	str	r3, [r7, #32]
   return(result);
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
 8004732:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e6      	bne.n	8004712 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3308      	adds	r3, #8
 800474a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	60fb      	str	r3, [r7, #12]
   return(result);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004764:	61fa      	str	r2, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	617b      	str	r3, [r7, #20]
   return(result);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e011      	b.n	80047b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3758      	adds	r7, #88	; 0x58
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c8:	e049      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d045      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fc fe7b 	bl	80014cc <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e048      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d031      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d110      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2208      	movs	r2, #8
 800480e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f838 	bl	8004886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2208      	movs	r2, #8
 800481a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e029      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004838:	d111      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f81e 	bl	8004886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d0a6      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b095      	sub	sp, #84	; 0x54
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
 80048ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3308      	adds	r3, #8
 80048c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d118      	bne.n	800492e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	60bb      	str	r3, [r7, #8]
   return(result);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0310 	bic.w	r3, r3, #16
 8004910:	647b      	str	r3, [r7, #68]	; 0x44
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	613b      	str	r3, [r7, #16]
   return(result);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e6      	bne.n	80048fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004942:	bf00      	nop
 8004944:	3754      	adds	r7, #84	; 0x54
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <siprintf>:
 8004950:	b40e      	push	{r1, r2, r3}
 8004952:	b500      	push	{lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	ab1d      	add	r3, sp, #116	; 0x74
 8004958:	9002      	str	r0, [sp, #8]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004960:	4809      	ldr	r0, [pc, #36]	; (8004988 <siprintf+0x38>)
 8004962:	9107      	str	r1, [sp, #28]
 8004964:	9104      	str	r1, [sp, #16]
 8004966:	4909      	ldr	r1, [pc, #36]	; (800498c <siprintf+0x3c>)
 8004968:	f853 2b04 	ldr.w	r2, [r3], #4
 800496c:	9105      	str	r1, [sp, #20]
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	a902      	add	r1, sp, #8
 8004974:	f000 f992 	bl	8004c9c <_svfiprintf_r>
 8004978:	9b02      	ldr	r3, [sp, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	b01c      	add	sp, #112	; 0x70
 8004980:	f85d eb04 	ldr.w	lr, [sp], #4
 8004984:	b003      	add	sp, #12
 8004986:	4770      	bx	lr
 8004988:	20000058 	.word	0x20000058
 800498c:	ffff0208 	.word	0xffff0208

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	; (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000058 	.word	0x20000058

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4d0d      	ldr	r5, [pc, #52]	; (80049e4 <__libc_init_array+0x38>)
 80049b0:	4c0d      	ldr	r4, [pc, #52]	; (80049e8 <__libc_init_array+0x3c>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	2600      	movs	r6, #0
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	4d0b      	ldr	r5, [pc, #44]	; (80049ec <__libc_init_array+0x40>)
 80049be:	4c0c      	ldr	r4, [pc, #48]	; (80049f0 <__libc_init_array+0x44>)
 80049c0:	f000 fc6a 	bl	8005298 <_init>
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	2600      	movs	r6, #0
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08005348 	.word	0x08005348
 80049e8:	08005348 	.word	0x08005348
 80049ec:	08005348 	.word	0x08005348
 80049f0:	0800534c 	.word	0x0800534c

080049f4 <__retarget_lock_acquire_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_release_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <_free_r>:
 80049f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049fa:	2900      	cmp	r1, #0
 80049fc:	d044      	beq.n	8004a88 <_free_r+0x90>
 80049fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a02:	9001      	str	r0, [sp, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f1a1 0404 	sub.w	r4, r1, #4
 8004a0a:	bfb8      	it	lt
 8004a0c:	18e4      	addlt	r4, r4, r3
 8004a0e:	f000 f8df 	bl	8004bd0 <__malloc_lock>
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <_free_r+0x94>)
 8004a14:	9801      	ldr	r0, [sp, #4]
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	b933      	cbnz	r3, 8004a28 <_free_r+0x30>
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	6014      	str	r4, [r2, #0]
 8004a1e:	b003      	add	sp, #12
 8004a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a24:	f000 b8da 	b.w	8004bdc <__malloc_unlock>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d908      	bls.n	8004a3e <_free_r+0x46>
 8004a2c:	6825      	ldr	r5, [r4, #0]
 8004a2e:	1961      	adds	r1, r4, r5
 8004a30:	428b      	cmp	r3, r1
 8004a32:	bf01      	itttt	eq
 8004a34:	6819      	ldreq	r1, [r3, #0]
 8004a36:	685b      	ldreq	r3, [r3, #4]
 8004a38:	1949      	addeq	r1, r1, r5
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	e7ed      	b.n	8004a1a <_free_r+0x22>
 8004a3e:	461a      	mov	r2, r3
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b10b      	cbz	r3, 8004a48 <_free_r+0x50>
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	d9fa      	bls.n	8004a3e <_free_r+0x46>
 8004a48:	6811      	ldr	r1, [r2, #0]
 8004a4a:	1855      	adds	r5, r2, r1
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d10b      	bne.n	8004a68 <_free_r+0x70>
 8004a50:	6824      	ldr	r4, [r4, #0]
 8004a52:	4421      	add	r1, r4
 8004a54:	1854      	adds	r4, r2, r1
 8004a56:	42a3      	cmp	r3, r4
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	d1e0      	bne.n	8004a1e <_free_r+0x26>
 8004a5c:	681c      	ldr	r4, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6053      	str	r3, [r2, #4]
 8004a62:	440c      	add	r4, r1
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	e7da      	b.n	8004a1e <_free_r+0x26>
 8004a68:	d902      	bls.n	8004a70 <_free_r+0x78>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	6003      	str	r3, [r0, #0]
 8004a6e:	e7d6      	b.n	8004a1e <_free_r+0x26>
 8004a70:	6825      	ldr	r5, [r4, #0]
 8004a72:	1961      	adds	r1, r4, r5
 8004a74:	428b      	cmp	r3, r1
 8004a76:	bf04      	itt	eq
 8004a78:	6819      	ldreq	r1, [r3, #0]
 8004a7a:	685b      	ldreq	r3, [r3, #4]
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	bf04      	itt	eq
 8004a80:	1949      	addeq	r1, r1, r5
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	6054      	str	r4, [r2, #4]
 8004a86:	e7ca      	b.n	8004a1e <_free_r+0x26>
 8004a88:	b003      	add	sp, #12
 8004a8a:	bd30      	pop	{r4, r5, pc}
 8004a8c:	200002d8 	.word	0x200002d8

08004a90 <sbrk_aligned>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4e0e      	ldr	r6, [pc, #56]	; (8004acc <sbrk_aligned+0x3c>)
 8004a94:	460c      	mov	r4, r1
 8004a96:	6831      	ldr	r1, [r6, #0]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	b911      	cbnz	r1, 8004aa2 <sbrk_aligned+0x12>
 8004a9c:	f000 fba6 	bl	80051ec <_sbrk_r>
 8004aa0:	6030      	str	r0, [r6, #0]
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 fba1 	bl	80051ec <_sbrk_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d00a      	beq.n	8004ac4 <sbrk_aligned+0x34>
 8004aae:	1cc4      	adds	r4, r0, #3
 8004ab0:	f024 0403 	bic.w	r4, r4, #3
 8004ab4:	42a0      	cmp	r0, r4
 8004ab6:	d007      	beq.n	8004ac8 <sbrk_aligned+0x38>
 8004ab8:	1a21      	subs	r1, r4, r0
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 fb96 	bl	80051ec <_sbrk_r>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d101      	bne.n	8004ac8 <sbrk_aligned+0x38>
 8004ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ac8:	4620      	mov	r0, r4
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	200002dc 	.word	0x200002dc

08004ad0 <_malloc_r>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	1ccd      	adds	r5, r1, #3
 8004ad6:	f025 0503 	bic.w	r5, r5, #3
 8004ada:	3508      	adds	r5, #8
 8004adc:	2d0c      	cmp	r5, #12
 8004ade:	bf38      	it	cc
 8004ae0:	250c      	movcc	r5, #12
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	db01      	blt.n	8004aec <_malloc_r+0x1c>
 8004ae8:	42a9      	cmp	r1, r5
 8004aea:	d905      	bls.n	8004af8 <_malloc_r+0x28>
 8004aec:	230c      	movs	r3, #12
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	2600      	movs	r6, #0
 8004af2:	4630      	mov	r0, r6
 8004af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bcc <_malloc_r+0xfc>
 8004afc:	f000 f868 	bl	8004bd0 <__malloc_lock>
 8004b00:	f8d8 3000 	ldr.w	r3, [r8]
 8004b04:	461c      	mov	r4, r3
 8004b06:	bb5c      	cbnz	r4, 8004b60 <_malloc_r+0x90>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7ff ffc0 	bl	8004a90 <sbrk_aligned>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	4604      	mov	r4, r0
 8004b14:	d155      	bne.n	8004bc2 <_malloc_r+0xf2>
 8004b16:	f8d8 4000 	ldr.w	r4, [r8]
 8004b1a:	4626      	mov	r6, r4
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	d145      	bne.n	8004bac <_malloc_r+0xdc>
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d048      	beq.n	8004bb6 <_malloc_r+0xe6>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	4631      	mov	r1, r6
 8004b28:	4638      	mov	r0, r7
 8004b2a:	eb04 0903 	add.w	r9, r4, r3
 8004b2e:	f000 fb5d 	bl	80051ec <_sbrk_r>
 8004b32:	4581      	cmp	r9, r0
 8004b34:	d13f      	bne.n	8004bb6 <_malloc_r+0xe6>
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	1a6d      	subs	r5, r5, r1
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	f7ff ffa7 	bl	8004a90 <sbrk_aligned>
 8004b42:	3001      	adds	r0, #1
 8004b44:	d037      	beq.n	8004bb6 <_malloc_r+0xe6>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	442b      	add	r3, r5
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d038      	beq.n	8004bc6 <_malloc_r+0xf6>
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	42a2      	cmp	r2, r4
 8004b58:	d12b      	bne.n	8004bb2 <_malloc_r+0xe2>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e00f      	b.n	8004b80 <_malloc_r+0xb0>
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	d41f      	bmi.n	8004ba6 <_malloc_r+0xd6>
 8004b66:	2a0b      	cmp	r2, #11
 8004b68:	d917      	bls.n	8004b9a <_malloc_r+0xca>
 8004b6a:	1961      	adds	r1, r4, r5
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	6025      	str	r5, [r4, #0]
 8004b70:	bf18      	it	ne
 8004b72:	6059      	strne	r1, [r3, #4]
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	bf08      	it	eq
 8004b78:	f8c8 1000 	streq.w	r1, [r8]
 8004b7c:	5162      	str	r2, [r4, r5]
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	4638      	mov	r0, r7
 8004b82:	f104 060b 	add.w	r6, r4, #11
 8004b86:	f000 f829 	bl	8004bdc <__malloc_unlock>
 8004b8a:	f026 0607 	bic.w	r6, r6, #7
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	1af2      	subs	r2, r6, r3
 8004b92:	d0ae      	beq.n	8004af2 <_malloc_r+0x22>
 8004b94:	1b9b      	subs	r3, r3, r6
 8004b96:	50a3      	str	r3, [r4, r2]
 8004b98:	e7ab      	b.n	8004af2 <_malloc_r+0x22>
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	6862      	ldr	r2, [r4, #4]
 8004b9e:	d1dd      	bne.n	8004b5c <_malloc_r+0x8c>
 8004ba0:	f8c8 2000 	str.w	r2, [r8]
 8004ba4:	e7ec      	b.n	8004b80 <_malloc_r+0xb0>
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	6864      	ldr	r4, [r4, #4]
 8004baa:	e7ac      	b.n	8004b06 <_malloc_r+0x36>
 8004bac:	4634      	mov	r4, r6
 8004bae:	6876      	ldr	r6, [r6, #4]
 8004bb0:	e7b4      	b.n	8004b1c <_malloc_r+0x4c>
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	e7cc      	b.n	8004b50 <_malloc_r+0x80>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f000 f80e 	bl	8004bdc <__malloc_unlock>
 8004bc0:	e797      	b.n	8004af2 <_malloc_r+0x22>
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	e7dc      	b.n	8004b80 <_malloc_r+0xb0>
 8004bc6:	605b      	str	r3, [r3, #4]
 8004bc8:	deff      	udf	#255	; 0xff
 8004bca:	bf00      	nop
 8004bcc:	200002d8 	.word	0x200002d8

08004bd0 <__malloc_lock>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <__malloc_lock+0x8>)
 8004bd2:	f7ff bf0f 	b.w	80049f4 <__retarget_lock_acquire_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	200002d4 	.word	0x200002d4

08004bdc <__malloc_unlock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	; (8004be4 <__malloc_unlock+0x8>)
 8004bde:	f7ff bf0a 	b.w	80049f6 <__retarget_lock_release_recursive>
 8004be2:	bf00      	nop
 8004be4:	200002d4 	.word	0x200002d4

08004be8 <__ssputs_r>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	688e      	ldr	r6, [r1, #8]
 8004bee:	461f      	mov	r7, r3
 8004bf0:	42be      	cmp	r6, r7
 8004bf2:	680b      	ldr	r3, [r1, #0]
 8004bf4:	4682      	mov	sl, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4690      	mov	r8, r2
 8004bfa:	d82c      	bhi.n	8004c56 <__ssputs_r+0x6e>
 8004bfc:	898a      	ldrh	r2, [r1, #12]
 8004bfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c02:	d026      	beq.n	8004c52 <__ssputs_r+0x6a>
 8004c04:	6965      	ldr	r5, [r4, #20]
 8004c06:	6909      	ldr	r1, [r1, #16]
 8004c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c0c:	eba3 0901 	sub.w	r9, r3, r1
 8004c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c14:	1c7b      	adds	r3, r7, #1
 8004c16:	444b      	add	r3, r9
 8004c18:	106d      	asrs	r5, r5, #1
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	bf38      	it	cc
 8004c1e:	461d      	movcc	r5, r3
 8004c20:	0553      	lsls	r3, r2, #21
 8004c22:	d527      	bpl.n	8004c74 <__ssputs_r+0x8c>
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7ff ff53 	bl	8004ad0 <_malloc_r>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b360      	cbz	r0, 8004c88 <__ssputs_r+0xa0>
 8004c2e:	6921      	ldr	r1, [r4, #16]
 8004c30:	464a      	mov	r2, r9
 8004c32:	f000 faeb 	bl	800520c <memcpy>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	6126      	str	r6, [r4, #16]
 8004c44:	6165      	str	r5, [r4, #20]
 8004c46:	444e      	add	r6, r9
 8004c48:	eba5 0509 	sub.w	r5, r5, r9
 8004c4c:	6026      	str	r6, [r4, #0]
 8004c4e:	60a5      	str	r5, [r4, #8]
 8004c50:	463e      	mov	r6, r7
 8004c52:	42be      	cmp	r6, r7
 8004c54:	d900      	bls.n	8004c58 <__ssputs_r+0x70>
 8004c56:	463e      	mov	r6, r7
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	f000 faab 	bl	80051b8 <memmove>
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	1b9b      	subs	r3, r3, r6
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	4433      	add	r3, r6
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	462a      	mov	r2, r5
 8004c76:	f000 fad7 	bl	8005228 <_realloc_r>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d1e0      	bne.n	8004c42 <__ssputs_r+0x5a>
 8004c80:	6921      	ldr	r1, [r4, #16]
 8004c82:	4650      	mov	r0, sl
 8004c84:	f7ff feb8 	bl	80049f8 <_free_r>
 8004c88:	230c      	movs	r3, #12
 8004c8a:	f8ca 3000 	str.w	r3, [sl]
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	e7e9      	b.n	8004c70 <__ssputs_r+0x88>

08004c9c <_svfiprintf_r>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	4698      	mov	r8, r3
 8004ca2:	898b      	ldrh	r3, [r1, #12]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	b09d      	sub	sp, #116	; 0x74
 8004ca8:	4607      	mov	r7, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	4614      	mov	r4, r2
 8004cae:	d50e      	bpl.n	8004cce <_svfiprintf_r+0x32>
 8004cb0:	690b      	ldr	r3, [r1, #16]
 8004cb2:	b963      	cbnz	r3, 8004cce <_svfiprintf_r+0x32>
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	f7ff ff0b 	bl	8004ad0 <_malloc_r>
 8004cba:	6028      	str	r0, [r5, #0]
 8004cbc:	6128      	str	r0, [r5, #16]
 8004cbe:	b920      	cbnz	r0, 8004cca <_svfiprintf_r+0x2e>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e0d0      	b.n	8004e6c <_svfiprintf_r+0x1d0>
 8004cca:	2340      	movs	r3, #64	; 0x40
 8004ccc:	616b      	str	r3, [r5, #20]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cdc:	2330      	movs	r3, #48	; 0x30
 8004cde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e84 <_svfiprintf_r+0x1e8>
 8004ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ce6:	f04f 0901 	mov.w	r9, #1
 8004cea:	4623      	mov	r3, r4
 8004cec:	469a      	mov	sl, r3
 8004cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf2:	b10a      	cbz	r2, 8004cf8 <_svfiprintf_r+0x5c>
 8004cf4:	2a25      	cmp	r2, #37	; 0x25
 8004cf6:	d1f9      	bne.n	8004cec <_svfiprintf_r+0x50>
 8004cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cfc:	d00b      	beq.n	8004d16 <_svfiprintf_r+0x7a>
 8004cfe:	465b      	mov	r3, fp
 8004d00:	4622      	mov	r2, r4
 8004d02:	4629      	mov	r1, r5
 8004d04:	4638      	mov	r0, r7
 8004d06:	f7ff ff6f 	bl	8004be8 <__ssputs_r>
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	f000 80a9 	beq.w	8004e62 <_svfiprintf_r+0x1c6>
 8004d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d12:	445a      	add	r2, fp
 8004d14:	9209      	str	r2, [sp, #36]	; 0x24
 8004d16:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80a1 	beq.w	8004e62 <_svfiprintf_r+0x1c6>
 8004d20:	2300      	movs	r3, #0
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d2a:	f10a 0a01 	add.w	sl, sl, #1
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	9307      	str	r3, [sp, #28]
 8004d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d36:	931a      	str	r3, [sp, #104]	; 0x68
 8004d38:	4654      	mov	r4, sl
 8004d3a:	2205      	movs	r2, #5
 8004d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d40:	4850      	ldr	r0, [pc, #320]	; (8004e84 <_svfiprintf_r+0x1e8>)
 8004d42:	f7fb fa45 	bl	80001d0 <memchr>
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	b9d8      	cbnz	r0, 8004d82 <_svfiprintf_r+0xe6>
 8004d4a:	06d0      	lsls	r0, r2, #27
 8004d4c:	bf44      	itt	mi
 8004d4e:	2320      	movmi	r3, #32
 8004d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d54:	0711      	lsls	r1, r2, #28
 8004d56:	bf44      	itt	mi
 8004d58:	232b      	movmi	r3, #43	; 0x2b
 8004d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d62:	2b2a      	cmp	r3, #42	; 0x2a
 8004d64:	d015      	beq.n	8004d92 <_svfiprintf_r+0xf6>
 8004d66:	9a07      	ldr	r2, [sp, #28]
 8004d68:	4654      	mov	r4, sl
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f04f 0c0a 	mov.w	ip, #10
 8004d70:	4621      	mov	r1, r4
 8004d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d76:	3b30      	subs	r3, #48	; 0x30
 8004d78:	2b09      	cmp	r3, #9
 8004d7a:	d94d      	bls.n	8004e18 <_svfiprintf_r+0x17c>
 8004d7c:	b1b0      	cbz	r0, 8004dac <_svfiprintf_r+0x110>
 8004d7e:	9207      	str	r2, [sp, #28]
 8004d80:	e014      	b.n	8004dac <_svfiprintf_r+0x110>
 8004d82:	eba0 0308 	sub.w	r3, r0, r8
 8004d86:	fa09 f303 	lsl.w	r3, r9, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	46a2      	mov	sl, r4
 8004d90:	e7d2      	b.n	8004d38 <_svfiprintf_r+0x9c>
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	1d19      	adds	r1, r3, #4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	9103      	str	r1, [sp, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfbb      	ittet	lt
 8004d9e:	425b      	neglt	r3, r3
 8004da0:	f042 0202 	orrlt.w	r2, r2, #2
 8004da4:	9307      	strge	r3, [sp, #28]
 8004da6:	9307      	strlt	r3, [sp, #28]
 8004da8:	bfb8      	it	lt
 8004daa:	9204      	strlt	r2, [sp, #16]
 8004dac:	7823      	ldrb	r3, [r4, #0]
 8004dae:	2b2e      	cmp	r3, #46	; 0x2e
 8004db0:	d10c      	bne.n	8004dcc <_svfiprintf_r+0x130>
 8004db2:	7863      	ldrb	r3, [r4, #1]
 8004db4:	2b2a      	cmp	r3, #42	; 0x2a
 8004db6:	d134      	bne.n	8004e22 <_svfiprintf_r+0x186>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	1d1a      	adds	r2, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9203      	str	r2, [sp, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bfb8      	it	lt
 8004dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dc8:	3402      	adds	r4, #2
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e94 <_svfiprintf_r+0x1f8>
 8004dd0:	7821      	ldrb	r1, [r4, #0]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	f7fb f9fb 	bl	80001d0 <memchr>
 8004dda:	b138      	cbz	r0, 8004dec <_svfiprintf_r+0x150>
 8004ddc:	9b04      	ldr	r3, [sp, #16]
 8004dde:	eba0 000a 	sub.w	r0, r0, sl
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	4082      	lsls	r2, r0
 8004de6:	4313      	orrs	r3, r2
 8004de8:	3401      	adds	r4, #1
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df0:	4825      	ldr	r0, [pc, #148]	; (8004e88 <_svfiprintf_r+0x1ec>)
 8004df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004df6:	2206      	movs	r2, #6
 8004df8:	f7fb f9ea 	bl	80001d0 <memchr>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d038      	beq.n	8004e72 <_svfiprintf_r+0x1d6>
 8004e00:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <_svfiprintf_r+0x1f0>)
 8004e02:	bb1b      	cbnz	r3, 8004e4c <_svfiprintf_r+0x1b0>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	3307      	adds	r3, #7
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e12:	4433      	add	r3, r6
 8004e14:	9309      	str	r3, [sp, #36]	; 0x24
 8004e16:	e768      	b.n	8004cea <_svfiprintf_r+0x4e>
 8004e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e7a6      	b.n	8004d70 <_svfiprintf_r+0xd4>
 8004e22:	2300      	movs	r3, #0
 8004e24:	3401      	adds	r4, #1
 8004e26:	9305      	str	r3, [sp, #20]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f04f 0c0a 	mov.w	ip, #10
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e34:	3a30      	subs	r2, #48	; 0x30
 8004e36:	2a09      	cmp	r2, #9
 8004e38:	d903      	bls.n	8004e42 <_svfiprintf_r+0x1a6>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c6      	beq.n	8004dcc <_svfiprintf_r+0x130>
 8004e3e:	9105      	str	r1, [sp, #20]
 8004e40:	e7c4      	b.n	8004dcc <_svfiprintf_r+0x130>
 8004e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e46:	4604      	mov	r4, r0
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e7f0      	b.n	8004e2e <_svfiprintf_r+0x192>
 8004e4c:	ab03      	add	r3, sp, #12
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <_svfiprintf_r+0x1f4>)
 8004e54:	a904      	add	r1, sp, #16
 8004e56:	4638      	mov	r0, r7
 8004e58:	f3af 8000 	nop.w
 8004e5c:	1c42      	adds	r2, r0, #1
 8004e5e:	4606      	mov	r6, r0
 8004e60:	d1d6      	bne.n	8004e10 <_svfiprintf_r+0x174>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	065b      	lsls	r3, r3, #25
 8004e66:	f53f af2d 	bmi.w	8004cc4 <_svfiprintf_r+0x28>
 8004e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e6c:	b01d      	add	sp, #116	; 0x74
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	ab03      	add	r3, sp, #12
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	462a      	mov	r2, r5
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <_svfiprintf_r+0x1f4>)
 8004e7a:	a904      	add	r1, sp, #16
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f000 f879 	bl	8004f74 <_printf_i>
 8004e82:	e7eb      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e84:	0800530c 	.word	0x0800530c
 8004e88:	08005316 	.word	0x08005316
 8004e8c:	00000000 	.word	0x00000000
 8004e90:	08004be9 	.word	0x08004be9
 8004e94:	08005312 	.word	0x08005312

08004e98 <_printf_common>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	4699      	mov	r9, r3
 8004ea0:	688a      	ldr	r2, [r1, #8]
 8004ea2:	690b      	ldr	r3, [r1, #16]
 8004ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bfb8      	it	lt
 8004eac:	4613      	movlt	r3, r2
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_printf_common+0x26>
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	0699      	lsls	r1, r3, #26
 8004ec2:	bf42      	ittt	mi
 8004ec4:	6833      	ldrmi	r3, [r6, #0]
 8004ec6:	3302      	addmi	r3, #2
 8004ec8:	6033      	strmi	r3, [r6, #0]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	f015 0506 	ands.w	r5, r5, #6
 8004ed0:	d106      	bne.n	8004ee0 <_printf_common+0x48>
 8004ed2:	f104 0a19 	add.w	sl, r4, #25
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	6832      	ldr	r2, [r6, #0]
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dc26      	bgt.n	8004f2e <_printf_common+0x96>
 8004ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ee4:	1e13      	subs	r3, r2, #0
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	0692      	lsls	r2, r2, #26
 8004eee:	d42b      	bmi.n	8004f48 <_printf_common+0xb0>
 8004ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d01e      	beq.n	8004f3c <_printf_common+0xa4>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	f003 0306 	and.w	r3, r3, #6
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	bf02      	ittt	eq
 8004f0a:	68e5      	ldreq	r5, [r4, #12]
 8004f0c:	6833      	ldreq	r3, [r6, #0]
 8004f0e:	1aed      	subeq	r5, r5, r3
 8004f10:	68a3      	ldr	r3, [r4, #8]
 8004f12:	bf0c      	ite	eq
 8004f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f18:	2500      	movne	r5, #0
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bfc4      	itt	gt
 8004f1e:	1a9b      	subgt	r3, r3, r2
 8004f20:	18ed      	addgt	r5, r5, r3
 8004f22:	2600      	movs	r6, #0
 8004f24:	341a      	adds	r4, #26
 8004f26:	42b5      	cmp	r5, r6
 8004f28:	d11a      	bne.n	8004f60 <_printf_common+0xc8>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e008      	b.n	8004f40 <_printf_common+0xa8>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4652      	mov	r2, sl
 8004f32:	4649      	mov	r1, r9
 8004f34:	4638      	mov	r0, r7
 8004f36:	47c0      	blx	r8
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d103      	bne.n	8004f44 <_printf_common+0xac>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	3501      	adds	r5, #1
 8004f46:	e7c6      	b.n	8004ed6 <_printf_common+0x3e>
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	2030      	movs	r0, #48	; 0x30
 8004f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f52:	4422      	add	r2, r4
 8004f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	e7c7      	b.n	8004ef0 <_printf_common+0x58>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4622      	mov	r2, r4
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d0e6      	beq.n	8004f3c <_printf_common+0xa4>
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7d9      	b.n	8004f26 <_printf_common+0x8e>
	...

08004f74 <_printf_i>:
 8004f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	7e0f      	ldrb	r7, [r1, #24]
 8004f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f7c:	2f78      	cmp	r7, #120	; 0x78
 8004f7e:	4691      	mov	r9, r2
 8004f80:	4680      	mov	r8, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	469a      	mov	sl, r3
 8004f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f8a:	d807      	bhi.n	8004f9c <_printf_i+0x28>
 8004f8c:	2f62      	cmp	r7, #98	; 0x62
 8004f8e:	d80a      	bhi.n	8004fa6 <_printf_i+0x32>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	f000 80d4 	beq.w	800513e <_printf_i+0x1ca>
 8004f96:	2f58      	cmp	r7, #88	; 0x58
 8004f98:	f000 80c0 	beq.w	800511c <_printf_i+0x1a8>
 8004f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fa4:	e03a      	b.n	800501c <_printf_i+0xa8>
 8004fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004faa:	2b15      	cmp	r3, #21
 8004fac:	d8f6      	bhi.n	8004f9c <_printf_i+0x28>
 8004fae:	a101      	add	r1, pc, #4	; (adr r1, 8004fb4 <_printf_i+0x40>)
 8004fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb4:	0800500d 	.word	0x0800500d
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004f9d 	.word	0x08004f9d
 8004fc0:	08004f9d 	.word	0x08004f9d
 8004fc4:	08004f9d 	.word	0x08004f9d
 8004fc8:	08004f9d 	.word	0x08004f9d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f9d 	.word	0x08004f9d
 8004fd4:	08004f9d 	.word	0x08004f9d
 8004fd8:	08004f9d 	.word	0x08004f9d
 8004fdc:	08004f9d 	.word	0x08004f9d
 8004fe0:	08005125 	.word	0x08005125
 8004fe4:	0800504d 	.word	0x0800504d
 8004fe8:	080050df 	.word	0x080050df
 8004fec:	08004f9d 	.word	0x08004f9d
 8004ff0:	08004f9d 	.word	0x08004f9d
 8004ff4:	08005147 	.word	0x08005147
 8004ff8:	08004f9d 	.word	0x08004f9d
 8004ffc:	0800504d 	.word	0x0800504d
 8005000:	08004f9d 	.word	0x08004f9d
 8005004:	08004f9d 	.word	0x08004f9d
 8005008:	080050e7 	.word	0x080050e7
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	602a      	str	r2, [r5, #0]
 8005014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800501c:	2301      	movs	r3, #1
 800501e:	e09f      	b.n	8005160 <_printf_i+0x1ec>
 8005020:	6820      	ldr	r0, [r4, #0]
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	0607      	lsls	r7, r0, #24
 8005026:	f103 0104 	add.w	r1, r3, #4
 800502a:	6029      	str	r1, [r5, #0]
 800502c:	d501      	bpl.n	8005032 <_printf_i+0xbe>
 800502e:	681e      	ldr	r6, [r3, #0]
 8005030:	e003      	b.n	800503a <_printf_i+0xc6>
 8005032:	0646      	lsls	r6, r0, #25
 8005034:	d5fb      	bpl.n	800502e <_printf_i+0xba>
 8005036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800503a:	2e00      	cmp	r6, #0
 800503c:	da03      	bge.n	8005046 <_printf_i+0xd2>
 800503e:	232d      	movs	r3, #45	; 0x2d
 8005040:	4276      	negs	r6, r6
 8005042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005046:	485a      	ldr	r0, [pc, #360]	; (80051b0 <_printf_i+0x23c>)
 8005048:	230a      	movs	r3, #10
 800504a:	e012      	b.n	8005072 <_printf_i+0xfe>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	1d19      	adds	r1, r3, #4
 8005052:	6029      	str	r1, [r5, #0]
 8005054:	0605      	lsls	r5, r0, #24
 8005056:	d501      	bpl.n	800505c <_printf_i+0xe8>
 8005058:	681e      	ldr	r6, [r3, #0]
 800505a:	e002      	b.n	8005062 <_printf_i+0xee>
 800505c:	0641      	lsls	r1, r0, #25
 800505e:	d5fb      	bpl.n	8005058 <_printf_i+0xe4>
 8005060:	881e      	ldrh	r6, [r3, #0]
 8005062:	4853      	ldr	r0, [pc, #332]	; (80051b0 <_printf_i+0x23c>)
 8005064:	2f6f      	cmp	r7, #111	; 0x6f
 8005066:	bf0c      	ite	eq
 8005068:	2308      	moveq	r3, #8
 800506a:	230a      	movne	r3, #10
 800506c:	2100      	movs	r1, #0
 800506e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005072:	6865      	ldr	r5, [r4, #4]
 8005074:	60a5      	str	r5, [r4, #8]
 8005076:	2d00      	cmp	r5, #0
 8005078:	bfa2      	ittt	ge
 800507a:	6821      	ldrge	r1, [r4, #0]
 800507c:	f021 0104 	bicge.w	r1, r1, #4
 8005080:	6021      	strge	r1, [r4, #0]
 8005082:	b90e      	cbnz	r6, 8005088 <_printf_i+0x114>
 8005084:	2d00      	cmp	r5, #0
 8005086:	d04b      	beq.n	8005120 <_printf_i+0x1ac>
 8005088:	4615      	mov	r5, r2
 800508a:	fbb6 f1f3 	udiv	r1, r6, r3
 800508e:	fb03 6711 	mls	r7, r3, r1, r6
 8005092:	5dc7      	ldrb	r7, [r0, r7]
 8005094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005098:	4637      	mov	r7, r6
 800509a:	42bb      	cmp	r3, r7
 800509c:	460e      	mov	r6, r1
 800509e:	d9f4      	bls.n	800508a <_printf_i+0x116>
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d10b      	bne.n	80050bc <_printf_i+0x148>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	07de      	lsls	r6, r3, #31
 80050a8:	d508      	bpl.n	80050bc <_printf_i+0x148>
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	4299      	cmp	r1, r3
 80050b0:	bfde      	ittt	le
 80050b2:	2330      	movle	r3, #48	; 0x30
 80050b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050bc:	1b52      	subs	r2, r2, r5
 80050be:	6122      	str	r2, [r4, #16]
 80050c0:	f8cd a000 	str.w	sl, [sp]
 80050c4:	464b      	mov	r3, r9
 80050c6:	aa03      	add	r2, sp, #12
 80050c8:	4621      	mov	r1, r4
 80050ca:	4640      	mov	r0, r8
 80050cc:	f7ff fee4 	bl	8004e98 <_printf_common>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d14a      	bne.n	800516a <_printf_i+0x1f6>
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	b004      	add	sp, #16
 80050da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	4833      	ldr	r0, [pc, #204]	; (80051b4 <_printf_i+0x240>)
 80050e8:	2778      	movs	r7, #120	; 0x78
 80050ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	6829      	ldr	r1, [r5, #0]
 80050f2:	061f      	lsls	r7, r3, #24
 80050f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f8:	d402      	bmi.n	8005100 <_printf_i+0x18c>
 80050fa:	065f      	lsls	r7, r3, #25
 80050fc:	bf48      	it	mi
 80050fe:	b2b6      	uxthmi	r6, r6
 8005100:	07df      	lsls	r7, r3, #31
 8005102:	bf48      	it	mi
 8005104:	f043 0320 	orrmi.w	r3, r3, #32
 8005108:	6029      	str	r1, [r5, #0]
 800510a:	bf48      	it	mi
 800510c:	6023      	strmi	r3, [r4, #0]
 800510e:	b91e      	cbnz	r6, 8005118 <_printf_i+0x1a4>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f023 0320 	bic.w	r3, r3, #32
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2310      	movs	r3, #16
 800511a:	e7a7      	b.n	800506c <_printf_i+0xf8>
 800511c:	4824      	ldr	r0, [pc, #144]	; (80051b0 <_printf_i+0x23c>)
 800511e:	e7e4      	b.n	80050ea <_printf_i+0x176>
 8005120:	4615      	mov	r5, r2
 8005122:	e7bd      	b.n	80050a0 <_printf_i+0x12c>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	6826      	ldr	r6, [r4, #0]
 8005128:	6961      	ldr	r1, [r4, #20]
 800512a:	1d18      	adds	r0, r3, #4
 800512c:	6028      	str	r0, [r5, #0]
 800512e:	0635      	lsls	r5, r6, #24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	d501      	bpl.n	8005138 <_printf_i+0x1c4>
 8005134:	6019      	str	r1, [r3, #0]
 8005136:	e002      	b.n	800513e <_printf_i+0x1ca>
 8005138:	0670      	lsls	r0, r6, #25
 800513a:	d5fb      	bpl.n	8005134 <_printf_i+0x1c0>
 800513c:	8019      	strh	r1, [r3, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	6123      	str	r3, [r4, #16]
 8005142:	4615      	mov	r5, r2
 8005144:	e7bc      	b.n	80050c0 <_printf_i+0x14c>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	602a      	str	r2, [r5, #0]
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	2100      	movs	r1, #0
 8005152:	4628      	mov	r0, r5
 8005154:	f7fb f83c 	bl	80001d0 <memchr>
 8005158:	b108      	cbz	r0, 800515e <_printf_i+0x1ea>
 800515a:	1b40      	subs	r0, r0, r5
 800515c:	6060      	str	r0, [r4, #4]
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	2300      	movs	r3, #0
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	e7aa      	b.n	80050c0 <_printf_i+0x14c>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	462a      	mov	r2, r5
 800516e:	4649      	mov	r1, r9
 8005170:	4640      	mov	r0, r8
 8005172:	47d0      	blx	sl
 8005174:	3001      	adds	r0, #1
 8005176:	d0ad      	beq.n	80050d4 <_printf_i+0x160>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	079b      	lsls	r3, r3, #30
 800517c:	d413      	bmi.n	80051a6 <_printf_i+0x232>
 800517e:	68e0      	ldr	r0, [r4, #12]
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	4298      	cmp	r0, r3
 8005184:	bfb8      	it	lt
 8005186:	4618      	movlt	r0, r3
 8005188:	e7a6      	b.n	80050d8 <_printf_i+0x164>
 800518a:	2301      	movs	r3, #1
 800518c:	4632      	mov	r2, r6
 800518e:	4649      	mov	r1, r9
 8005190:	4640      	mov	r0, r8
 8005192:	47d0      	blx	sl
 8005194:	3001      	adds	r0, #1
 8005196:	d09d      	beq.n	80050d4 <_printf_i+0x160>
 8005198:	3501      	adds	r5, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	9903      	ldr	r1, [sp, #12]
 800519e:	1a5b      	subs	r3, r3, r1
 80051a0:	42ab      	cmp	r3, r5
 80051a2:	dcf2      	bgt.n	800518a <_printf_i+0x216>
 80051a4:	e7eb      	b.n	800517e <_printf_i+0x20a>
 80051a6:	2500      	movs	r5, #0
 80051a8:	f104 0619 	add.w	r6, r4, #25
 80051ac:	e7f5      	b.n	800519a <_printf_i+0x226>
 80051ae:	bf00      	nop
 80051b0:	0800531d 	.word	0x0800531d
 80051b4:	0800532e 	.word	0x0800532e

080051b8 <memmove>:
 80051b8:	4288      	cmp	r0, r1
 80051ba:	b510      	push	{r4, lr}
 80051bc:	eb01 0402 	add.w	r4, r1, r2
 80051c0:	d902      	bls.n	80051c8 <memmove+0x10>
 80051c2:	4284      	cmp	r4, r0
 80051c4:	4623      	mov	r3, r4
 80051c6:	d807      	bhi.n	80051d8 <memmove+0x20>
 80051c8:	1e43      	subs	r3, r0, #1
 80051ca:	42a1      	cmp	r1, r4
 80051cc:	d008      	beq.n	80051e0 <memmove+0x28>
 80051ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051d6:	e7f8      	b.n	80051ca <memmove+0x12>
 80051d8:	4402      	add	r2, r0
 80051da:	4601      	mov	r1, r0
 80051dc:	428a      	cmp	r2, r1
 80051de:	d100      	bne.n	80051e2 <memmove+0x2a>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ea:	e7f7      	b.n	80051dc <memmove+0x24>

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fffa 	bl	80011f0 <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200002d0 	.word	0x200002d0

0800520c <memcpy>:
 800520c:	440a      	add	r2, r1
 800520e:	4291      	cmp	r1, r2
 8005210:	f100 33ff 	add.w	r3, r0, #4294967295
 8005214:	d100      	bne.n	8005218 <memcpy+0xc>
 8005216:	4770      	bx	lr
 8005218:	b510      	push	{r4, lr}
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005222:	4291      	cmp	r1, r2
 8005224:	d1f9      	bne.n	800521a <memcpy+0xe>
 8005226:	bd10      	pop	{r4, pc}

08005228 <_realloc_r>:
 8005228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522c:	4680      	mov	r8, r0
 800522e:	4614      	mov	r4, r2
 8005230:	460e      	mov	r6, r1
 8005232:	b921      	cbnz	r1, 800523e <_realloc_r+0x16>
 8005234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	4611      	mov	r1, r2
 800523a:	f7ff bc49 	b.w	8004ad0 <_malloc_r>
 800523e:	b92a      	cbnz	r2, 800524c <_realloc_r+0x24>
 8005240:	f7ff fbda 	bl	80049f8 <_free_r>
 8005244:	4625      	mov	r5, r4
 8005246:	4628      	mov	r0, r5
 8005248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800524c:	f000 f81b 	bl	8005286 <_malloc_usable_size_r>
 8005250:	4284      	cmp	r4, r0
 8005252:	4607      	mov	r7, r0
 8005254:	d802      	bhi.n	800525c <_realloc_r+0x34>
 8005256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800525a:	d812      	bhi.n	8005282 <_realloc_r+0x5a>
 800525c:	4621      	mov	r1, r4
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fc36 	bl	8004ad0 <_malloc_r>
 8005264:	4605      	mov	r5, r0
 8005266:	2800      	cmp	r0, #0
 8005268:	d0ed      	beq.n	8005246 <_realloc_r+0x1e>
 800526a:	42bc      	cmp	r4, r7
 800526c:	4622      	mov	r2, r4
 800526e:	4631      	mov	r1, r6
 8005270:	bf28      	it	cs
 8005272:	463a      	movcs	r2, r7
 8005274:	f7ff ffca 	bl	800520c <memcpy>
 8005278:	4631      	mov	r1, r6
 800527a:	4640      	mov	r0, r8
 800527c:	f7ff fbbc 	bl	80049f8 <_free_r>
 8005280:	e7e1      	b.n	8005246 <_realloc_r+0x1e>
 8005282:	4635      	mov	r5, r6
 8005284:	e7df      	b.n	8005246 <_realloc_r+0x1e>

08005286 <_malloc_usable_size_r>:
 8005286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528a:	1f18      	subs	r0, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	bfbc      	itt	lt
 8005290:	580b      	ldrlt	r3, [r1, r0]
 8005292:	18c0      	addlt	r0, r0, r3
 8005294:	4770      	bx	lr
	...

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
