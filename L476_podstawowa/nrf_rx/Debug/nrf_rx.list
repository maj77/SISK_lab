
nrf_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000524c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005470  08005470  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005478  08005478  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  080054dc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080054dc  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d736  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219e  00000000  00000000  0002d805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095b  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002693d  00000000  00000000  00030f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f250  00000000  00000000  00057888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea644  00000000  00000000  00066ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003648  00000000  00000000  0015111c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00154764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053c4 	.word	0x080053c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080053c4 	.word	0x080053c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <MX_GPIO_Init+0x130>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a45      	ldr	r2, [pc, #276]	; (800069c <MX_GPIO_Init+0x130>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b43      	ldr	r3, [pc, #268]	; (800069c <MX_GPIO_Init+0x130>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b40      	ldr	r3, [pc, #256]	; (800069c <MX_GPIO_Init+0x130>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a3f      	ldr	r2, [pc, #252]	; (800069c <MX_GPIO_Init+0x130>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b3d      	ldr	r3, [pc, #244]	; (800069c <MX_GPIO_Init+0x130>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b3a      	ldr	r3, [pc, #232]	; (800069c <MX_GPIO_Init+0x130>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a39      	ldr	r2, [pc, #228]	; (800069c <MX_GPIO_Init+0x130>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <MX_GPIO_Init+0x130>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <MX_GPIO_Init+0x130>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a33      	ldr	r2, [pc, #204]	; (800069c <MX_GPIO_Init+0x130>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b31      	ldr	r3, [pc, #196]	; (800069c <MX_GPIO_Init+0x130>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 fa3b 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	482b      	ldr	r0, [pc, #172]	; (80006a0 <MX_GPIO_Init+0x134>)
 80005f4:	f001 fa36 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	4829      	ldr	r0, [pc, #164]	; (80006a4 <MX_GPIO_Init+0x138>)
 80005fe:	f001 fa31 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000608:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4821      	ldr	r0, [pc, #132]	; (80006a0 <MX_GPIO_Init+0x134>)
 800061a:	f001 f879 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061e:	2320      	movs	r3, #32
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f001 f86a 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_GPIO_Init+0x134>)
 8000654:	f001 f85c 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f001 f84d 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_GPIO_Init+0x138>)
 800068e:	f001 f83f 	bl	8001710 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000800 	.word	0x48000800
 80006a4:	48000400 	.word	0x48000400

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 feaa 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f840 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f7ff ff5a 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b8:	f000 fdee 	bl	8001298 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80006bc:	f000 fcb6 	bl	800102c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi2);
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <main+0x6c>)
 80006c2:	f000 fc5d 	bl	8000f80 <nRF24_Init>
  nRF24_SetRXAddress(0, "Odb0");
 80006c6:	4914      	ldr	r1, [pc, #80]	; (8000718 <main+0x70>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fb34 	bl	8000d36 <nRF24_SetRXAddress>
  nRF24_SetTXAddress("Nad0");
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0x74>)
 80006d0:	f000 fb6a 	bl	8000da8 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 80006d4:	f000 f952 	bl	800097c <nRF24_RX_Mode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(nRF24_RXAvailible())
 80006d8:	f000 fc32 	bl	8000f40 <nRF24_RXAvailible>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0fa      	beq.n	80006d8 <main+0x30>
	  {
		  nRF24_ReadRXPaylaod(Nrf24_Message);
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <main+0x78>)
 80006e4:	f000 fc10 	bl	8000f08 <nRF24_ReadRXPaylaod>
		  MessageLength = sprintf(Message, "%c\n\r", Nrf24_Message[0]);
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <main+0x78>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <main+0x7c>)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <main+0x80>)
 80006f2:	f004 f9c3 	bl	8004a7c <siprintf>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0x84>)
 80006fc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <main+0x84>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b29a      	uxth	r2, r3
 8000704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <main+0x80>)
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <main+0x88>)
 800070c:	f003 fc5e 	bl	8003fcc <HAL_UART_Transmit>
	  if(nRF24_RXAvailible())
 8000710:	e7e2      	b.n	80006d8 <main+0x30>
 8000712:	bf00      	nop
 8000714:	200000ac 	.word	0x200000ac
 8000718:	080053dc 	.word	0x080053dc
 800071c:	080053e4 	.word	0x080053e4
 8000720:	2000007c 	.word	0x2000007c
 8000724:	080053ec 	.word	0x080053ec
 8000728:	20000080 	.word	0x20000080
 800072c:	200000a0 	.word	0x200000a0
 8000730:	20000114 	.word	0x20000114

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	; 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 f9ba 	bl	8004abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075a:	f001 f9a9 	bl	8001ab0 <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 f837 	bl	80007d6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9e0 	bl	8001b5c <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007a2:	f000 f818 	bl	80007d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fda8 	bl	8002314 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ca:	f000 f804 	bl	80007d6 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007da:	b672      	cpsid	i
}
 80007dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007de:	e7fe      	b.n	80007de <Error_Handler+0x8>

080007e0 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fe86 	bl	80014fc <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <nRF24_SendSpi+0x28>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	b29a      	uxth	r2, r3
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	f002 fd02 	bl	800321a <HAL_SPI_Transmit>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000a4 	.word	0x200000a4

08000824 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <nRF24_ReadSpi+0x28>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	b29a      	uxth	r2, r3
 8000838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	f002 fe61 	bl	8003504 <HAL_SPI_Receive>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000a4 	.word	0x200000a4

08000850 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800085e:	2200      	movs	r2, #0
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <nRF24_ReadRegister+0x44>)
 8000864:	f001 f8fe 	bl	8001a64 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffc3 	bl	80007f8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000872:	f107 030f 	add.w	r3, r7, #15
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffd3 	bl	8000824 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800087e:	2201      	movs	r2, #1
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <nRF24_ReadRegister+0x44>)
 8000884:	f001 f8ee 	bl	8001a64 <HAL_GPIO_WritePin>

	return result;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	48000800 	.word	0x48000800

08000898 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80008ac:	2200      	movs	r2, #0
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <nRF24_ReadRegisters+0x44>)
 80008b2:	f001 f8d7 	bl	8001a64 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff9c 	bl	80007f8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	4619      	mov	r1, r3
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f7ff ffad 	bl	8000824 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80008ca:	2201      	movs	r2, #1
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <nRF24_ReadRegisters+0x44>)
 80008d0:	f001 f8c8 	bl	8001a64 <HAL_GPIO_WritePin>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	48000800 	.word	0x48000800

080008e0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <nRF24_WriteRegister+0x48>)
 8000904:	f001 f8ae 	bl	8001a64 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff72 	bl	80007f8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000914:	2201      	movs	r2, #1
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <nRF24_WriteRegister+0x48>)
 800091a:	f001 f8a3 	bl	8001a64 <HAL_GPIO_WritePin>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	48000800 	.word	0x48000800

0800092c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	b2db      	uxtb	r3, r3
 8000944:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000946:	2200      	movs	r2, #0
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <nRF24_WriteRegisters+0x4c>)
 800094c:	f001 f88a 	bl	8001a64 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff4f 	bl	80007f8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4619      	mov	r1, r3
 800095e:	6838      	ldr	r0, [r7, #0]
 8000960:	f7ff ff4a 	bl	80007f8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000964:	2201      	movs	r2, #1
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <nRF24_WriteRegisters+0x4c>)
 800096a:	f001 f87b 	bl	8001a64 <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	48000800 	.word	0x48000800

0800097c <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8000982:	f000 f829 	bl	80009d8 <nRF24_ReadConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 800098a:	4911      	ldr	r1, [pc, #68]	; (80009d0 <nRF24_RX_Mode+0x54>)
 800098c:	2000      	movs	r0, #0
 800098e:	f000 f9d2 	bl	8000d36 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f81f 	bl	80009e8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80009aa:	2070      	movs	r0, #112	; 0x70
 80009ac:	f000 f877 	bl	8000a9e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80009b0:	f000 f884 	bl	8000abc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80009b4:	f000 f89c 	bl	8000af0 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80009b8:	2201      	movs	r2, #1
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <nRF24_RX_Mode+0x58>)
 80009be:	f001 f851 	bl	8001a64 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff ff0c 	bl	80007e0 <nRF24_Delay>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	48000400 	.word	0x48000400

080009d8 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff ff37 	bl	8000850 <nRF24_ReadRegister>
 80009e2:	4603      	mov	r3, r0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff ff72 	bl	80008e0 <nRF24_WriteRegister>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f7ff ff1e 	bl	8000850 <nRF24_ReadRegister>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	f023 0307 	bic.w	r3, r3, #7
 8000a1e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b25a      	sxtb	r2, r3
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4619      	mov	r1, r3
 8000a34:	2006      	movs	r0, #6
 8000a36:	f7ff ff53 	bl	80008e0 <nRF24_WriteRegister>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f7ff feff 	bl	8000850 <nRF24_ReadRegister>
 8000a52:	4603      	mov	r3, r0
 8000a54:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a5c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d104      	bne.n	8000a6e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e006      	b.n	8000a7c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d103      	bne.n	8000a7c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2006      	movs	r0, #6
 8000a82:	f7ff ff2d 	bl	80008e0 <nRF24_WriteRegister>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000a92:	2007      	movs	r0, #7
 8000a94:	f7ff fedc 	bl	8000850 <nRF24_ReadRegister>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2007      	movs	r0, #7
 8000aae:	f7ff ff17 	bl	80008e0 <nRF24_WriteRegister>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000ac2:	23e2      	movs	r3, #226	; 0xe2
 8000ac4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <nRF24_FlushRX+0x30>)
 8000acc:	f000 ffca 	bl	8001a64 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe8f 	bl	80007f8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000ada:	2201      	movs	r2, #1
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <nRF24_FlushRX+0x30>)
 8000ae0:	f000 ffc0 	bl	8001a64 <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	48000800 	.word	0x48000800

08000af0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000af6:	23e1      	movs	r3, #225	; 0xe1
 8000af8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <nRF24_FlushTX+0x30>)
 8000b00:	f000 ffb0 	bl	8001a64 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	2101      	movs	r1, #1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe75 	bl	80007f8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <nRF24_FlushTX+0x30>)
 8000b14:	f000 ffa6 	bl	8001a64 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	48000800 	.word	0x48000800

08000b24 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000b2e:	f7ff ff53 	bl	80009d8 <nRF24_ReadConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e003      	b.n	8000b4e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f023 0308 	bic.w	r3, r3, #8
 8000b4c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff49 	bl	80009e8 <nRF24_WriteConfig>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000b68:	f7ff ff36 	bl	80009d8 <nRF24_ReadConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d104      	bne.n	8000b80 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	73fb      	strb	r3, [r7, #15]
 8000b7e:	e003      	b.n	8000b88 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	f023 0304 	bic.w	r3, r3, #4
 8000b86:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff2c 	bl	80009e8 <nRF24_WriteConfig>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	b25a      	sxtb	r2, r3
 8000bae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f7ff fe8d 	bl	80008e0 <nRF24_WriteRegister>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	2005      	movs	r0, #5
 8000be4:	f7ff fe7c 	bl	80008e0 <nRF24_WriteRegister>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d901      	bls.n	8000c0a <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000c06:	2305      	movs	r3, #5
 8000c08:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3311      	adds	r3, #17
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	f7ff fe60 	bl	80008e0 <nRF24_WriteRegister>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d901      	bls.n	8000c42 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000c3e:	2305      	movs	r3, #5
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff fe04 	bl	8000850 <nRF24_ReadRegister>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d10a      	bne.n	8000c68 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2201      	movs	r2, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	b25a      	sxtb	r2, r3
 8000c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e00b      	b.n	8000c80 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	b25a      	sxtb	r2, r3
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	4619      	mov	r1, r3
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fe2b 	bl	80008e0 <nRF24_WriteRegister>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	460a      	mov	r2, r1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b05      	cmp	r3, #5
 8000ca6:	d901      	bls.n	8000cac <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000ca8:	2305      	movs	r3, #5
 8000caa:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff fdcf 	bl	8000850 <nRF24_ReadRegister>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d10a      	bne.n	8000cd2 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	b25a      	sxtb	r2, r3
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e00b      	b.n	8000cea <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	b25a      	sxtb	r2, r3
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	4619      	mov	r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fdf6 	bl	80008e0 <nRF24_WriteRegister>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d901      	bls.n	8000d10 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d801      	bhi.n	8000d1a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000d16:	2303      	movs	r3, #3
 8000d18:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	3b02      	subs	r3, #2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f7ff fdd9 	bl	80008e0 <nRF24_WriteRegister>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	6039      	str	r1, [r7, #0]
 8000d40:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <nRF24_SetRXAddress+0x18>
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d11d      	bne.n	8000d8a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e00d      	b.n	8000d70 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	441a      	add	r2, r3
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f1c3 0302 	rsb	r3, r3, #2
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	3310      	adds	r3, #16
 8000d64:	443b      	add	r3, r7
 8000d66:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d9ee      	bls.n	8000d54 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	330a      	adds	r3, #10
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f107 010c 	add.w	r1, r7, #12
 8000d80:	2203      	movs	r2, #3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fdd2 	bl	800092c <nRF24_WriteRegisters>
	{
 8000d88:	e00a      	b.n	8000da0 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	330a      	adds	r3, #10
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3302      	adds	r3, #2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	f7ff fda1 	bl	80008e0 <nRF24_WriteRegister>
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2203      	movs	r2, #3
 8000db6:	4619      	mov	r1, r3
 8000db8:	200a      	movs	r0, #10
 8000dba:	f7ff fd6d 	bl	8000898 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e00c      	b.n	8000dde <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000dc4:	7bfa      	ldrb	r2, [r7, #15]
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f1c3 0302 	rsb	r3, r3, #2
 8000dcc:	3210      	adds	r2, #16
 8000dce:	443a      	add	r2, r7
 8000dd0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8000dd4:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <nRF24_SetTXAddress+0x88>)
 8000dd6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d9ef      	bls.n	8000dc4 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e00d      	b.n	8000e06 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	441a      	add	r2, r3
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	f1c3 0302 	rsb	r3, r3, #2
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	3310      	adds	r3, #16
 8000dfa:	443b      	add	r3, r7
 8000dfc:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	3301      	adds	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d9ee      	bls.n	8000dea <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2203      	movs	r2, #3
 8000e12:	4619      	mov	r1, r3
 8000e14:	200a      	movs	r0, #10
 8000e16:	f7ff fd89 	bl	800092c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2203      	movs	r2, #3
 8000e20:	4619      	mov	r1, r3
 8000e22:	2010      	movs	r0, #16
 8000e24:	f7ff fd82 	bl	800092c <nRF24_WriteRegisters>

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000a8 	.word	0x200000a8

08000e34 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8000e3a:	f7ff fe28 	bl	8000a8e <nRF24_ReadStatus>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000e48:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe26 	bl	8000a9e <nRF24_WriteStatus>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e64:	f7ff fdb8 	bl	80009d8 <nRF24_ReadConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d104      	bne.n	8000e7c <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e003      	b.n	8000e84 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e82:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fdae 	bl	80009e8 <nRF24_WriteConfig>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e9e:	f7ff fd9b 	bl	80009d8 <nRF24_ReadConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f043 0320 	orr.w	r3, r3, #32
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e003      	b.n	8000ebe <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f023 0320 	bic.w	r3, r3, #32
 8000ebc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fd91 	bl	80009e8 <nRF24_WriteConfig>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000ed8:	f7ff fd7e 	bl	80009d8 <nRF24_ReadConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d104      	bne.n	8000ef0 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e003      	b.n	8000ef8 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f023 0310 	bic.w	r3, r3, #16
 8000ef6:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd74 	bl	80009e8 <nRF24_WriteConfig>
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8000f10:	2201      	movs	r2, #1
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	2061      	movs	r0, #97	; 0x61
 8000f16:	f7ff fcbf 	bl	8000898 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f7ff fcdf 	bl	80008e0 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8000f22:	f7ff fdb4 	bl	8000a8e <nRF24_ReadStatus>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8000f30:	2120      	movs	r1, #32
 8000f32:	2007      	movs	r0, #7
 8000f34:	f7ff fcd4 	bl	80008e0 <nRF24_WriteRegister>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8000f46:	f7ff fda2 	bl	8000a8e <nRF24_ReadStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <nRF24_RXAvailible+0x3c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fd98 	bl	8000a9e <nRF24_WriteStatus>
		return 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000078 	.word	0x20000078

08000f80 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <nRF24_Init+0xa0>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <nRF24_Init+0xa4>)
 8000f94:	f000 fd66 	bl	8001a64 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	4822      	ldr	r0, [pc, #136]	; (8001028 <nRF24_Init+0xa8>)
 8000f9e:	f000 fd61 	bl	8001a64 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8000fa2:	2005      	movs	r0, #5
 8000fa4:	f7ff fc1c 	bl	80007e0 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f7ff fd2b 	bl	8000a04 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f7ff fd47 	bl	8000a42 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff fdb5 	bl	8000b24 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fdcf 	bl	8000b5e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8000fc0:	2107      	movs	r1, #7
 8000fc2:	2004      	movs	r0, #4
 8000fc4:	f7ff fde8 	bl	8000b98 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201c      	movs	r0, #28
 8000fcc:	f7ff fc88 	bl	80008e0 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f7ff fdfc 	bl	8000bce <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fe09 	bl	8000bf0 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fe21 	bl	8000c28 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fe52 	bl	8000c92 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f7ff fe84 	bl	8000cfc <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff fbf3 	bl	80007e0 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ff2d 	bl	8000e5a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff ff47 	bl	8000e94 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ff61 	bl	8000ece <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 800100c:	2014      	movs	r0, #20
 800100e:	f7ff fbe7 	bl	80007e0 <nRF24_Delay>

	nRF24_ClearInterrupts();
 8001012:	f7ff ff0f 	bl	8000e34 <nRF24_ClearInterrupts>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000a4 	.word	0x200000a4
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800

0800102c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <MX_SPI2_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001046:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800104a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_SPI2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_SPI2_Init+0x74>)
 800105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001062:	2218      	movs	r2, #24
 8001064:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_SPI2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SPI2_Init+0x74>)
 800107a:	2207      	movs	r2, #7
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001086:	2208      	movs	r2, #8
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_SPI2_Init+0x74>)
 800108c:	f002 f822 	bl	80030d4 <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001096:	f7ff fb9e 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000ac 	.word	0x200000ac
 80010a4:	40003800 	.word	0x40003800

080010a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_SPI_MspInit+0xb4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d144      	bne.n	8001154 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	4a24      	ldr	r2, [pc, #144]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6593      	str	r3, [r2, #88]	; 0x58
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_SPI_MspInit+0xb8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001112:	230c      	movs	r3, #12
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <HAL_SPI_MspInit+0xbc>)
 800112e:	f000 faef 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001144:	2305      	movs	r3, #5
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <HAL_SPI_MspInit+0xc0>)
 8001150:	f000 fade 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40003800 	.word	0x40003800
 8001160:	40021000 	.word	0x40021000
 8001164:	48000800 	.word	0x48000800
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x44>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_MspInit+0x44>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6613      	str	r3, [r2, #96]	; 0x60
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x44>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x44>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x44>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x44>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f95c 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f003 fc48 	bl	8004acc <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20018000 	.word	0x20018000
 8001268:	00000400 	.word	0x00000400
 800126c:	20000110 	.word	0x20000110
 8001270:	200002e8 	.word	0x200002e8

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_USART2_UART_Init+0x5c>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART2_UART_Init+0x58>)
 80012dc:	f002 fe28 	bl	8003f30 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012e6:	f7ff fa76 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000114 	.word	0x20000114
 80012f4:	40004400 	.word	0x40004400

080012f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0ac      	sub	sp, #176	; 0xb0
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2288      	movs	r2, #136	; 0x88
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fbcf 	bl	8004abc <memset>
  if(uartHandle->Instance==USART2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_UART_MspInit+0xb0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d13b      	bne.n	80013a0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001328:	2302      	movs	r3, #2
 800132a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800132c:	2300      	movs	r3, #0
 800132e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fa11 	bl	800275c <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001340:	f7ff fa49 	bl	80007d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_UART_MspInit+0xb4>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_UART_MspInit+0xb4>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134e:	6593      	str	r3, [r2, #88]	; 0x58
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_UART_MspInit+0xb4>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_UART_MspInit+0xb4>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_UART_MspInit+0xb4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_UART_MspInit+0xb4>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001374:	230c      	movs	r3, #12
 8001376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138c:	2307      	movs	r3, #7
 800138e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f000 f9b8 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	37b0      	adds	r7, #176	; 0xb0
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40021000 	.word	0x40021000

080013b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b4:	f7ff ff5e 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f003 fb7b 	bl	8004ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e2:	f7ff f961 	bl	80006a8 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013f4:	08005480 	.word	0x08005480
  ldr r2, =_sbss
 80013f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013fc:	200002e8 	.word	0x200002e8

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>
	...

08001404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_Init+0x3c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_Init+0x3c>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141a:	2003      	movs	r0, #3
 800141c:	f000 f944 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001420:	2000      	movs	r0, #0
 8001422:	f000 f80f 	bl	8001444 <HAL_InitTick>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	e001      	b.n	8001436 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001432:	f7ff fe9b 	bl	800116c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001436:	79fb      	ldrb	r3, [r7, #7]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_InitTick+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_InitTick+0x70>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_InitTick+0x6c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f941 	bl	80016f6 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d809      	bhi.n	8001494 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f919 	bl	80016be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_InitTick+0x74>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e007      	b.n	80014a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e004      	b.n	80014a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e001      	b.n	80014a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	2000019c 	.word	0x2000019c

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2000019c 	.word	0x2000019c

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff47 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff5c 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffb0 	bl	8001664 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e17f      	b.n	8001a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8171 	beq.w	8001a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 0201 	and.w	r2, r3, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d118      	bne.n	80017f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d017      	beq.n	800182c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d123      	bne.n	8001880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	6939      	ldr	r1, [r7, #16]
 800187c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0203 	and.w	r2, r3, #3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80ac 	beq.w	8001a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	4a5e      	ldr	r2, [pc, #376]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6613      	str	r3, [r2, #96]	; 0x60
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018da:	4a5a      	ldr	r2, [pc, #360]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001904:	d025      	beq.n	8001952 <HAL_GPIO_Init+0x242>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4f      	ldr	r2, [pc, #316]	; (8001a48 <HAL_GPIO_Init+0x338>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01f      	beq.n	800194e <HAL_GPIO_Init+0x23e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4e      	ldr	r2, [pc, #312]	; (8001a4c <HAL_GPIO_Init+0x33c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x23a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_GPIO_Init+0x340>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x236>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_GPIO_Init+0x344>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x232>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4b      	ldr	r2, [pc, #300]	; (8001a58 <HAL_GPIO_Init+0x348>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x22e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <HAL_GPIO_Init+0x34c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x22a>
 8001936:	2306      	movs	r3, #6
 8001938:	e00c      	b.n	8001954 <HAL_GPIO_Init+0x244>
 800193a:	2307      	movs	r3, #7
 800193c:	e00a      	b.n	8001954 <HAL_GPIO_Init+0x244>
 800193e:	2305      	movs	r3, #5
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x244>
 8001942:	2304      	movs	r3, #4
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x244>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x244>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x244>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x244>
 8001952:	2300      	movs	r3, #0
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_GPIO_Init+0x334>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_GPIO_Init+0x350>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001996:	4a32      	ldr	r2, [pc, #200]	; (8001a60 <HAL_GPIO_Init+0x350>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_GPIO_Init+0x350>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <HAL_GPIO_Init+0x350>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_GPIO_Init+0x350>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_GPIO_Init+0x350>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_GPIO_Init+0x350>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_GPIO_Init+0x350>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f47f ae78 	bne.w	8001720 <HAL_GPIO_Init+0x10>
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48000c00 	.word	0x48000c00
 8001a54:	48001000 	.word	0x48001000
 8001a58:	48001400 	.word	0x48001400
 8001a5c:	48001800 	.word	0x48001800
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_PWREx_GetVoltageRange+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000

08001ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001abe:	d130      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001acc:	d038      	beq.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2232      	movs	r2, #50	; 0x32
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0c9b      	lsrs	r3, r3, #18
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af4:	e002      	b.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d102      	bne.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f2      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d110      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e00f      	b.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d007      	beq.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40007000 	.word	0x40007000
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83

08001b5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e3ca      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6e:	4b97      	ldr	r3, [pc, #604]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b78:	4b94      	ldr	r3, [pc, #592]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80e4 	beq.w	8001d58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4a>
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	f040 808b 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 8087 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e3a2      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1a      	ldr	r2, [r3, #32]
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x7c>
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_OscConfig+0x88>
 8001bd8:	4b7c      	ldr	r3, [pc, #496]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d223      	bcs.n	8001c30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd55 	bl	800269c <RCC_SetFlashLatencyFromMSIRange>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e383      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfc:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a72      	ldr	r2, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	496d      	ldr	r1, [pc, #436]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1a:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	4968      	ldr	r1, [pc, #416]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
 8001c2e:	e025      	b.n	8001c7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c30:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a65      	ldr	r2, [pc, #404]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4960      	ldr	r1, [pc, #384]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	495b      	ldr	r1, [pc, #364]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fd15 	bl	800269c <RCC_SetFlashLatencyFromMSIRange>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e343      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7c:	f000 fc4a 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	4950      	ldr	r1, [pc, #320]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_RCC_OscConfig+0x278>)
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fbcf 	bl	8001444 <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d052      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	e327      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d032      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a42      	ldr	r2, [pc, #264]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fc0c 	bl	80014e4 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc08 	bl	80014e4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e310      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cee:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4931      	ldr	r1, [pc, #196]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	492c      	ldr	r1, [pc, #176]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e01a      	b.n	8001d58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fbd9 	bl	80014e4 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d36:	f7ff fbd5 	bl	80014e4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e2dd      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1da>
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d074      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x21a>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d10e      	bne.n	8001d8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d064      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d160      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e2ba      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x24a>
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e026      	b.n	8001df4 <HAL_RCC_OscConfig+0x298>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dae:	d115      	bne.n	8001ddc <HAL_RCC_OscConfig+0x280>
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a02      	ldr	r2, [pc, #8]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e014      	b.n	8001df4 <HAL_RCC_OscConfig+0x298>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	080053f4 	.word	0x080053f4
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	4ba0      	ldr	r3, [pc, #640]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a9f      	ldr	r2, [pc, #636]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b9d      	ldr	r3, [pc, #628]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a9c      	ldr	r2, [pc, #624]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fb72 	bl	80014e4 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fb6e 	bl	80014e4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e276      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2a8>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fb5e 	bl	80014e4 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fb5a 	bl	80014e4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e262      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d0>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d060      	beq.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x310>
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d119      	bne.n	8001e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d116      	bne.n	8001e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x328>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e23f      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	4973      	ldr	r1, [pc, #460]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	e040      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d023      	beq.n	8001eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff fb19 	bl	80014e4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fb15 	bl	80014e4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e21d      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	495f      	ldr	r1, [pc, #380]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e018      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff faf5 	bl	80014e4 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff faf1 	bl	80014e4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1f9      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff fad0 	bl	80014e4 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff facc 	bl	80014e4 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1d4      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ef      	beq.n	8001f48 <HAL_RCC_OscConfig+0x3ec>
 8001f68:	e01b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fab3 	bl	80014e4 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f82:	f7ff faaf 	bl	80014e4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1b7      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ef      	bne.n	8001f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80a6 	beq.w	80020fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_OscConfig+0x508>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d118      	bne.n	800201a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_RCC_OscConfig+0x508>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x508>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fa76 	bl	80014e4 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7ff fa72 	bl	80014e4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e17a      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_RCC_OscConfig+0x508>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d8>
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002032:	e029      	b.n	8002088 <HAL_RCC_OscConfig+0x52c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b05      	cmp	r3, #5
 800203a:	d115      	bne.n	8002068 <HAL_RCC_OscConfig+0x50c>
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a03      	ldr	r2, [pc, #12]	; (8002060 <HAL_RCC_OscConfig+0x504>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x52c>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	4b9c      	ldr	r3, [pc, #624]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a9b      	ldr	r2, [pc, #620]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002078:	4b98      	ldr	r3, [pc, #608]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a97      	ldr	r2, [pc, #604]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d016      	beq.n	80020be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff fa28 	bl	80014e4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff fa24 	bl	80014e4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e12a      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ed      	beq.n	8002098 <HAL_RCC_OscConfig+0x53c>
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff fa11 	bl	80014e4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff fa0d 	bl	80014e4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e113      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020dc:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ed      	bne.n	80020c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f0:	4b7a      	ldr	r3, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a79      	ldr	r2, [pc, #484]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80020f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80fe 	beq.w	8002302 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	2b02      	cmp	r3, #2
 800210c:	f040 80d0 	bne.w	80022b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002110:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	429a      	cmp	r2, r3
 8002122:	d130      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	3b01      	subs	r3, #1
 8002130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d127      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11f      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002150:	2a07      	cmp	r2, #7
 8002152:	bf14      	ite	ne
 8002154:	2201      	movne	r2, #1
 8002156:	2200      	moveq	r2, #0
 8002158:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215a:	4293      	cmp	r3, r2
 800215c:	d113      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d109      	bne.n	8002186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d06e      	beq.n	8002264 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d069      	beq.n	8002260 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0ad      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021a8:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b4:	f7ff f996 	bl	80014e4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f992 	bl	80014e4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e09a      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021da:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x784>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ea:	3a01      	subs	r2, #1
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f4:	0212      	lsls	r2, r2, #8
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021fc:	0852      	lsrs	r2, r2, #1
 80021fe:	3a01      	subs	r2, #1
 8002200:	0552      	lsls	r2, r2, #21
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002208:	0852      	lsrs	r2, r2, #1
 800220a:	3a01      	subs	r2, #1
 800220c:	0652      	lsls	r2, r2, #25
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002214:	0912      	lsrs	r2, r2, #4
 8002216:	0452      	lsls	r2, r2, #17
 8002218:	430a      	orrs	r2, r1
 800221a:	4930      	ldr	r1, [pc, #192]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002238:	f7ff f954 	bl	80014e4 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f950 	bl	80014e4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e058      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	4b22      	ldr	r3, [pc, #136]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800225e:	e050      	b.n	8002302 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e04f      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d148      	bne.n	8002302 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002288:	f7ff f92c 	bl	80014e4 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f928 	bl	80014e4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e030      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x734>
 80022ae:	e028      	b.n	8002302 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d023      	beq.n	80022fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_RCC_OscConfig+0x780>)
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7ff f90f 	bl	80014e4 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	e00c      	b.n	80022e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7ff f90b 	bl	80014e4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d905      	bls.n	80022e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e013      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_OscConfig+0x7b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ec      	bne.n	80022ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x7b0>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	4905      	ldr	r1, [pc, #20]	; (800230c <HAL_RCC_OscConfig+0x7b0>)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x7b4>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
 80022fc:	e001      	b.n	8002302 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	feeefffc 	.word	0xfeeefffc

08002314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0e7      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b75      	ldr	r3, [pc, #468]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d910      	bls.n	8002358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b72      	ldr	r3, [pc, #456]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 0207 	bic.w	r2, r3, #7
 800233e:	4970      	ldr	r1, [pc, #448]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cf      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002370:	429a      	cmp	r2, r3
 8002372:	d908      	bls.n	8002386 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4960      	ldr	r1, [pc, #384]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d04c      	beq.n	800242c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d121      	bne.n	80023ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0a6      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e09a      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ca:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e08e      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e086      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4943      	ldr	r1, [pc, #268]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7ff f872 	bl	80014e4 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff f86e 	bl	80014e4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e06e      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	429a      	cmp	r2, r3
 8002446:	d208      	bcs.n	800245a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	492b      	ldr	r1, [pc, #172]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d210      	bcs.n	800248a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 0207 	bic.w	r2, r3, #7
 8002470:	4923      	ldr	r1, [pc, #140]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCC_ClockConfig+0x1ec>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d001      	beq.n	800248a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e036      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4918      	ldr	r1, [pc, #96]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4910      	ldr	r1, [pc, #64]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c8:	f000 f824 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	490b      	ldr	r1, [pc, #44]	; (8002508 <HAL_RCC_ClockConfig+0x1f4>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1f8>)
 80024e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1fc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe ffa9 	bl	8001444 <HAL_InitTick>
 80024f2:	4603      	mov	r3, r0
 80024f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80024f6:	7afb      	ldrb	r3, [r7, #11]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	080053f4 	.word	0x080053f4
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252c:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x34>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d121      	bne.n	8002586 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d11e      	bne.n	8002586 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	e005      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002578:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002584:	e00a      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d102      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCC_GetSysClockFreq+0x110>)
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e004      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d101      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCC_GetSysClockFreq+0x114>)
 800259a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d134      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0xa6>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d003      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0xac>
 80025b8:	e005      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCC_GetSysClockFreq+0x110>)
 80025bc:	617b      	str	r3, [r7, #20]
      break;
 80025be:	e005      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_GetSysClockFreq+0x114>)
 80025c2:	617b      	str	r3, [r7, #20]
      break;
 80025c4:	e002      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	617b      	str	r3, [r7, #20]
      break;
 80025ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	3301      	adds	r3, #1
 80025d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	fb03 f202 	mul.w	r2, r3, r2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	0e5b      	lsrs	r3, r3, #25
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	3301      	adds	r3, #1
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800260c:	69bb      	ldr	r3, [r7, #24]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	0800540c 	.word	0x0800540c
 8002624:	00f42400 	.word	0x00f42400
 8002628:	007a1200 	.word	0x007a1200

0800262c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCC_GetPCLK1Freq+0x28>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08005404 	.word	0x08005404

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002674:	f7ff ffda 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08005404 	.word	0x08005404

0800269c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026b4:	f7ff f9ee 	bl	8001a94 <HAL_PWREx_GetVoltageRange>
 80026b8:	6178      	str	r0, [r7, #20]
 80026ba:	e014      	b.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	4a24      	ldr	r2, [pc, #144]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6593      	str	r3, [r2, #88]	; 0x58
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026d4:	f7ff f9de 	bl	8001a94 <HAL_PWREx_GetVoltageRange>
 80026d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ec:	d10b      	bne.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d919      	bls.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2ba0      	cmp	r3, #160	; 0xa0
 80026f8:	d902      	bls.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026fa:	2302      	movs	r3, #2
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e013      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e010      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d902      	bls.n	8002712 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800270c:	2303      	movs	r3, #3
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	e00a      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d102      	bne.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002718:	2302      	movs	r3, #2
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	e004      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b70      	cmp	r3, #112	; 0x70
 8002722:	d101      	bne.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 0207 	bic.w	r2, r3, #7
 8002730:	4909      	ldr	r1, [pc, #36]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	40022000 	.word	0x40022000

0800275c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002764:	2300      	movs	r3, #0
 8002766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002768:	2300      	movs	r3, #0
 800276a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002774:	2b00      	cmp	r3, #0
 8002776:	d041      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800277c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002780:	d02a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002782:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002786:	d824      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800278c:	d008      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800278e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002792:	d81e      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279c:	d010      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800279e:	e018      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027a0:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a85      	ldr	r2, [pc, #532]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027ac:	e015      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fabb 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027be:	e00c      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3320      	adds	r3, #32
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fba6 	bl	8002f18 <RCCEx_PLLSAI2_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d0:	e003      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	74fb      	strb	r3, [r7, #19]
      break;
 80027d6:	e000      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e0:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ee:	4973      	ldr	r1, [pc, #460]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027f6:	e001      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d041      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002810:	d02a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002816:	d824      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800281e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002822:	d81e      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282c:	d010      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800282e:	e018      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002830:	4b62      	ldr	r3, [pc, #392]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a61      	ldr	r2, [pc, #388]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800283c:	e015      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fa73 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800284e:	e00c      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3320      	adds	r3, #32
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fb5e 	bl	8002f18 <RCCEx_PLLSAI2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002860:	e003      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	74fb      	strb	r3, [r7, #19]
      break;
 8002866:	e000      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002870:	4b52      	ldr	r3, [pc, #328]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287e:	494f      	ldr	r1, [pc, #316]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002886:	e001      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a0 	beq.w	80029da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	4a40      	ldr	r2, [pc, #256]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	; 0x58
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d0:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fe02 	bl	80014e4 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028e2:	e009      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe fdfe 	bl	80014e4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d902      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	74fb      	strb	r3, [r7, #19]
        break;
 80028f6:	e005      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f8:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ef      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d15c      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800290a:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002914:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01f      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d019      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002928:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a20      	ldr	r2, [pc, #128]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fdbd 	bl	80014e4 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	e00b      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe fdb9 	bl	80014e4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d902      	bls.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	74fb      	strb	r3, [r7, #19]
            break;
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ec      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029b2:	e009      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	74bb      	strb	r3, [r7, #18]
 80029b8:	e006      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c8:	7c7b      	ldrb	r3, [r7, #17]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ce:	4b9e      	ldr	r3, [pc, #632]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	4a9d      	ldr	r2, [pc, #628]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e6:	4b98      	ldr	r3, [pc, #608]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f023 0203 	bic.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	4994      	ldr	r1, [pc, #592]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a08:	4b8f      	ldr	r3, [pc, #572]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 020c 	bic.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	498c      	ldr	r1, [pc, #560]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a2a:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4983      	ldr	r1, [pc, #524]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	497b      	ldr	r1, [pc, #492]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7c:	4972      	ldr	r1, [pc, #456]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a90:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	496a      	ldr	r1, [pc, #424]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	4961      	ldr	r1, [pc, #388]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ad4:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae2:	4959      	ldr	r1, [pc, #356]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b04:	4950      	ldr	r1, [pc, #320]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	4948      	ldr	r1, [pc, #288]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b3a:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	493f      	ldr	r1, [pc, #252]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d028      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6a:	4937      	ldr	r1, [pc, #220]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b7c:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b86:	60d3      	str	r3, [r2, #12]
 8002b88:	e011      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b92:	d10c      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f8c8 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bba:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	491f      	ldr	r1, [pc, #124]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a1a      	ldr	r2, [pc, #104]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be4:	60d3      	str	r3, [r2, #12]
 8002be6:	e011      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f899 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02b      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c36:	d109      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
 8002c44:	e014      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f867 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02f      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8a:	4928      	ldr	r1, [pc, #160]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f844 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d014      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	74bb      	strb	r3, [r7, #18]
 8002cb6:	e011      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3320      	adds	r3, #32
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f925 	bl	8002f18 <RCCEx_PLLSAI2_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf6:	490d      	ldr	r1, [pc, #52]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3e:	4b75      	ldr	r3, [pc, #468]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d018      	beq.n	8002d7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d4a:	4b72      	ldr	r3, [pc, #456]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d62:	4b6c      	ldr	r3, [pc, #432]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
       ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d047      	beq.n	8002e06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e044      	b.n	8002e06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d018      	beq.n	8002db6 <RCCEx_PLLSAI1_Config+0x86>
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d825      	bhi.n	8002dd4 <RCCEx_PLLSAI1_Config+0xa4>
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d002      	beq.n	8002d92 <RCCEx_PLLSAI1_Config+0x62>
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d009      	beq.n	8002da4 <RCCEx_PLLSAI1_Config+0x74>
 8002d90:	e020      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d92:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11d      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da2:	e01a      	b.n	8002dda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da4:	4b5b      	ldr	r3, [pc, #364]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e013      	b.n	8002dde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db6:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dc2:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dd2:	e006      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd8:	e004      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dea:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	4944      	ldr	r1, [pc, #272]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d17d      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a40      	ldr	r2, [pc, #256]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe fb64 	bl	80014e4 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e1e:	e009      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e20:	f7fe fb60 	bl	80014e4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	73fb      	strb	r3, [r7, #15]
        break;
 8002e32:	e005      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e34:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ef      	bne.n	8002e20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d160      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e4c:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6892      	ldr	r2, [r2, #8]
 8002e5c:	0211      	lsls	r1, r2, #8
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	0912      	lsrs	r2, r2, #4
 8002e64:	0452      	lsls	r2, r2, #17
 8002e66:	430a      	orrs	r2, r1
 8002e68:	492a      	ldr	r1, [pc, #168]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	610b      	str	r3, [r1, #16]
 8002e6e:	e027      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d112      	bne.n	8002e9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	0211      	lsls	r1, r2, #8
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6912      	ldr	r2, [r2, #16]
 8002e8c:	0852      	lsrs	r2, r2, #1
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	0552      	lsls	r2, r2, #21
 8002e92:	430a      	orrs	r2, r1
 8002e94:	491f      	ldr	r1, [pc, #124]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	610b      	str	r3, [r1, #16]
 8002e9a:	e011      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	0211      	lsls	r1, r2, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6952      	ldr	r2, [r2, #20]
 8002eb2:	0852      	lsrs	r2, r2, #1
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0652      	lsls	r2, r2, #25
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4916      	ldr	r1, [pc, #88]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fb0a 	bl	80014e4 <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed2:	e009      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed4:	f7fe fb06 	bl	80014e4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d902      	bls.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ee6:	e005      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10d      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
       ||
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f4a:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
       ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d047      	beq.n	8002fee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	e044      	b.n	8002fee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d018      	beq.n	8002f9e <RCCEx_PLLSAI2_Config+0x86>
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d825      	bhi.n	8002fbc <RCCEx_PLLSAI2_Config+0xa4>
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d002      	beq.n	8002f7a <RCCEx_PLLSAI2_Config+0x62>
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d009      	beq.n	8002f8c <RCCEx_PLLSAI2_Config+0x74>
 8002f78:	e020      	b.n	8002fbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11d      	bne.n	8002fc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8a:	e01a      	b.n	8002fc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9c:	e013      	b.n	8002fc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fba:	e006      	b.n	8002fca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc0:	e004      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e002      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10d      	bne.n	8002fee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	4939      	ldr	r1, [pc, #228]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d167      	bne.n	80030c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a35      	ldr	r2, [pc, #212]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fe fa70 	bl	80014e4 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003006:	e009      	b.n	800301c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003008:	f7fe fa6c 	bl	80014e4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	73fb      	strb	r3, [r7, #15]
        break;
 800301a:	e005      	b.n	8003028 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ef      	bne.n	8003008 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d14a      	bne.n	80030c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6892      	ldr	r2, [r2, #8]
 8003044:	0211      	lsls	r1, r2, #8
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	0912      	lsrs	r2, r2, #4
 800304c:	0452      	lsls	r2, r2, #17
 800304e:	430a      	orrs	r2, r1
 8003050:	491f      	ldr	r1, [pc, #124]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	614b      	str	r3, [r1, #20]
 8003056:	e011      	b.n	800307c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003060:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	0211      	lsls	r1, r2, #8
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6912      	ldr	r2, [r2, #16]
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0652      	lsls	r2, r2, #25
 8003074:	430a      	orrs	r2, r1
 8003076:	4916      	ldr	r1, [pc, #88]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	4313      	orrs	r3, r2
 800307a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003086:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fa2c 	bl	80014e4 <HAL_GetTick>
 800308c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800308e:	e009      	b.n	80030a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003090:	f7fe fa28 	bl	80014e4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d902      	bls.n	80030a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	73fb      	strb	r3, [r7, #15]
          break;
 80030a2:	e005      	b.n	80030b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4904      	ldr	r1, [pc, #16]	; (80030d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e095      	b.n	8003212 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f6:	d009      	beq.n	800310c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	e005      	b.n	800310c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd ffbe 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800314c:	d902      	bls.n	8003154 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e002      	b.n	800315a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003158:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003162:	d007      	beq.n	8003174 <HAL_SPI_Init+0xa0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	ea42 0103 	orr.w	r1, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 0204 	and.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b088      	sub	sp, #32
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_SPI_Transmit+0x22>
 8003238:	2302      	movs	r3, #2
 800323a:	e15f      	b.n	80034fc <HAL_SPI_Transmit+0x2e2>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003244:	f7fe f94e 	bl	80014e4 <HAL_GetTick>
 8003248:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800325e:	e148      	b.n	80034f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_Transmit+0x52>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003270:	e13f      	b.n	80034f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	88fa      	ldrh	r2, [r7, #6]
 800328a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	d10f      	bne.n	80032de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d007      	beq.n	80032fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003304:	d94f      	bls.n	80033a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Transmit+0xfa>
 800330e:	8afb      	ldrh	r3, [r7, #22]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d142      	bne.n	800339a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003338:	e02f      	b.n	800339a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d112      	bne.n	800336e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800336c:	e015      	b.n	800339a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336e:	f7fe f8b9 	bl	80014e4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d803      	bhi.n	8003386 <HAL_SPI_Transmit+0x16c>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d102      	bne.n	800338c <HAL_SPI_Transmit+0x172>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003398:	e0ab      	b.n	80034f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ca      	bne.n	800333a <HAL_SPI_Transmit+0x120>
 80033a4:	e080      	b.n	80034a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_SPI_Transmit+0x19a>
 80033ae:	8afb      	ldrh	r3, [r7, #22]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d174      	bne.n	800349e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d912      	bls.n	80033e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b02      	subs	r3, #2
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033e2:	e05c      	b.n	800349e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800340a:	e048      	b.n	800349e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d12b      	bne.n	8003472 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d912      	bls.n	800344a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b02      	subs	r3, #2
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003448:	e029      	b.n	800349e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003470:	e015      	b.n	800349e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003472:	f7fe f837 	bl	80014e4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d803      	bhi.n	800348a <HAL_SPI_Transmit+0x270>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d102      	bne.n	8003490 <HAL_SPI_Transmit+0x276>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d106      	bne.n	800349e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800349c:	e029      	b.n	80034f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1b1      	bne.n	800340c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fcf9 	bl	8003ea4 <SPI_EndRxTxTransaction>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e003      	b.n	80034f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d002      	beq.n	800352a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003524:	2302      	movs	r3, #2
 8003526:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003528:	e11a      	b.n	8003760 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003532:	d112      	bne.n	800355a <HAL_SPI_Receive+0x56>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10e      	bne.n	800355a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2204      	movs	r2, #4
 8003540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f90e 	bl	8003772 <HAL_SPI_TransmitReceive>
 8003556:	4603      	mov	r3, r0
 8003558:	e107      	b.n	800376a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_SPI_Receive+0x64>
 8003564:	2302      	movs	r3, #2
 8003566:	e100      	b.n	800376a <HAL_SPI_Receive+0x266>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003570:	f7fd ffb8 	bl	80014e4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_SPI_Receive+0x7e>
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003586:	e0eb      	b.n	8003760 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2204      	movs	r2, #4
 800358c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035d2:	d908      	bls.n	80035e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	e007      	b.n	80035f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fe:	d10f      	bne.n	8003620 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d007      	beq.n	800363e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003646:	d86f      	bhi.n	8003728 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003648:	e034      	b.n	80036b4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d117      	bne.n	8003688 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f103 020c 	add.w	r2, r3, #12
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003686:	e015      	b.n	80036b4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003688:	f7fd ff2c 	bl	80014e4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d803      	bhi.n	80036a0 <HAL_SPI_Receive+0x19c>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Receive+0x1a2>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80036b2:	e055      	b.n	8003760 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1c4      	bne.n	800364a <HAL_SPI_Receive+0x146>
 80036c0:	e038      	b.n	8003734 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d115      	bne.n	80036fc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036fa:	e015      	b.n	8003728 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036fc:	f7fd fef2 	bl	80014e4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d803      	bhi.n	8003714 <HAL_SPI_Receive+0x210>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d102      	bne.n	800371a <HAL_SPI_Receive+0x216>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003726:	e01b      	b.n	8003760 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1c6      	bne.n	80036c2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fb5b 	bl	8003df4 <SPI_EndRxTransaction>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
 8003756:	e003      	b.n	8003760 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b08a      	sub	sp, #40	; 0x28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x26>
 8003794:	2302      	movs	r3, #2
 8003796:	e20a      	b.n	8003bae <HAL_SPI_TransmitReceive+0x43c>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a0:	f7fd fea0 	bl	80014e4 <HAL_GetTick>
 80037a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037bc:	7efb      	ldrb	r3, [r7, #27]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d00e      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x6e>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c8:	d106      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x66>
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d003      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037de:	e1e0      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x80>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x80>
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037f8:	e1d3      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b04      	cmp	r3, #4
 8003804:	d003      	beq.n	800380e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2205      	movs	r2, #5
 800380a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	887a      	ldrh	r2, [r7, #2]
 8003826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	887a      	ldrh	r2, [r7, #2]
 800383a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003850:	d802      	bhi.n	8003858 <HAL_SPI_TransmitReceive+0xe6>
 8003852:	8a3b      	ldrh	r3, [r7, #16]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d908      	bls.n	800386a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e007      	b.n	800387a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d007      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a0:	f240 8081 	bls.w	80039a6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_SPI_TransmitReceive+0x140>
 80038ac:	8a7b      	ldrh	r3, [r7, #18]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d16d      	bne.n	800398e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	881a      	ldrh	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	1c9a      	adds	r2, r3, #2
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d6:	e05a      	b.n	800398e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d11b      	bne.n	800391e <HAL_SPI_TransmitReceive+0x1ac>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d016      	beq.n	800391e <HAL_SPI_TransmitReceive+0x1ac>
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d113      	bne.n	800391e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	881a      	ldrh	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11c      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x1f4>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d016      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	b292      	uxth	r2, r2
 8003944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003962:	2301      	movs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003966:	f7fd fdbd 	bl	80014e4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003972:	429a      	cmp	r2, r3
 8003974:	d80b      	bhi.n	800398e <HAL_SPI_TransmitReceive+0x21c>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d007      	beq.n	800398e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800398c:	e109      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d19f      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x166>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d199      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x166>
 80039a4:	e0e3      	b.n	8003b6e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x244>
 80039ae:	8a7b      	ldrh	r3, [r7, #18]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	f040 80cf 	bne.w	8003b54 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d912      	bls.n	80039e6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	881a      	ldrh	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b02      	subs	r3, #2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039e4:	e0b6      	b.n	8003b54 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a0c:	e0a2      	b.n	8003b54 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d134      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x314>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02f      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x314>
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d12c      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d912      	bls.n	8003a5c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b02      	subs	r3, #2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a5a:	e012      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d148      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x3b4>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d042      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d923      	bls.n	8003af4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	b292      	uxth	r2, r2
 8003ab8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b02      	subs	r3, #2
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d81f      	bhi.n	8003b22 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e016      	b.n	8003b22 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f103 020c 	add.w	r2, r3, #12
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b26:	f7fd fcdd 	bl	80014e4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d803      	bhi.n	8003b3e <HAL_SPI_TransmitReceive+0x3cc>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d102      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x3d2>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003b52:	e026      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f af57 	bne.w	8003a0e <HAL_SPI_TransmitReceive+0x29c>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f af50 	bne.w	8003a0e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f996 	bl	8003ea4 <SPI_EndRxTxTransaction>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b98:	e003      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3728      	adds	r7, #40	; 0x28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bc8:	f7fd fc8c 	bl	80014e4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bd8:	f7fd fc84 	bl	80014e4 <HAL_GetTick>
 8003bdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bde:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	015b      	lsls	r3, r3, #5
 8003be4:	0d1b      	lsrs	r3, r3, #20
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bee:	e054      	b.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d050      	beq.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf8:	f7fd fc74 	bl	80014e4 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d902      	bls.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d13d      	bne.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c26:	d111      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c30:	d004      	beq.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d107      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	d10f      	bne.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e017      	b.n	8003cba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d19b      	bne.n	8003bf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000000 	.word	0x20000000

08003cc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cda:	f7fd fc03 	bl	80014e4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cea:	f7fd fbfb 	bl	80014e4 <HAL_GetTick>
 8003cee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cf8:	4b3d      	ldr	r3, [pc, #244]	; (8003df0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00da      	lsls	r2, r3, #3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	0d1b      	lsrs	r3, r3, #20
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d10:	e060      	b.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d18:	d107      	bne.n	8003d2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d050      	beq.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d32:	f7fd fbd7 	bl	80014e4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d902      	bls.n	8003d48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d13d      	bne.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d60:	d111      	bne.n	8003d86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6a:	d004      	beq.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d107      	bne.n	8003d86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	d10f      	bne.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e010      	b.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d196      	bne.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3728      	adds	r7, #40	; 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000000 	.word	0x20000000

08003df4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e08:	d111      	bne.n	8003e2e <SPI_EndRxTransaction+0x3a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e12:	d004      	beq.n	8003e1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1c:	d107      	bne.n	8003e2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff febd 	bl	8003bb8 <SPI_WaitFlagStateUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e023      	b.n	8003e9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5c:	d11d      	bne.n	8003e9a <SPI_EndRxTransaction+0xa6>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d004      	beq.n	8003e72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d113      	bne.n	8003e9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff22 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e000      	b.n	8003e9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ff03 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e027      	b.n	8003f28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff fe68 	bl	8003bb8 <SPI_WaitFlagStateUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e014      	b.n	8003f28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fedc 	bl	8003cc8 <SPI_WaitFifoStateUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e000      	b.n	8003f28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e040      	b.n	8003fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd f9d0 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	; 0x24
 8003f5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fb6a 	bl	8004650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8af 	bl	80040e0 <UART_SetConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e01b      	b.n	8003fc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fbe9 	bl	8004794 <UART_CheckIdleState>
 8003fc2:	4603      	mov	r3, r0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d178      	bne.n	80040d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_UART_Transmit+0x24>
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e071      	b.n	80040d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2221      	movs	r2, #33	; 0x21
 8004000:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd fa6f 	bl	80014e4 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004020:	d108      	bne.n	8004034 <HAL_UART_Transmit+0x68>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e003      	b.n	800403c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800403c:	e030      	b.n	80040a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fc4b 	bl	80048e4 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e03c      	b.n	80040d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004070:	b292      	uxth	r2, r2
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	3302      	adds	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e008      	b.n	800408e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b292      	uxth	r2, r2
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3301      	adds	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1c8      	bne.n	800403e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fc14 	bl	80048e4 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e005      	b.n	80040d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e4:	b08a      	sub	sp, #40	; 0x28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	431a      	orrs	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4313      	orrs	r3, r2
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4ba4      	ldr	r3, [pc, #656]	; (80043a0 <UART_SetConfig+0x2c0>)
 8004110:	4013      	ands	r3, r2
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004118:	430b      	orrs	r3, r1
 800411a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a99      	ldr	r2, [pc, #612]	; (80043a4 <UART_SetConfig+0x2c4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004148:	4313      	orrs	r3, r2
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a90      	ldr	r2, [pc, #576]	; (80043a8 <UART_SetConfig+0x2c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d126      	bne.n	80041b8 <UART_SetConfig+0xd8>
 800416a:	4b90      	ldr	r3, [pc, #576]	; (80043ac <UART_SetConfig+0x2cc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b03      	cmp	r3, #3
 8004176:	d81b      	bhi.n	80041b0 <UART_SetConfig+0xd0>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0xa0>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	08004191 	.word	0x08004191
 8004184:	080041a1 	.word	0x080041a1
 8004188:	08004199 	.word	0x08004199
 800418c:	080041a9 	.word	0x080041a9
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e116      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004198:	2302      	movs	r3, #2
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e112      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e10e      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e10a      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e106      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7c      	ldr	r2, [pc, #496]	; (80043b0 <UART_SetConfig+0x2d0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d138      	bne.n	8004234 <UART_SetConfig+0x154>
 80041c2:	4b7a      	ldr	r3, [pc, #488]	; (80043ac <UART_SetConfig+0x2cc>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d82d      	bhi.n	800422c <UART_SetConfig+0x14c>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0xf8>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	0800420d 	.word	0x0800420d
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	0800422d 	.word	0x0800422d
 80041e4:	0800422d 	.word	0x0800422d
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	0800422d 	.word	0x0800422d
 80041f0:	0800422d 	.word	0x0800422d
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	08004215 	.word	0x08004215
 80041fc:	0800422d 	.word	0x0800422d
 8004200:	0800422d 	.word	0x0800422d
 8004204:	0800422d 	.word	0x0800422d
 8004208:	08004225 	.word	0x08004225
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e0d8      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004214:	2302      	movs	r3, #2
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e0d4      	b.n	80043c6 <UART_SetConfig+0x2e6>
 800421c:	2304      	movs	r3, #4
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e0d0      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004224:	2308      	movs	r3, #8
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e0cc      	b.n	80043c6 <UART_SetConfig+0x2e6>
 800422c:	2310      	movs	r3, #16
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e0c8      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <UART_SetConfig+0x2d4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d125      	bne.n	800428a <UART_SetConfig+0x1aa>
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <UART_SetConfig+0x2cc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d016      	beq.n	800427a <UART_SetConfig+0x19a>
 800424c:	2b30      	cmp	r3, #48	; 0x30
 800424e:	d818      	bhi.n	8004282 <UART_SetConfig+0x1a2>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d00a      	beq.n	800426a <UART_SetConfig+0x18a>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d814      	bhi.n	8004282 <UART_SetConfig+0x1a2>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <UART_SetConfig+0x182>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d008      	beq.n	8004272 <UART_SetConfig+0x192>
 8004260:	e00f      	b.n	8004282 <UART_SetConfig+0x1a2>
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004268:	e0ad      	b.n	80043c6 <UART_SetConfig+0x2e6>
 800426a:	2302      	movs	r3, #2
 800426c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004270:	e0a9      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004272:	2304      	movs	r3, #4
 8004274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004278:	e0a5      	b.n	80043c6 <UART_SetConfig+0x2e6>
 800427a:	2308      	movs	r3, #8
 800427c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004280:	e0a1      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004282:	2310      	movs	r3, #16
 8004284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004288:	e09d      	b.n	80043c6 <UART_SetConfig+0x2e6>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4a      	ldr	r2, [pc, #296]	; (80043b8 <UART_SetConfig+0x2d8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d125      	bne.n	80042e0 <UART_SetConfig+0x200>
 8004294:	4b45      	ldr	r3, [pc, #276]	; (80043ac <UART_SetConfig+0x2cc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800429e:	2bc0      	cmp	r3, #192	; 0xc0
 80042a0:	d016      	beq.n	80042d0 <UART_SetConfig+0x1f0>
 80042a2:	2bc0      	cmp	r3, #192	; 0xc0
 80042a4:	d818      	bhi.n	80042d8 <UART_SetConfig+0x1f8>
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d00a      	beq.n	80042c0 <UART_SetConfig+0x1e0>
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d814      	bhi.n	80042d8 <UART_SetConfig+0x1f8>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x1d8>
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d008      	beq.n	80042c8 <UART_SetConfig+0x1e8>
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x1f8>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e082      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e07e      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e07a      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e076      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e072      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a35      	ldr	r2, [pc, #212]	; (80043bc <UART_SetConfig+0x2dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d12a      	bne.n	8004340 <UART_SetConfig+0x260>
 80042ea:	4b30      	ldr	r3, [pc, #192]	; (80043ac <UART_SetConfig+0x2cc>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f8:	d01a      	beq.n	8004330 <UART_SetConfig+0x250>
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fe:	d81b      	bhi.n	8004338 <UART_SetConfig+0x258>
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d00c      	beq.n	8004320 <UART_SetConfig+0x240>
 8004306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430a:	d815      	bhi.n	8004338 <UART_SetConfig+0x258>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <UART_SetConfig+0x238>
 8004310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004314:	d008      	beq.n	8004328 <UART_SetConfig+0x248>
 8004316:	e00f      	b.n	8004338 <UART_SetConfig+0x258>
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e052      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e04e      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e04a      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e046      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e042      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a17      	ldr	r2, [pc, #92]	; (80043a4 <UART_SetConfig+0x2c4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d13a      	bne.n	80043c0 <UART_SetConfig+0x2e0>
 800434a:	4b18      	ldr	r3, [pc, #96]	; (80043ac <UART_SetConfig+0x2cc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004358:	d01a      	beq.n	8004390 <UART_SetConfig+0x2b0>
 800435a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800435e:	d81b      	bhi.n	8004398 <UART_SetConfig+0x2b8>
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d00c      	beq.n	8004380 <UART_SetConfig+0x2a0>
 8004366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436a:	d815      	bhi.n	8004398 <UART_SetConfig+0x2b8>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <UART_SetConfig+0x298>
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d008      	beq.n	8004388 <UART_SetConfig+0x2a8>
 8004376:	e00f      	b.n	8004398 <UART_SetConfig+0x2b8>
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e022      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e01e      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e01a      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e016      	b.n	80043c6 <UART_SetConfig+0x2e6>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e012      	b.n	80043c6 <UART_SetConfig+0x2e6>
 80043a0:	efff69f3 	.word	0xefff69f3
 80043a4:	40008000 	.word	0x40008000
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40004400 	.word	0x40004400
 80043b4:	40004800 	.word	0x40004800
 80043b8:	40004c00 	.word	0x40004c00
 80043bc:	40005000 	.word	0x40005000
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a9f      	ldr	r2, [pc, #636]	; (8004648 <UART_SetConfig+0x568>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d17a      	bne.n	80044c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d824      	bhi.n	8004422 <UART_SetConfig+0x342>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x300>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004405 	.word	0x08004405
 80043e4:	08004423 	.word	0x08004423
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004413 	.word	0x08004413
 80043f4:	08004423 	.word	0x08004423
 80043f8:	08004423 	.word	0x08004423
 80043fc:	08004423 	.word	0x08004423
 8004400:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe f91e 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8004408:	61f8      	str	r0, [r7, #28]
        break;
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b8f      	ldr	r3, [pc, #572]	; (800464c <UART_SetConfig+0x56c>)
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe f87f 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 8004416:	61f8      	str	r0, [r7, #28]
        break;
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	61fb      	str	r3, [r7, #28]
        break;
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800442c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80fb 	beq.w	800462c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	429a      	cmp	r2, r3
 8004444:	d305      	bcc.n	8004452 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	429a      	cmp	r2, r3
 8004450:	d903      	bls.n	800445a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004458:	e0e8      	b.n	800462c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2200      	movs	r2, #0
 800445e:	461c      	mov	r4, r3
 8004460:	4615      	mov	r5, r2
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	022b      	lsls	r3, r5, #8
 800446c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004470:	0222      	lsls	r2, r4, #8
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	6849      	ldr	r1, [r1, #4]
 8004476:	0849      	lsrs	r1, r1, #1
 8004478:	2000      	movs	r0, #0
 800447a:	4688      	mov	r8, r1
 800447c:	4681      	mov	r9, r0
 800447e:	eb12 0a08 	adds.w	sl, r2, r8
 8004482:	eb43 0b09 	adc.w	fp, r3, r9
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004494:	4650      	mov	r0, sl
 8004496:	4659      	mov	r1, fp
 8004498:	f7fb feea 	bl	8000270 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4613      	mov	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044aa:	d308      	bcc.n	80044be <UART_SetConfig+0x3de>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b2:	d204      	bcs.n	80044be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e0b6      	b.n	800462c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044c4:	e0b2      	b.n	800462c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ce:	d15e      	bne.n	800458e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d828      	bhi.n	800452a <UART_SetConfig+0x44a>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x400>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe f89e 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8004508:	61f8      	str	r0, [r7, #28]
        break;
 800450a:	e014      	b.n	8004536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe f8b0 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8004510:	61f8      	str	r0, [r7, #28]
        break;
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b4d      	ldr	r3, [pc, #308]	; (800464c <UART_SetConfig+0x56c>)
 8004516:	61fb      	str	r3, [r7, #28]
        break;
 8004518:	e00d      	b.n	8004536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fd fffb 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 800451e:	61f8      	str	r0, [r7, #28]
        break;
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	61fb      	str	r3, [r7, #28]
        break;
 8004528:	e005      	b.n	8004536 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d077      	beq.n	800462c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005a      	lsls	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	441a      	add	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b0f      	cmp	r3, #15
 8004556:	d916      	bls.n	8004586 <UART_SetConfig+0x4a6>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455e:	d212      	bcs.n	8004586 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f023 030f 	bic.w	r3, r3, #15
 8004568:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	b29a      	uxth	r2, r3
 8004576:	8afb      	ldrh	r3, [r7, #22]
 8004578:	4313      	orrs	r3, r2
 800457a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	8afa      	ldrh	r2, [r7, #22]
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	e052      	b.n	800462c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800458c:	e04e      	b.n	800462c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004592:	2b08      	cmp	r3, #8
 8004594:	d827      	bhi.n	80045e6 <UART_SetConfig+0x506>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x4bc>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe f840 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 80045c4:	61f8      	str	r0, [r7, #28]
        break;
 80045c6:	e014      	b.n	80045f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe f852 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 80045cc:	61f8      	str	r0, [r7, #28]
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b1e      	ldr	r3, [pc, #120]	; (800464c <UART_SetConfig+0x56c>)
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fd ff9d 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80045da:	61f8      	str	r0, [r7, #28]
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045f0:	bf00      	nop
    }

    if (pclk != 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d019      	beq.n	800462c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	085a      	lsrs	r2, r3, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	441a      	add	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	d909      	bls.n	8004626 <UART_SetConfig+0x546>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d205      	bcs.n	8004626 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e002      	b.n	800462c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800463c:	4618      	mov	r0, r3
 800463e:	3728      	adds	r7, #40	; 0x28
 8004640:	46bd      	mov	sp, r7
 8004642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004646:	bf00      	nop
 8004648:	40008000 	.word	0x40008000
 800464c:	00f42400 	.word	0x00f42400

08004650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01a      	beq.n	8004766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474e:	d10a      	bne.n	8004766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b098      	sub	sp, #96	; 0x60
 8004798:	af02      	add	r7, sp, #8
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a4:	f7fc fe9e 	bl	80014e4 <HAL_GetTick>
 80047a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d12e      	bne.n	8004816 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f88c 	bl	80048e4 <UART_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d021      	beq.n	8004816 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e6:	653b      	str	r3, [r7, #80]	; 0x50
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
 80047f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e6      	bne.n	80047d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e062      	b.n	80048dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d149      	bne.n	80048b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f856 	bl	80048e4 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d03c      	beq.n	80048b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	623b      	str	r3, [r7, #32]
   return(result);
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485c:	633b      	str	r3, [r7, #48]	; 0x30
 800485e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3308      	adds	r3, #8
 8004876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	64bb      	str	r3, [r7, #72]	; 0x48
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004890:	61fa      	str	r2, [r7, #28]
 8004892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	617b      	str	r3, [r7, #20]
   return(result);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e011      	b.n	80048dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3758      	adds	r7, #88	; 0x58
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f4:	e049      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d045      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fe:	f7fc fdf1 	bl	80014e4 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <UART_WaitOnFlagUntilTimeout+0x30>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e048      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d031      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d110      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2208      	movs	r2, #8
 800493a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f838 	bl	80049b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2208      	movs	r2, #8
 8004946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e029      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	d111      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800496e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f81e 	bl	80049b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0a6      	beq.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b095      	sub	sp, #84	; 0x54
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
 80049da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d118      	bne.n	8004a5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0310 	bic.w	r3, r3, #16
 8004a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	613b      	str	r3, [r7, #16]
   return(result);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e6      	bne.n	8004a28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a6e:	bf00      	nop
 8004a70:	3754      	adds	r7, #84	; 0x54
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <siprintf>:
 8004a7c:	b40e      	push	{r1, r2, r3}
 8004a7e:	b500      	push	{lr}
 8004a80:	b09c      	sub	sp, #112	; 0x70
 8004a82:	ab1d      	add	r3, sp, #116	; 0x74
 8004a84:	9002      	str	r0, [sp, #8]
 8004a86:	9006      	str	r0, [sp, #24]
 8004a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a8c:	4809      	ldr	r0, [pc, #36]	; (8004ab4 <siprintf+0x38>)
 8004a8e:	9107      	str	r1, [sp, #28]
 8004a90:	9104      	str	r1, [sp, #16]
 8004a92:	4909      	ldr	r1, [pc, #36]	; (8004ab8 <siprintf+0x3c>)
 8004a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a98:	9105      	str	r1, [sp, #20]
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	a902      	add	r1, sp, #8
 8004aa0:	f000 f992 	bl	8004dc8 <_svfiprintf_r>
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	b01c      	add	sp, #112	; 0x70
 8004aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab0:	b003      	add	sp, #12
 8004ab2:	4770      	bx	lr
 8004ab4:	20000058 	.word	0x20000058
 8004ab8:	ffff0208 	.word	0xffff0208

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <__errno>:
 8004acc:	4b01      	ldr	r3, [pc, #4]	; (8004ad4 <__errno+0x8>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000058 	.word	0x20000058

08004ad8 <__libc_init_array>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4d0d      	ldr	r5, [pc, #52]	; (8004b10 <__libc_init_array+0x38>)
 8004adc:	4c0d      	ldr	r4, [pc, #52]	; (8004b14 <__libc_init_array+0x3c>)
 8004ade:	1b64      	subs	r4, r4, r5
 8004ae0:	10a4      	asrs	r4, r4, #2
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	42a6      	cmp	r6, r4
 8004ae6:	d109      	bne.n	8004afc <__libc_init_array+0x24>
 8004ae8:	4d0b      	ldr	r5, [pc, #44]	; (8004b18 <__libc_init_array+0x40>)
 8004aea:	4c0c      	ldr	r4, [pc, #48]	; (8004b1c <__libc_init_array+0x44>)
 8004aec:	f000 fc6a 	bl	80053c4 <_init>
 8004af0:	1b64      	subs	r4, r4, r5
 8004af2:	10a4      	asrs	r4, r4, #2
 8004af4:	2600      	movs	r6, #0
 8004af6:	42a6      	cmp	r6, r4
 8004af8:	d105      	bne.n	8004b06 <__libc_init_array+0x2e>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b00:	4798      	blx	r3
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7ee      	b.n	8004ae4 <__libc_init_array+0xc>
 8004b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0a:	4798      	blx	r3
 8004b0c:	3601      	adds	r6, #1
 8004b0e:	e7f2      	b.n	8004af6 <__libc_init_array+0x1e>
 8004b10:	08005478 	.word	0x08005478
 8004b14:	08005478 	.word	0x08005478
 8004b18:	08005478 	.word	0x08005478
 8004b1c:	0800547c 	.word	0x0800547c

08004b20 <__retarget_lock_acquire_recursive>:
 8004b20:	4770      	bx	lr

08004b22 <__retarget_lock_release_recursive>:
 8004b22:	4770      	bx	lr

08004b24 <_free_r>:
 8004b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d044      	beq.n	8004bb4 <_free_r+0x90>
 8004b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f1a1 0404 	sub.w	r4, r1, #4
 8004b36:	bfb8      	it	lt
 8004b38:	18e4      	addlt	r4, r4, r3
 8004b3a:	f000 f8df 	bl	8004cfc <__malloc_lock>
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <_free_r+0x94>)
 8004b40:	9801      	ldr	r0, [sp, #4]
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	b933      	cbnz	r3, 8004b54 <_free_r+0x30>
 8004b46:	6063      	str	r3, [r4, #4]
 8004b48:	6014      	str	r4, [r2, #0]
 8004b4a:	b003      	add	sp, #12
 8004b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b50:	f000 b8da 	b.w	8004d08 <__malloc_unlock>
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	d908      	bls.n	8004b6a <_free_r+0x46>
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf01      	itttt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	1949      	addeq	r1, r1, r5
 8004b66:	6021      	streq	r1, [r4, #0]
 8004b68:	e7ed      	b.n	8004b46 <_free_r+0x22>
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	b10b      	cbz	r3, 8004b74 <_free_r+0x50>
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	d9fa      	bls.n	8004b6a <_free_r+0x46>
 8004b74:	6811      	ldr	r1, [r2, #0]
 8004b76:	1855      	adds	r5, r2, r1
 8004b78:	42a5      	cmp	r5, r4
 8004b7a:	d10b      	bne.n	8004b94 <_free_r+0x70>
 8004b7c:	6824      	ldr	r4, [r4, #0]
 8004b7e:	4421      	add	r1, r4
 8004b80:	1854      	adds	r4, r2, r1
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	d1e0      	bne.n	8004b4a <_free_r+0x26>
 8004b88:	681c      	ldr	r4, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	6053      	str	r3, [r2, #4]
 8004b8e:	440c      	add	r4, r1
 8004b90:	6014      	str	r4, [r2, #0]
 8004b92:	e7da      	b.n	8004b4a <_free_r+0x26>
 8004b94:	d902      	bls.n	8004b9c <_free_r+0x78>
 8004b96:	230c      	movs	r3, #12
 8004b98:	6003      	str	r3, [r0, #0]
 8004b9a:	e7d6      	b.n	8004b4a <_free_r+0x26>
 8004b9c:	6825      	ldr	r5, [r4, #0]
 8004b9e:	1961      	adds	r1, r4, r5
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf04      	itt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	6063      	str	r3, [r4, #4]
 8004baa:	bf04      	itt	eq
 8004bac:	1949      	addeq	r1, r1, r5
 8004bae:	6021      	streq	r1, [r4, #0]
 8004bb0:	6054      	str	r4, [r2, #4]
 8004bb2:	e7ca      	b.n	8004b4a <_free_r+0x26>
 8004bb4:	b003      	add	sp, #12
 8004bb6:	bd30      	pop	{r4, r5, pc}
 8004bb8:	200002e0 	.word	0x200002e0

08004bbc <sbrk_aligned>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	4e0e      	ldr	r6, [pc, #56]	; (8004bf8 <sbrk_aligned+0x3c>)
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	6831      	ldr	r1, [r6, #0]
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	b911      	cbnz	r1, 8004bce <sbrk_aligned+0x12>
 8004bc8:	f000 fba6 	bl	8005318 <_sbrk_r>
 8004bcc:	6030      	str	r0, [r6, #0]
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f000 fba1 	bl	8005318 <_sbrk_r>
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	d00a      	beq.n	8004bf0 <sbrk_aligned+0x34>
 8004bda:	1cc4      	adds	r4, r0, #3
 8004bdc:	f024 0403 	bic.w	r4, r4, #3
 8004be0:	42a0      	cmp	r0, r4
 8004be2:	d007      	beq.n	8004bf4 <sbrk_aligned+0x38>
 8004be4:	1a21      	subs	r1, r4, r0
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 fb96 	bl	8005318 <_sbrk_r>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d101      	bne.n	8004bf4 <sbrk_aligned+0x38>
 8004bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	200002e4 	.word	0x200002e4

08004bfc <_malloc_r>:
 8004bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c00:	1ccd      	adds	r5, r1, #3
 8004c02:	f025 0503 	bic.w	r5, r5, #3
 8004c06:	3508      	adds	r5, #8
 8004c08:	2d0c      	cmp	r5, #12
 8004c0a:	bf38      	it	cc
 8004c0c:	250c      	movcc	r5, #12
 8004c0e:	2d00      	cmp	r5, #0
 8004c10:	4607      	mov	r7, r0
 8004c12:	db01      	blt.n	8004c18 <_malloc_r+0x1c>
 8004c14:	42a9      	cmp	r1, r5
 8004c16:	d905      	bls.n	8004c24 <_malloc_r+0x28>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	4630      	mov	r0, r6
 8004c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004cf8 <_malloc_r+0xfc>
 8004c28:	f000 f868 	bl	8004cfc <__malloc_lock>
 8004c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c30:	461c      	mov	r4, r3
 8004c32:	bb5c      	cbnz	r4, 8004c8c <_malloc_r+0x90>
 8004c34:	4629      	mov	r1, r5
 8004c36:	4638      	mov	r0, r7
 8004c38:	f7ff ffc0 	bl	8004bbc <sbrk_aligned>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	4604      	mov	r4, r0
 8004c40:	d155      	bne.n	8004cee <_malloc_r+0xf2>
 8004c42:	f8d8 4000 	ldr.w	r4, [r8]
 8004c46:	4626      	mov	r6, r4
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	d145      	bne.n	8004cd8 <_malloc_r+0xdc>
 8004c4c:	2c00      	cmp	r4, #0
 8004c4e:	d048      	beq.n	8004ce2 <_malloc_r+0xe6>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	4631      	mov	r1, r6
 8004c54:	4638      	mov	r0, r7
 8004c56:	eb04 0903 	add.w	r9, r4, r3
 8004c5a:	f000 fb5d 	bl	8005318 <_sbrk_r>
 8004c5e:	4581      	cmp	r9, r0
 8004c60:	d13f      	bne.n	8004ce2 <_malloc_r+0xe6>
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	1a6d      	subs	r5, r5, r1
 8004c66:	4629      	mov	r1, r5
 8004c68:	4638      	mov	r0, r7
 8004c6a:	f7ff ffa7 	bl	8004bbc <sbrk_aligned>
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d037      	beq.n	8004ce2 <_malloc_r+0xe6>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	442b      	add	r3, r5
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	f8d8 3000 	ldr.w	r3, [r8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d038      	beq.n	8004cf2 <_malloc_r+0xf6>
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	42a2      	cmp	r2, r4
 8004c84:	d12b      	bne.n	8004cde <_malloc_r+0xe2>
 8004c86:	2200      	movs	r2, #0
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	e00f      	b.n	8004cac <_malloc_r+0xb0>
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	1b52      	subs	r2, r2, r5
 8004c90:	d41f      	bmi.n	8004cd2 <_malloc_r+0xd6>
 8004c92:	2a0b      	cmp	r2, #11
 8004c94:	d917      	bls.n	8004cc6 <_malloc_r+0xca>
 8004c96:	1961      	adds	r1, r4, r5
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	6025      	str	r5, [r4, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	6059      	strne	r1, [r3, #4]
 8004ca0:	6863      	ldr	r3, [r4, #4]
 8004ca2:	bf08      	it	eq
 8004ca4:	f8c8 1000 	streq.w	r1, [r8]
 8004ca8:	5162      	str	r2, [r4, r5]
 8004caa:	604b      	str	r3, [r1, #4]
 8004cac:	4638      	mov	r0, r7
 8004cae:	f104 060b 	add.w	r6, r4, #11
 8004cb2:	f000 f829 	bl	8004d08 <__malloc_unlock>
 8004cb6:	f026 0607 	bic.w	r6, r6, #7
 8004cba:	1d23      	adds	r3, r4, #4
 8004cbc:	1af2      	subs	r2, r6, r3
 8004cbe:	d0ae      	beq.n	8004c1e <_malloc_r+0x22>
 8004cc0:	1b9b      	subs	r3, r3, r6
 8004cc2:	50a3      	str	r3, [r4, r2]
 8004cc4:	e7ab      	b.n	8004c1e <_malloc_r+0x22>
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	6862      	ldr	r2, [r4, #4]
 8004cca:	d1dd      	bne.n	8004c88 <_malloc_r+0x8c>
 8004ccc:	f8c8 2000 	str.w	r2, [r8]
 8004cd0:	e7ec      	b.n	8004cac <_malloc_r+0xb0>
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	6864      	ldr	r4, [r4, #4]
 8004cd6:	e7ac      	b.n	8004c32 <_malloc_r+0x36>
 8004cd8:	4634      	mov	r4, r6
 8004cda:	6876      	ldr	r6, [r6, #4]
 8004cdc:	e7b4      	b.n	8004c48 <_malloc_r+0x4c>
 8004cde:	4613      	mov	r3, r2
 8004ce0:	e7cc      	b.n	8004c7c <_malloc_r+0x80>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f000 f80e 	bl	8004d08 <__malloc_unlock>
 8004cec:	e797      	b.n	8004c1e <_malloc_r+0x22>
 8004cee:	6025      	str	r5, [r4, #0]
 8004cf0:	e7dc      	b.n	8004cac <_malloc_r+0xb0>
 8004cf2:	605b      	str	r3, [r3, #4]
 8004cf4:	deff      	udf	#255	; 0xff
 8004cf6:	bf00      	nop
 8004cf8:	200002e0 	.word	0x200002e0

08004cfc <__malloc_lock>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__malloc_lock+0x8>)
 8004cfe:	f7ff bf0f 	b.w	8004b20 <__retarget_lock_acquire_recursive>
 8004d02:	bf00      	nop
 8004d04:	200002dc 	.word	0x200002dc

08004d08 <__malloc_unlock>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__malloc_unlock+0x8>)
 8004d0a:	f7ff bf0a 	b.w	8004b22 <__retarget_lock_release_recursive>
 8004d0e:	bf00      	nop
 8004d10:	200002dc 	.word	0x200002dc

08004d14 <__ssputs_r>:
 8004d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	688e      	ldr	r6, [r1, #8]
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	42be      	cmp	r6, r7
 8004d1e:	680b      	ldr	r3, [r1, #0]
 8004d20:	4682      	mov	sl, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4690      	mov	r8, r2
 8004d26:	d82c      	bhi.n	8004d82 <__ssputs_r+0x6e>
 8004d28:	898a      	ldrh	r2, [r1, #12]
 8004d2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d2e:	d026      	beq.n	8004d7e <__ssputs_r+0x6a>
 8004d30:	6965      	ldr	r5, [r4, #20]
 8004d32:	6909      	ldr	r1, [r1, #16]
 8004d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d38:	eba3 0901 	sub.w	r9, r3, r1
 8004d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d40:	1c7b      	adds	r3, r7, #1
 8004d42:	444b      	add	r3, r9
 8004d44:	106d      	asrs	r5, r5, #1
 8004d46:	429d      	cmp	r5, r3
 8004d48:	bf38      	it	cc
 8004d4a:	461d      	movcc	r5, r3
 8004d4c:	0553      	lsls	r3, r2, #21
 8004d4e:	d527      	bpl.n	8004da0 <__ssputs_r+0x8c>
 8004d50:	4629      	mov	r1, r5
 8004d52:	f7ff ff53 	bl	8004bfc <_malloc_r>
 8004d56:	4606      	mov	r6, r0
 8004d58:	b360      	cbz	r0, 8004db4 <__ssputs_r+0xa0>
 8004d5a:	6921      	ldr	r1, [r4, #16]
 8004d5c:	464a      	mov	r2, r9
 8004d5e:	f000 faeb 	bl	8005338 <memcpy>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	6126      	str	r6, [r4, #16]
 8004d70:	6165      	str	r5, [r4, #20]
 8004d72:	444e      	add	r6, r9
 8004d74:	eba5 0509 	sub.w	r5, r5, r9
 8004d78:	6026      	str	r6, [r4, #0]
 8004d7a:	60a5      	str	r5, [r4, #8]
 8004d7c:	463e      	mov	r6, r7
 8004d7e:	42be      	cmp	r6, r7
 8004d80:	d900      	bls.n	8004d84 <__ssputs_r+0x70>
 8004d82:	463e      	mov	r6, r7
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	4632      	mov	r2, r6
 8004d88:	4641      	mov	r1, r8
 8004d8a:	f000 faab 	bl	80052e4 <memmove>
 8004d8e:	68a3      	ldr	r3, [r4, #8]
 8004d90:	1b9b      	subs	r3, r3, r6
 8004d92:	60a3      	str	r3, [r4, #8]
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	4433      	add	r3, r6
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	462a      	mov	r2, r5
 8004da2:	f000 fad7 	bl	8005354 <_realloc_r>
 8004da6:	4606      	mov	r6, r0
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d1e0      	bne.n	8004d6e <__ssputs_r+0x5a>
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	4650      	mov	r0, sl
 8004db0:	f7ff feb8 	bl	8004b24 <_free_r>
 8004db4:	230c      	movs	r3, #12
 8004db6:	f8ca 3000 	str.w	r3, [sl]
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc6:	e7e9      	b.n	8004d9c <__ssputs_r+0x88>

08004dc8 <_svfiprintf_r>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	4698      	mov	r8, r3
 8004dce:	898b      	ldrh	r3, [r1, #12]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	b09d      	sub	sp, #116	; 0x74
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	460d      	mov	r5, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	d50e      	bpl.n	8004dfa <_svfiprintf_r+0x32>
 8004ddc:	690b      	ldr	r3, [r1, #16]
 8004dde:	b963      	cbnz	r3, 8004dfa <_svfiprintf_r+0x32>
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	f7ff ff0b 	bl	8004bfc <_malloc_r>
 8004de6:	6028      	str	r0, [r5, #0]
 8004de8:	6128      	str	r0, [r5, #16]
 8004dea:	b920      	cbnz	r0, 8004df6 <_svfiprintf_r+0x2e>
 8004dec:	230c      	movs	r3, #12
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e0d0      	b.n	8004f98 <_svfiprintf_r+0x1d0>
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	616b      	str	r3, [r5, #20]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfe:	2320      	movs	r3, #32
 8004e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e08:	2330      	movs	r3, #48	; 0x30
 8004e0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004fb0 <_svfiprintf_r+0x1e8>
 8004e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e12:	f04f 0901 	mov.w	r9, #1
 8004e16:	4623      	mov	r3, r4
 8004e18:	469a      	mov	sl, r3
 8004e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1e:	b10a      	cbz	r2, 8004e24 <_svfiprintf_r+0x5c>
 8004e20:	2a25      	cmp	r2, #37	; 0x25
 8004e22:	d1f9      	bne.n	8004e18 <_svfiprintf_r+0x50>
 8004e24:	ebba 0b04 	subs.w	fp, sl, r4
 8004e28:	d00b      	beq.n	8004e42 <_svfiprintf_r+0x7a>
 8004e2a:	465b      	mov	r3, fp
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7ff ff6f 	bl	8004d14 <__ssputs_r>
 8004e36:	3001      	adds	r0, #1
 8004e38:	f000 80a9 	beq.w	8004f8e <_svfiprintf_r+0x1c6>
 8004e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3e:	445a      	add	r2, fp
 8004e40:	9209      	str	r2, [sp, #36]	; 0x24
 8004e42:	f89a 3000 	ldrb.w	r3, [sl]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80a1 	beq.w	8004f8e <_svfiprintf_r+0x1c6>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e56:	f10a 0a01 	add.w	sl, sl, #1
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	9307      	str	r3, [sp, #28]
 8004e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e62:	931a      	str	r3, [sp, #104]	; 0x68
 8004e64:	4654      	mov	r4, sl
 8004e66:	2205      	movs	r2, #5
 8004e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e6c:	4850      	ldr	r0, [pc, #320]	; (8004fb0 <_svfiprintf_r+0x1e8>)
 8004e6e:	f7fb f9af 	bl	80001d0 <memchr>
 8004e72:	9a04      	ldr	r2, [sp, #16]
 8004e74:	b9d8      	cbnz	r0, 8004eae <_svfiprintf_r+0xe6>
 8004e76:	06d0      	lsls	r0, r2, #27
 8004e78:	bf44      	itt	mi
 8004e7a:	2320      	movmi	r3, #32
 8004e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e80:	0711      	lsls	r1, r2, #28
 8004e82:	bf44      	itt	mi
 8004e84:	232b      	movmi	r3, #43	; 0x2b
 8004e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e90:	d015      	beq.n	8004ebe <_svfiprintf_r+0xf6>
 8004e92:	9a07      	ldr	r2, [sp, #28]
 8004e94:	4654      	mov	r4, sl
 8004e96:	2000      	movs	r0, #0
 8004e98:	f04f 0c0a 	mov.w	ip, #10
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ea2:	3b30      	subs	r3, #48	; 0x30
 8004ea4:	2b09      	cmp	r3, #9
 8004ea6:	d94d      	bls.n	8004f44 <_svfiprintf_r+0x17c>
 8004ea8:	b1b0      	cbz	r0, 8004ed8 <_svfiprintf_r+0x110>
 8004eaa:	9207      	str	r2, [sp, #28]
 8004eac:	e014      	b.n	8004ed8 <_svfiprintf_r+0x110>
 8004eae:	eba0 0308 	sub.w	r3, r0, r8
 8004eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	9304      	str	r3, [sp, #16]
 8004eba:	46a2      	mov	sl, r4
 8004ebc:	e7d2      	b.n	8004e64 <_svfiprintf_r+0x9c>
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	9103      	str	r1, [sp, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bfbb      	ittet	lt
 8004eca:	425b      	neglt	r3, r3
 8004ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ed0:	9307      	strge	r3, [sp, #28]
 8004ed2:	9307      	strlt	r3, [sp, #28]
 8004ed4:	bfb8      	it	lt
 8004ed6:	9204      	strlt	r2, [sp, #16]
 8004ed8:	7823      	ldrb	r3, [r4, #0]
 8004eda:	2b2e      	cmp	r3, #46	; 0x2e
 8004edc:	d10c      	bne.n	8004ef8 <_svfiprintf_r+0x130>
 8004ede:	7863      	ldrb	r3, [r4, #1]
 8004ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee2:	d134      	bne.n	8004f4e <_svfiprintf_r+0x186>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	1d1a      	adds	r2, r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	9203      	str	r2, [sp, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bfb8      	it	lt
 8004ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ef4:	3402      	adds	r4, #2
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004fc0 <_svfiprintf_r+0x1f8>
 8004efc:	7821      	ldrb	r1, [r4, #0]
 8004efe:	2203      	movs	r2, #3
 8004f00:	4650      	mov	r0, sl
 8004f02:	f7fb f965 	bl	80001d0 <memchr>
 8004f06:	b138      	cbz	r0, 8004f18 <_svfiprintf_r+0x150>
 8004f08:	9b04      	ldr	r3, [sp, #16]
 8004f0a:	eba0 000a 	sub.w	r0, r0, sl
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	4082      	lsls	r2, r0
 8004f12:	4313      	orrs	r3, r2
 8004f14:	3401      	adds	r4, #1
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1c:	4825      	ldr	r0, [pc, #148]	; (8004fb4 <_svfiprintf_r+0x1ec>)
 8004f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f22:	2206      	movs	r2, #6
 8004f24:	f7fb f954 	bl	80001d0 <memchr>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d038      	beq.n	8004f9e <_svfiprintf_r+0x1d6>
 8004f2c:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <_svfiprintf_r+0x1f0>)
 8004f2e:	bb1b      	cbnz	r3, 8004f78 <_svfiprintf_r+0x1b0>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	3307      	adds	r3, #7
 8004f34:	f023 0307 	bic.w	r3, r3, #7
 8004f38:	3308      	adds	r3, #8
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3e:	4433      	add	r3, r6
 8004f40:	9309      	str	r3, [sp, #36]	; 0x24
 8004f42:	e768      	b.n	8004e16 <_svfiprintf_r+0x4e>
 8004f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f48:	460c      	mov	r4, r1
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	e7a6      	b.n	8004e9c <_svfiprintf_r+0xd4>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	3401      	adds	r4, #1
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f04f 0c0a 	mov.w	ip, #10
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f60:	3a30      	subs	r2, #48	; 0x30
 8004f62:	2a09      	cmp	r2, #9
 8004f64:	d903      	bls.n	8004f6e <_svfiprintf_r+0x1a6>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0c6      	beq.n	8004ef8 <_svfiprintf_r+0x130>
 8004f6a:	9105      	str	r1, [sp, #20]
 8004f6c:	e7c4      	b.n	8004ef8 <_svfiprintf_r+0x130>
 8004f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f72:	4604      	mov	r4, r0
 8004f74:	2301      	movs	r3, #1
 8004f76:	e7f0      	b.n	8004f5a <_svfiprintf_r+0x192>
 8004f78:	ab03      	add	r3, sp, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <_svfiprintf_r+0x1f4>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4638      	mov	r0, r7
 8004f84:	f3af 8000 	nop.w
 8004f88:	1c42      	adds	r2, r0, #1
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	d1d6      	bne.n	8004f3c <_svfiprintf_r+0x174>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	065b      	lsls	r3, r3, #25
 8004f92:	f53f af2d 	bmi.w	8004df0 <_svfiprintf_r+0x28>
 8004f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f98:	b01d      	add	sp, #116	; 0x74
 8004f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9e:	ab03      	add	r3, sp, #12
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	462a      	mov	r2, r5
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <_svfiprintf_r+0x1f4>)
 8004fa6:	a904      	add	r1, sp, #16
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f000 f879 	bl	80050a0 <_printf_i>
 8004fae:	e7eb      	b.n	8004f88 <_svfiprintf_r+0x1c0>
 8004fb0:	0800543c 	.word	0x0800543c
 8004fb4:	08005446 	.word	0x08005446
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	08004d15 	.word	0x08004d15
 8004fc0:	08005442 	.word	0x08005442

08004fc4 <_printf_common>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	4616      	mov	r6, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	688a      	ldr	r2, [r1, #8]
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bfb8      	it	lt
 8004fd8:	4613      	movlt	r3, r2
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b10a      	cbz	r2, 8004fea <_printf_common+0x26>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	6833      	ldrmi	r3, [r6, #0]
 8004ff2:	3302      	addmi	r3, #2
 8004ff4:	6033      	strmi	r3, [r6, #0]
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	f015 0506 	ands.w	r5, r5, #6
 8004ffc:	d106      	bne.n	800500c <_printf_common+0x48>
 8004ffe:	f104 0a19 	add.w	sl, r4, #25
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	6832      	ldr	r2, [r6, #0]
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	42ab      	cmp	r3, r5
 800500a:	dc26      	bgt.n	800505a <_printf_common+0x96>
 800500c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005010:	1e13      	subs	r3, r2, #0
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	2301      	movne	r3, #1
 8005018:	0692      	lsls	r2, r2, #26
 800501a:	d42b      	bmi.n	8005074 <_printf_common+0xb0>
 800501c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005020:	4649      	mov	r1, r9
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	3001      	adds	r0, #1
 8005028:	d01e      	beq.n	8005068 <_printf_common+0xa4>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	f003 0306 	and.w	r3, r3, #6
 8005032:	2b04      	cmp	r3, #4
 8005034:	bf02      	ittt	eq
 8005036:	68e5      	ldreq	r5, [r4, #12]
 8005038:	6833      	ldreq	r3, [r6, #0]
 800503a:	1aed      	subeq	r5, r5, r3
 800503c:	68a3      	ldr	r3, [r4, #8]
 800503e:	bf0c      	ite	eq
 8005040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005044:	2500      	movne	r5, #0
 8005046:	4293      	cmp	r3, r2
 8005048:	bfc4      	itt	gt
 800504a:	1a9b      	subgt	r3, r3, r2
 800504c:	18ed      	addgt	r5, r5, r3
 800504e:	2600      	movs	r6, #0
 8005050:	341a      	adds	r4, #26
 8005052:	42b5      	cmp	r5, r6
 8005054:	d11a      	bne.n	800508c <_printf_common+0xc8>
 8005056:	2000      	movs	r0, #0
 8005058:	e008      	b.n	800506c <_printf_common+0xa8>
 800505a:	2301      	movs	r3, #1
 800505c:	4652      	mov	r2, sl
 800505e:	4649      	mov	r1, r9
 8005060:	4638      	mov	r0, r7
 8005062:	47c0      	blx	r8
 8005064:	3001      	adds	r0, #1
 8005066:	d103      	bne.n	8005070 <_printf_common+0xac>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	3501      	adds	r5, #1
 8005072:	e7c6      	b.n	8005002 <_printf_common+0x3e>
 8005074:	18e1      	adds	r1, r4, r3
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	2030      	movs	r0, #48	; 0x30
 800507a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800507e:	4422      	add	r2, r4
 8005080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005088:	3302      	adds	r3, #2
 800508a:	e7c7      	b.n	800501c <_printf_common+0x58>
 800508c:	2301      	movs	r3, #1
 800508e:	4622      	mov	r2, r4
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d0e6      	beq.n	8005068 <_printf_common+0xa4>
 800509a:	3601      	adds	r6, #1
 800509c:	e7d9      	b.n	8005052 <_printf_common+0x8e>
	...

080050a0 <_printf_i>:
 80050a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	7e0f      	ldrb	r7, [r1, #24]
 80050a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050a8:	2f78      	cmp	r7, #120	; 0x78
 80050aa:	4691      	mov	r9, r2
 80050ac:	4680      	mov	r8, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	469a      	mov	sl, r3
 80050b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050b6:	d807      	bhi.n	80050c8 <_printf_i+0x28>
 80050b8:	2f62      	cmp	r7, #98	; 0x62
 80050ba:	d80a      	bhi.n	80050d2 <_printf_i+0x32>
 80050bc:	2f00      	cmp	r7, #0
 80050be:	f000 80d4 	beq.w	800526a <_printf_i+0x1ca>
 80050c2:	2f58      	cmp	r7, #88	; 0x58
 80050c4:	f000 80c0 	beq.w	8005248 <_printf_i+0x1a8>
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d0:	e03a      	b.n	8005148 <_printf_i+0xa8>
 80050d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050d6:	2b15      	cmp	r3, #21
 80050d8:	d8f6      	bhi.n	80050c8 <_printf_i+0x28>
 80050da:	a101      	add	r1, pc, #4	; (adr r1, 80050e0 <_printf_i+0x40>)
 80050dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e0:	08005139 	.word	0x08005139
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	080050c9 	.word	0x080050c9
 80050ec:	080050c9 	.word	0x080050c9
 80050f0:	080050c9 	.word	0x080050c9
 80050f4:	080050c9 	.word	0x080050c9
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	080050c9 	.word	0x080050c9
 8005100:	080050c9 	.word	0x080050c9
 8005104:	080050c9 	.word	0x080050c9
 8005108:	080050c9 	.word	0x080050c9
 800510c:	08005251 	.word	0x08005251
 8005110:	08005179 	.word	0x08005179
 8005114:	0800520b 	.word	0x0800520b
 8005118:	080050c9 	.word	0x080050c9
 800511c:	080050c9 	.word	0x080050c9
 8005120:	08005273 	.word	0x08005273
 8005124:	080050c9 	.word	0x080050c9
 8005128:	08005179 	.word	0x08005179
 800512c:	080050c9 	.word	0x080050c9
 8005130:	080050c9 	.word	0x080050c9
 8005134:	08005213 	.word	0x08005213
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	602a      	str	r2, [r5, #0]
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005148:	2301      	movs	r3, #1
 800514a:	e09f      	b.n	800528c <_printf_i+0x1ec>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	0607      	lsls	r7, r0, #24
 8005152:	f103 0104 	add.w	r1, r3, #4
 8005156:	6029      	str	r1, [r5, #0]
 8005158:	d501      	bpl.n	800515e <_printf_i+0xbe>
 800515a:	681e      	ldr	r6, [r3, #0]
 800515c:	e003      	b.n	8005166 <_printf_i+0xc6>
 800515e:	0646      	lsls	r6, r0, #25
 8005160:	d5fb      	bpl.n	800515a <_printf_i+0xba>
 8005162:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005166:	2e00      	cmp	r6, #0
 8005168:	da03      	bge.n	8005172 <_printf_i+0xd2>
 800516a:	232d      	movs	r3, #45	; 0x2d
 800516c:	4276      	negs	r6, r6
 800516e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005172:	485a      	ldr	r0, [pc, #360]	; (80052dc <_printf_i+0x23c>)
 8005174:	230a      	movs	r3, #10
 8005176:	e012      	b.n	800519e <_printf_i+0xfe>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	6820      	ldr	r0, [r4, #0]
 800517c:	1d19      	adds	r1, r3, #4
 800517e:	6029      	str	r1, [r5, #0]
 8005180:	0605      	lsls	r5, r0, #24
 8005182:	d501      	bpl.n	8005188 <_printf_i+0xe8>
 8005184:	681e      	ldr	r6, [r3, #0]
 8005186:	e002      	b.n	800518e <_printf_i+0xee>
 8005188:	0641      	lsls	r1, r0, #25
 800518a:	d5fb      	bpl.n	8005184 <_printf_i+0xe4>
 800518c:	881e      	ldrh	r6, [r3, #0]
 800518e:	4853      	ldr	r0, [pc, #332]	; (80052dc <_printf_i+0x23c>)
 8005190:	2f6f      	cmp	r7, #111	; 0x6f
 8005192:	bf0c      	ite	eq
 8005194:	2308      	moveq	r3, #8
 8005196:	230a      	movne	r3, #10
 8005198:	2100      	movs	r1, #0
 800519a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800519e:	6865      	ldr	r5, [r4, #4]
 80051a0:	60a5      	str	r5, [r4, #8]
 80051a2:	2d00      	cmp	r5, #0
 80051a4:	bfa2      	ittt	ge
 80051a6:	6821      	ldrge	r1, [r4, #0]
 80051a8:	f021 0104 	bicge.w	r1, r1, #4
 80051ac:	6021      	strge	r1, [r4, #0]
 80051ae:	b90e      	cbnz	r6, 80051b4 <_printf_i+0x114>
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	d04b      	beq.n	800524c <_printf_i+0x1ac>
 80051b4:	4615      	mov	r5, r2
 80051b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80051ba:	fb03 6711 	mls	r7, r3, r1, r6
 80051be:	5dc7      	ldrb	r7, [r0, r7]
 80051c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051c4:	4637      	mov	r7, r6
 80051c6:	42bb      	cmp	r3, r7
 80051c8:	460e      	mov	r6, r1
 80051ca:	d9f4      	bls.n	80051b6 <_printf_i+0x116>
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d10b      	bne.n	80051e8 <_printf_i+0x148>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	07de      	lsls	r6, r3, #31
 80051d4:	d508      	bpl.n	80051e8 <_printf_i+0x148>
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	6861      	ldr	r1, [r4, #4]
 80051da:	4299      	cmp	r1, r3
 80051dc:	bfde      	ittt	le
 80051de:	2330      	movle	r3, #48	; 0x30
 80051e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051e8:	1b52      	subs	r2, r2, r5
 80051ea:	6122      	str	r2, [r4, #16]
 80051ec:	f8cd a000 	str.w	sl, [sp]
 80051f0:	464b      	mov	r3, r9
 80051f2:	aa03      	add	r2, sp, #12
 80051f4:	4621      	mov	r1, r4
 80051f6:	4640      	mov	r0, r8
 80051f8:	f7ff fee4 	bl	8004fc4 <_printf_common>
 80051fc:	3001      	adds	r0, #1
 80051fe:	d14a      	bne.n	8005296 <_printf_i+0x1f6>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	b004      	add	sp, #16
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	f043 0320 	orr.w	r3, r3, #32
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	4833      	ldr	r0, [pc, #204]	; (80052e0 <_printf_i+0x240>)
 8005214:	2778      	movs	r7, #120	; 0x78
 8005216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6829      	ldr	r1, [r5, #0]
 800521e:	061f      	lsls	r7, r3, #24
 8005220:	f851 6b04 	ldr.w	r6, [r1], #4
 8005224:	d402      	bmi.n	800522c <_printf_i+0x18c>
 8005226:	065f      	lsls	r7, r3, #25
 8005228:	bf48      	it	mi
 800522a:	b2b6      	uxthmi	r6, r6
 800522c:	07df      	lsls	r7, r3, #31
 800522e:	bf48      	it	mi
 8005230:	f043 0320 	orrmi.w	r3, r3, #32
 8005234:	6029      	str	r1, [r5, #0]
 8005236:	bf48      	it	mi
 8005238:	6023      	strmi	r3, [r4, #0]
 800523a:	b91e      	cbnz	r6, 8005244 <_printf_i+0x1a4>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	f023 0320 	bic.w	r3, r3, #32
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	2310      	movs	r3, #16
 8005246:	e7a7      	b.n	8005198 <_printf_i+0xf8>
 8005248:	4824      	ldr	r0, [pc, #144]	; (80052dc <_printf_i+0x23c>)
 800524a:	e7e4      	b.n	8005216 <_printf_i+0x176>
 800524c:	4615      	mov	r5, r2
 800524e:	e7bd      	b.n	80051cc <_printf_i+0x12c>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	6826      	ldr	r6, [r4, #0]
 8005254:	6961      	ldr	r1, [r4, #20]
 8005256:	1d18      	adds	r0, r3, #4
 8005258:	6028      	str	r0, [r5, #0]
 800525a:	0635      	lsls	r5, r6, #24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	d501      	bpl.n	8005264 <_printf_i+0x1c4>
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0x1ca>
 8005264:	0670      	lsls	r0, r6, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0x1c0>
 8005268:	8019      	strh	r1, [r3, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	4615      	mov	r5, r2
 8005270:	e7bc      	b.n	80051ec <_printf_i+0x14c>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	602a      	str	r2, [r5, #0]
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	4628      	mov	r0, r5
 8005280:	f7fa ffa6 	bl	80001d0 <memchr>
 8005284:	b108      	cbz	r0, 800528a <_printf_i+0x1ea>
 8005286:	1b40      	subs	r0, r0, r5
 8005288:	6060      	str	r0, [r4, #4]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005294:	e7aa      	b.n	80051ec <_printf_i+0x14c>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	462a      	mov	r2, r5
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d0ad      	beq.n	8005200 <_printf_i+0x160>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	079b      	lsls	r3, r3, #30
 80052a8:	d413      	bmi.n	80052d2 <_printf_i+0x232>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	e7a6      	b.n	8005204 <_printf_i+0x164>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d09d      	beq.n	8005200 <_printf_i+0x160>
 80052c4:	3501      	adds	r5, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	9903      	ldr	r1, [sp, #12]
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dcf2      	bgt.n	80052b6 <_printf_i+0x216>
 80052d0:	e7eb      	b.n	80052aa <_printf_i+0x20a>
 80052d2:	2500      	movs	r5, #0
 80052d4:	f104 0619 	add.w	r6, r4, #25
 80052d8:	e7f5      	b.n	80052c6 <_printf_i+0x226>
 80052da:	bf00      	nop
 80052dc:	0800544d 	.word	0x0800544d
 80052e0:	0800545e 	.word	0x0800545e

080052e4 <memmove>:
 80052e4:	4288      	cmp	r0, r1
 80052e6:	b510      	push	{r4, lr}
 80052e8:	eb01 0402 	add.w	r4, r1, r2
 80052ec:	d902      	bls.n	80052f4 <memmove+0x10>
 80052ee:	4284      	cmp	r4, r0
 80052f0:	4623      	mov	r3, r4
 80052f2:	d807      	bhi.n	8005304 <memmove+0x20>
 80052f4:	1e43      	subs	r3, r0, #1
 80052f6:	42a1      	cmp	r1, r4
 80052f8:	d008      	beq.n	800530c <memmove+0x28>
 80052fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005302:	e7f8      	b.n	80052f6 <memmove+0x12>
 8005304:	4402      	add	r2, r0
 8005306:	4601      	mov	r1, r0
 8005308:	428a      	cmp	r2, r1
 800530a:	d100      	bne.n	800530e <memmove+0x2a>
 800530c:	bd10      	pop	{r4, pc}
 800530e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005316:	e7f7      	b.n	8005308 <memmove+0x24>

08005318 <_sbrk_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d06      	ldr	r5, [pc, #24]	; (8005334 <_sbrk_r+0x1c>)
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fb ff70 	bl	8001208 <_sbrk>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_sbrk_r+0x1a>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_sbrk_r+0x1a>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	200002d8 	.word	0x200002d8

08005338 <memcpy>:
 8005338:	440a      	add	r2, r1
 800533a:	4291      	cmp	r1, r2
 800533c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005340:	d100      	bne.n	8005344 <memcpy+0xc>
 8005342:	4770      	bx	lr
 8005344:	b510      	push	{r4, lr}
 8005346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800534a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800534e:	4291      	cmp	r1, r2
 8005350:	d1f9      	bne.n	8005346 <memcpy+0xe>
 8005352:	bd10      	pop	{r4, pc}

08005354 <_realloc_r>:
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	4680      	mov	r8, r0
 800535a:	4614      	mov	r4, r2
 800535c:	460e      	mov	r6, r1
 800535e:	b921      	cbnz	r1, 800536a <_realloc_r+0x16>
 8005360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	4611      	mov	r1, r2
 8005366:	f7ff bc49 	b.w	8004bfc <_malloc_r>
 800536a:	b92a      	cbnz	r2, 8005378 <_realloc_r+0x24>
 800536c:	f7ff fbda 	bl	8004b24 <_free_r>
 8005370:	4625      	mov	r5, r4
 8005372:	4628      	mov	r0, r5
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	f000 f81b 	bl	80053b2 <_malloc_usable_size_r>
 800537c:	4284      	cmp	r4, r0
 800537e:	4607      	mov	r7, r0
 8005380:	d802      	bhi.n	8005388 <_realloc_r+0x34>
 8005382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005386:	d812      	bhi.n	80053ae <_realloc_r+0x5a>
 8005388:	4621      	mov	r1, r4
 800538a:	4640      	mov	r0, r8
 800538c:	f7ff fc36 	bl	8004bfc <_malloc_r>
 8005390:	4605      	mov	r5, r0
 8005392:	2800      	cmp	r0, #0
 8005394:	d0ed      	beq.n	8005372 <_realloc_r+0x1e>
 8005396:	42bc      	cmp	r4, r7
 8005398:	4622      	mov	r2, r4
 800539a:	4631      	mov	r1, r6
 800539c:	bf28      	it	cs
 800539e:	463a      	movcs	r2, r7
 80053a0:	f7ff ffca 	bl	8005338 <memcpy>
 80053a4:	4631      	mov	r1, r6
 80053a6:	4640      	mov	r0, r8
 80053a8:	f7ff fbbc 	bl	8004b24 <_free_r>
 80053ac:	e7e1      	b.n	8005372 <_realloc_r+0x1e>
 80053ae:	4635      	mov	r5, r6
 80053b0:	e7df      	b.n	8005372 <_realloc_r+0x1e>

080053b2 <_malloc_usable_size_r>:
 80053b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b6:	1f18      	subs	r0, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbc      	itt	lt
 80053bc:	580b      	ldrlt	r3, [r1, r0]
 80053be:	18c0      	addlt	r0, r0, r3
 80053c0:	4770      	bx	lr
	...

080053c4 <_init>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr

080053d0 <_fini>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr
